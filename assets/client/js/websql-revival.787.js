(()=>{"use strict";var __webpack_modules__={538:A=>{A.exports="data:application/wasm;base64,"},787:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval("\n;// CONCATENATED MODULE: ./node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs\n/*\n ** LICENSE for the sqlite3 WebAssembly/JavaScript APIs.\n **\n ** This bundle (typically released as sqlite3.js or sqlite3.mjs)\n ** is an amalgamation of JavaScript source code from two projects:\n **\n ** 1) https://emscripten.org: the Emscripten \"glue code\" is covered by\n **    the terms of the MIT license and University of Illinois/NCSA\n **    Open Source License, as described at:\n **\n **    https://emscripten.org/docs/introducing_emscripten/emscripten_license.html\n **\n ** 2) https://sqlite.org: all code and documentation labeled as being\n **    from this source are released under the same terms as the sqlite3\n **    C library:\n **\n ** 2022-10-16\n **\n ** The author disclaims copyright to this source code.  In place of a\n ** legal notice, here is a blessing:\n **\n ** *   May you do good and not evil.\n ** *   May you find forgiveness for yourself and forgive others.\n ** *   May you share freely, never taking more than you give.\n */\n/*\n ** This code was built from sqlite3 version...\n **\n ** SQLITE_VERSION \"3.45.2\"\n ** SQLITE_VERSION_NUMBER 3045002\n ** SQLITE_SOURCE_ID \"2024-03-12 11:06:23 d8cd6d49b46a395b13955387d05e9e1a2a47e54fb99f3c9b59835bbefad6af77\"\n **\n ** Using the Emscripten SDK version 3.1.30.\n */\n\nvar sqlite3InitModule = (() => {\n  var _scriptDir = \"file:///C:/Users/Alessandro/Desktop/websql-replacement/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs\";\n\n  return function (config) {\n    var sqlite3InitModule = config || {};\n\n    var Module =\n      typeof sqlite3InitModule != 'undefined' ? sqlite3InitModule : {};\n\n    var readyPromiseResolve, readyPromiseReject;\n    Module['ready'] = new Promise(function (resolve, reject) {\n      readyPromiseResolve = resolve;\n      readyPromiseReject = reject;\n    });\n\n    const sqlite3InitModuleState =\n      globalThis.sqlite3InitModuleState ||\n      Object.assign(Object.create(null), {\n        debugModule: () => {},\n      });\n    delete globalThis.sqlite3InitModuleState;\n    sqlite3InitModuleState.debugModule(\n      'globalThis.location =',\n      globalThis.location,\n    );\n\n    const xNameOfInstantiateWasm =  false\n      ? 0\n      : 'emscripten-bug-17951';\n    Module[xNameOfInstantiateWasm] = function callee(imports, onSuccess) {\n      imports.env.foo = function () {};\n      const uri = Module.locateFile(\n        callee.uri,\n        'undefined' === typeof scriptDirectory ? '' : scriptDirectory,\n      );\n      sqlite3InitModuleState.debugModule('instantiateWasm() uri =', uri);\n      const wfetch = () => fetch(uri, { credentials: 'same-origin' });\n      const loadWasm = WebAssembly.instantiateStreaming\n        ? async () => {\n            return WebAssembly.instantiateStreaming(wfetch(), imports).then(\n              (arg) => onSuccess(arg.instance, arg.module),\n            );\n          }\n        : async () => {\n            return wfetch()\n              .then((response) => response.arrayBuffer())\n              .then((bytes) => WebAssembly.instantiate(bytes, imports))\n              .then((arg) => onSuccess(arg.instance, arg.module));\n          };\n      loadWasm();\n      return {};\n    };\n\n    Module[xNameOfInstantiateWasm].uri = 'sqlite3.wasm';\n\n    var moduleOverrides = Object.assign({}, Module);\n\n    var arguments_ = [];\n    var thisProgram = './this.program';\n    var quit_ = (status, toThrow) => {\n      throw toThrow;\n    };\n\n    var ENVIRONMENT_IS_WEB = typeof window == 'object';\n    var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';\n\n    var ENVIRONMENT_IS_NODE =\n      typeof process == 'object' &&\n      typeof process.versions == 'object' &&\n      typeof process.versions.node == 'string';\n    var ENVIRONMENT_IS_SHELL =\n      !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\n    var scriptDirectory = '';\n    function locateFile(path) {\n      if (Module['locateFile']) {\n        return Module['locateFile'](path, scriptDirectory);\n      }\n      return scriptDirectory + path;\n    }\n\n    var read_, readAsync, readBinary, setWindowTitle;\n\n    if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n      if (ENVIRONMENT_IS_WORKER) {\n        scriptDirectory = self.location.href;\n      } else if (typeof document != 'undefined' && document.currentScript) {\n        scriptDirectory = document.currentScript.src;\n      }\n\n      if (_scriptDir) {\n        scriptDirectory = _scriptDir;\n      }\n\n      if (scriptDirectory.indexOf('blob:') !== 0) {\n        scriptDirectory = scriptDirectory.substr(\n          0,\n          scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1,\n        );\n      } else {\n        scriptDirectory = '';\n      }\n\n      {\n        read_ = (url) => {\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', url, false);\n          xhr.send(null);\n          return xhr.responseText;\n        };\n\n        if (ENVIRONMENT_IS_WORKER) {\n          readBinary = (url) => {\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, false);\n            xhr.responseType = 'arraybuffer';\n            xhr.send(null);\n            return new Uint8Array(xhr.response);\n          };\n        }\n\n        readAsync = (url, onload, onerror) => {\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', url, true);\n          xhr.responseType = 'arraybuffer';\n          xhr.onload = () => {\n            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {\n              onload(xhr.response);\n              return;\n            }\n            onerror();\n          };\n          xhr.onerror = onerror;\n          xhr.send(null);\n        };\n      }\n\n      setWindowTitle = (title) => (document.title = title);\n    } else {\n    }\n\n    var out = Module['print'] || console.log.bind(console);\n    var err = Module['printErr'] || console.warn.bind(console);\n\n    Object.assign(Module, moduleOverrides);\n\n    moduleOverrides = null;\n\n    if (Module['arguments']) arguments_ = Module['arguments'];\n\n    if (Module['thisProgram']) thisProgram = Module['thisProgram'];\n\n    if (Module['quit']) quit_ = Module['quit'];\n\n    var STACK_ALIGN = 16;\n    var POINTER_SIZE = 4;\n\n    function getNativeTypeSize(type) {\n      switch (type) {\n        case 'i1':\n        case 'i8':\n        case 'u8':\n          return 1;\n        case 'i16':\n        case 'u16':\n          return 2;\n        case 'i32':\n        case 'u32':\n          return 4;\n        case 'i64':\n        case 'u64':\n          return 8;\n        case 'float':\n          return 4;\n        case 'double':\n          return 8;\n        default: {\n          if (type[type.length - 1] === '*') {\n            return POINTER_SIZE;\n          }\n          if (type[0] === 'i') {\n            const bits = Number(type.substr(1));\n            assert(\n              bits % 8 === 0,\n              'getNativeTypeSize invalid bits ' + bits + ', type ' + type,\n            );\n            return bits / 8;\n          }\n          return 0;\n        }\n      }\n    }\n\n    var wasmBinary;\n    if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];\n    var noExitRuntime = Module['noExitRuntime'] || true;\n\n    if (typeof WebAssembly != 'object') {\n      abort('no native wasm support detected');\n    }\n\n    var wasmMemory;\n\n    var ABORT = false;\n\n    var EXITSTATUS;\n\n    function assert(condition, text) {\n      if (!condition) {\n        abort(text);\n      }\n    }\n\n    var UTF8Decoder =\n      typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n\n    function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n      var endIdx = idx + maxBytesToRead;\n      var endPtr = idx;\n\n      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n\n      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n      }\n      var str = '';\n\n      while (idx < endPtr) {\n        var u0 = heapOrArray[idx++];\n        if (!(u0 & 0x80)) {\n          str += String.fromCharCode(u0);\n          continue;\n        }\n        var u1 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xe0) == 0xc0) {\n          str += String.fromCharCode(((u0 & 31) << 6) | u1);\n          continue;\n        }\n        var u2 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xf0) == 0xe0) {\n          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n        } else {\n          u0 =\n            ((u0 & 7) << 18) |\n            (u1 << 12) |\n            (u2 << 6) |\n            (heapOrArray[idx++] & 63);\n        }\n\n        if (u0 < 0x10000) {\n          str += String.fromCharCode(u0);\n        } else {\n          var ch = u0 - 0x10000;\n          str += String.fromCharCode(\n            0xd800 | (ch >> 10),\n            0xdc00 | (ch & 0x3ff),\n          );\n        }\n      }\n      return str;\n    }\n\n    function UTF8ToString(ptr, maxBytesToRead) {\n      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n    }\n\n    function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n      if (!(maxBytesToWrite > 0)) return 0;\n\n      var startIdx = outIdx;\n      var endIdx = outIdx + maxBytesToWrite - 1;\n      for (var i = 0; i < str.length; ++i) {\n        var u = str.charCodeAt(i);\n        if (u >= 0xd800 && u <= 0xdfff) {\n          var u1 = str.charCodeAt(++i);\n          u = (0x10000 + ((u & 0x3ff) << 10)) | (u1 & 0x3ff);\n        }\n        if (u <= 0x7f) {\n          if (outIdx >= endIdx) break;\n          heap[outIdx++] = u;\n        } else if (u <= 0x7ff) {\n          if (outIdx + 1 >= endIdx) break;\n          heap[outIdx++] = 0xc0 | (u >> 6);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else if (u <= 0xffff) {\n          if (outIdx + 2 >= endIdx) break;\n          heap[outIdx++] = 0xe0 | (u >> 12);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else {\n          if (outIdx + 3 >= endIdx) break;\n          heap[outIdx++] = 0xf0 | (u >> 18);\n          heap[outIdx++] = 0x80 | ((u >> 12) & 63);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        }\n      }\n\n      heap[outIdx] = 0;\n      return outIdx - startIdx;\n    }\n\n    function stringToUTF8(str, outPtr, maxBytesToWrite) {\n      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n    }\n\n    function lengthBytesUTF8(str) {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        var c = str.charCodeAt(i);\n        if (c <= 0x7f) {\n          len++;\n        } else if (c <= 0x7ff) {\n          len += 2;\n        } else if (c >= 0xd800 && c <= 0xdfff) {\n          len += 4;\n          ++i;\n        } else {\n          len += 3;\n        }\n      }\n      return len;\n    }\n\n    var HEAP,\n      HEAP8,\n      HEAPU8,\n      HEAP16,\n      HEAPU16,\n      HEAP32,\n      HEAPU32,\n      HEAPF32,\n      HEAP64,\n      HEAPU64,\n      HEAPF64;\n\n    function updateMemoryViews() {\n      var b = wasmMemory.buffer;\n      Module['HEAP8'] = HEAP8 = new Int8Array(b);\n      Module['HEAP16'] = HEAP16 = new Int16Array(b);\n      Module['HEAP32'] = HEAP32 = new Int32Array(b);\n      Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);\n      Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);\n      Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);\n      Module['HEAPF32'] = HEAPF32 = new Float32Array(b);\n      Module['HEAPF64'] = HEAPF64 = new Float64Array(b);\n      Module['HEAP64'] = HEAP64 = new BigInt64Array(b);\n      Module['HEAPU64'] = HEAPU64 = new BigUint64Array(b);\n    }\n\n    var STACK_SIZE = 524288;\n\n    var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;\n\n    if (Module['wasmMemory']) {\n      wasmMemory = Module['wasmMemory'];\n    } else {\n      wasmMemory = new WebAssembly.Memory({\n        initial: INITIAL_MEMORY / 65536,\n\n        maximum: 2147483648 / 65536,\n      });\n    }\n\n    updateMemoryViews();\n\n    INITIAL_MEMORY = wasmMemory.buffer.byteLength;\n\n    var wasmTable;\n\n    var __ATPRERUN__ = [];\n    var __ATINIT__ = [];\n    var __ATEXIT__ = [];\n    var __ATPOSTRUN__ = [];\n\n    var runtimeInitialized = false;\n\n    function keepRuntimeAlive() {\n      return noExitRuntime;\n    }\n\n    function preRun() {\n      if (Module['preRun']) {\n        if (typeof Module['preRun'] == 'function')\n          Module['preRun'] = [Module['preRun']];\n        while (Module['preRun'].length) {\n          addOnPreRun(Module['preRun'].shift());\n        }\n      }\n\n      callRuntimeCallbacks(__ATPRERUN__);\n    }\n\n    function initRuntime() {\n      runtimeInitialized = true;\n\n      if (!Module['noFSInit'] && !FS.init.initialized) FS.init();\n      FS.ignorePermissions = false;\n\n      TTY.init();\n      callRuntimeCallbacks(__ATINIT__);\n    }\n\n    function postRun() {\n      if (Module['postRun']) {\n        if (typeof Module['postRun'] == 'function')\n          Module['postRun'] = [Module['postRun']];\n        while (Module['postRun'].length) {\n          addOnPostRun(Module['postRun'].shift());\n        }\n      }\n\n      callRuntimeCallbacks(__ATPOSTRUN__);\n    }\n\n    function addOnPreRun(cb) {\n      __ATPRERUN__.unshift(cb);\n    }\n\n    function addOnInit(cb) {\n      __ATINIT__.unshift(cb);\n    }\n\n    function addOnExit(cb) {}\n\n    function addOnPostRun(cb) {\n      __ATPOSTRUN__.unshift(cb);\n    }\n\n    var runDependencies = 0;\n    var runDependencyWatcher = null;\n    var dependenciesFulfilled = null;\n\n    function getUniqueRunDependency(id) {\n      return id;\n    }\n\n    function addRunDependency(id) {\n      runDependencies++;\n\n      if (Module['monitorRunDependencies']) {\n        Module['monitorRunDependencies'](runDependencies);\n      }\n    }\n\n    function removeRunDependency(id) {\n      runDependencies--;\n\n      if (Module['monitorRunDependencies']) {\n        Module['monitorRunDependencies'](runDependencies);\n      }\n\n      if (runDependencies == 0) {\n        if (runDependencyWatcher !== null) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n        }\n        if (dependenciesFulfilled) {\n          var callback = dependenciesFulfilled;\n          dependenciesFulfilled = null;\n          callback();\n        }\n      }\n    }\n\n    function abort(what) {\n      if (Module['onAbort']) {\n        Module['onAbort'](what);\n      }\n\n      what = 'Aborted(' + what + ')';\n\n      err(what);\n\n      ABORT = true;\n      EXITSTATUS = 1;\n\n      what += '. Build with -sASSERTIONS for more info.';\n\n      var e = new WebAssembly.RuntimeError(what);\n\n      readyPromiseReject(e);\n\n      throw e;\n    }\n\n    var dataURIPrefix = 'data:application/octet-stream;base64,';\n\n    function isDataURI(filename) {\n      return filename.startsWith(dataURIPrefix);\n    }\n\n    function isFileURI(filename) {\n      return filename.startsWith('file://');\n    }\n\n    var wasmBinaryFile;\n    if (Module['locateFile']) {\n      wasmBinaryFile = 'sqlite3.wasm';\n      if (!isDataURI(wasmBinaryFile)) {\n        wasmBinaryFile = locateFile(wasmBinaryFile);\n      }\n    } else {\n      wasmBinaryFile = new URL(/* asset import */ __webpack_require__(538), __webpack_require__.b).href;\n    }\n\n    function getBinary(file) {\n      try {\n        if (file == wasmBinaryFile && wasmBinary) {\n          return new Uint8Array(wasmBinary);\n        }\n        if (readBinary) {\n          return readBinary(file);\n        }\n        throw 'both async and sync fetching of the wasm failed';\n      } catch (err) {\n        abort(err);\n      }\n    }\n\n    function getBinaryPromise() {\n      if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n        if (typeof fetch == 'function') {\n          return fetch(wasmBinaryFile, { credentials: 'same-origin' })\n            .then(function (response) {\n              if (!response['ok']) {\n                throw (\n                  \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\"\n                );\n              }\n              return response['arrayBuffer']();\n            })\n            .catch(function () {\n              return getBinary(wasmBinaryFile);\n            });\n        }\n      }\n\n      return Promise.resolve().then(function () {\n        return getBinary(wasmBinaryFile);\n      });\n    }\n\n    function createWasm() {\n      var info = {\n        env: asmLibraryArg,\n        wasi_snapshot_preview1: asmLibraryArg,\n      };\n\n      function receiveInstance(instance, module) {\n        var exports = instance.exports;\n\n        Module['asm'] = exports;\n\n        wasmTable = Module['asm']['__indirect_function_table'];\n\n        addOnInit(Module['asm']['__wasm_call_ctors']);\n\n        removeRunDependency('wasm-instantiate');\n      }\n\n      addRunDependency('wasm-instantiate');\n\n      function receiveInstantiationResult(result) {\n        receiveInstance(result['instance']);\n      }\n\n      function instantiateArrayBuffer(receiver) {\n        return getBinaryPromise()\n          .then(function (binary) {\n            return WebAssembly.instantiate(binary, info);\n          })\n          .then(function (instance) {\n            return instance;\n          })\n          .then(receiver, function (reason) {\n            err('failed to asynchronously prepare wasm: ' + reason);\n\n            abort(reason);\n          });\n      }\n\n      function instantiateAsync() {\n        if (\n          !wasmBinary &&\n          typeof WebAssembly.instantiateStreaming == 'function' &&\n          !isDataURI(wasmBinaryFile) &&\n          typeof fetch == 'function'\n        ) {\n          return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(\n            function (response) {\n              var result = WebAssembly.instantiateStreaming(response, info);\n\n              return result.then(receiveInstantiationResult, function (reason) {\n                err('wasm streaming compile failed: ' + reason);\n                err('falling back to ArrayBuffer instantiation');\n                return instantiateArrayBuffer(receiveInstantiationResult);\n              });\n            },\n          );\n        } else {\n          return instantiateArrayBuffer(receiveInstantiationResult);\n        }\n      }\n\n      if (Module['instantiateWasm']) {\n        try {\n          var exports = Module['instantiateWasm'](info, receiveInstance);\n          return exports;\n        } catch (e) {\n          err('Module.instantiateWasm callback failed with error: ' + e);\n\n          readyPromiseReject(e);\n        }\n      }\n\n      instantiateAsync().catch(readyPromiseReject);\n      return {};\n    }\n\n    var tempDouble;\n    var tempI64;\n\n    var ASM_CONSTS = {};\n\n    function ExitStatus(status) {\n      this.name = 'ExitStatus';\n      this.message = 'Program terminated with exit(' + status + ')';\n      this.status = status;\n    }\n\n    function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        callbacks.shift()(Module);\n      }\n    }\n\n    function getValue(ptr, type = 'i8') {\n      if (type.endsWith('*')) type = '*';\n      switch (type) {\n        case 'i1':\n          return HEAP8[ptr >> 0];\n        case 'i8':\n          return HEAP8[ptr >> 0];\n        case 'i16':\n          return HEAP16[ptr >> 1];\n        case 'i32':\n          return HEAP32[ptr >> 2];\n        case 'i64':\n          return HEAP64[ptr >> 3];\n        case 'float':\n          return HEAPF32[ptr >> 2];\n        case 'double':\n          return HEAPF64[ptr >> 3];\n        case '*':\n          return HEAPU32[ptr >> 2];\n        default:\n          abort('invalid type for getValue: ' + type);\n      }\n      return null;\n    }\n\n    function setValue(ptr, value, type = 'i8') {\n      if (type.endsWith('*')) type = '*';\n      switch (type) {\n        case 'i1':\n          HEAP8[ptr >> 0] = value;\n          break;\n        case 'i8':\n          HEAP8[ptr >> 0] = value;\n          break;\n        case 'i16':\n          HEAP16[ptr >> 1] = value;\n          break;\n        case 'i32':\n          HEAP32[ptr >> 2] = value;\n          break;\n        case 'i64':\n          (tempI64 = [\n            value >>> 0,\n            ((tempDouble = value),\n            +Math.abs(tempDouble) >= 1.0\n              ? tempDouble > 0.0\n                ? (Math.min(\n                    +Math.floor(tempDouble / 4294967296.0),\n                    4294967295.0,\n                  ) |\n                    0) >>>\n                  0\n                : ~~+Math.ceil(\n                    (tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0,\n                  ) >>> 0\n              : 0),\n          ]),\n            (HEAP32[ptr >> 2] = tempI64[0]),\n            (HEAP32[(ptr + 4) >> 2] = tempI64[1]);\n          break;\n        case 'float':\n          HEAPF32[ptr >> 2] = value;\n          break;\n        case 'double':\n          HEAPF64[ptr >> 3] = value;\n          break;\n        case '*':\n          HEAPU32[ptr >> 2] = value;\n          break;\n        default:\n          abort('invalid type for setValue: ' + type);\n      }\n    }\n\n    var PATH = {\n      isAbs: (path) => path.charAt(0) === '/',\n      splitPath: (filename) => {\n        var splitPathRe =\n          /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },\n      normalizeArray: (parts, allowAboveRoot) => {\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === '.') {\n            parts.splice(i, 1);\n          } else if (last === '..') {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift('..');\n          }\n        }\n        return parts;\n      },\n      normalize: (path) => {\n        var isAbsolute = PATH.isAbs(path),\n          trailingSlash = path.substr(-1) === '/';\n\n        path = PATH.normalizeArray(\n          path.split('/').filter((p) => !!p),\n          !isAbsolute,\n        ).join('/');\n        if (!path && !isAbsolute) {\n          path = '.';\n        }\n        if (path && trailingSlash) {\n          path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n      },\n      dirname: (path) => {\n        var result = PATH.splitPath(path),\n          root = result[0],\n          dir = result[1];\n        if (!root && !dir) {\n          return '.';\n        }\n        if (dir) {\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },\n      basename: (path) => {\n        if (path === '/') return '/';\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, '');\n        var lastSlash = path.lastIndexOf('/');\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash + 1);\n      },\n      join: function () {\n        var paths = Array.prototype.slice.call(arguments);\n        return PATH.normalize(paths.join('/'));\n      },\n      join2: (l, r) => {\n        return PATH.normalize(l + '/' + r);\n      },\n    };\n\n    function getRandomDevice() {\n      if (\n        typeof crypto == 'object' &&\n        typeof crypto['getRandomValues'] == 'function'\n      ) {\n        var randomBuffer = new Uint8Array(1);\n        return () => {\n          crypto.getRandomValues(randomBuffer);\n          return randomBuffer[0];\n        };\n      } else return () => abort('randomDevice');\n    }\n\n    var PATH_FS = {\n      resolve: function () {\n        var resolvedPath = '',\n          resolvedAbsolute = false;\n        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = i >= 0 ? arguments[i] : FS.cwd();\n\n          if (typeof path != 'string') {\n            throw new TypeError('Arguments to path.resolve must be strings');\n          } else if (!path) {\n            return '';\n          }\n          resolvedPath = path + '/' + resolvedPath;\n          resolvedAbsolute = PATH.isAbs(path);\n        }\n\n        resolvedPath = PATH.normalizeArray(\n          resolvedPath.split('/').filter((p) => !!p),\n          !resolvedAbsolute,\n        ).join('/');\n        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n      },\n      relative: (from, to) => {\n        from = PATH_FS.resolve(from).substr(1);\n        to = PATH_FS.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== '') break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== '') break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split('/'));\n        var toParts = trim(to.split('/'));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n      },\n    };\n\n    function intArrayFromString(stringy, dontAddNull, length) {\n      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n      var u8array = new Array(len);\n      var numBytesWritten = stringToUTF8Array(\n        stringy,\n        u8array,\n        0,\n        u8array.length,\n      );\n      if (dontAddNull) u8array.length = numBytesWritten;\n      return u8array;\n    }\n    var TTY = {\n      ttys: [],\n      init: function () {},\n      shutdown: function () {},\n      register: function (dev, ops) {\n        TTY.ttys[dev] = { input: [], output: [], ops: ops };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },\n      stream_ops: {\n        open: function (stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(43);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },\n        close: function (stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n        fsync: function (stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n        read: function (stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(60);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(29);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(6);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset + i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },\n        write: function (stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(60);\n          }\n          try {\n            for (var i = 0; i < length; i++) {\n              stream.tty.ops.put_char(stream.tty, buffer[offset + i]);\n            }\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        },\n      },\n      default_tty_ops: {\n        get_char: function (tty) {\n          if (!tty.input.length) {\n            var result = null;\n            if (\n              typeof window != 'undefined' &&\n              typeof window.prompt == 'function'\n            ) {\n              result = window.prompt('Input: ');\n              if (result !== null) {\n                result += '\\n';\n              }\n            } else if (typeof readline == 'function') {\n              result = readline();\n              if (result !== null) {\n                result += '\\n';\n              }\n            }\n            if (!result) {\n              return null;\n            }\n            tty.input = intArrayFromString(result, true);\n          }\n          return tty.input.shift();\n        },\n        put_char: function (tty, val) {\n          if (val === null || val === 10) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n        fsync: function (tty) {\n          if (tty.output && tty.output.length > 0) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        },\n      },\n      default_tty1_ops: {\n        put_char: function (tty, val) {\n          if (val === null || val === 10) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n        fsync: function (tty) {\n          if (tty.output && tty.output.length > 0) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        },\n      },\n    };\n\n    function zeroMemory(address, size) {\n      HEAPU8.fill(0, address, address + size);\n      return address;\n    }\n\n    function alignMemory(size, alignment) {\n      return Math.ceil(size / alignment) * alignment;\n    }\n    function mmapAlloc(size) {\n      size = alignMemory(size, 65536);\n      var ptr = _emscripten_builtin_memalign(65536, size);\n      if (!ptr) return 0;\n      return zeroMemory(ptr, size);\n    }\n    var MEMFS = {\n      ops_table: null,\n      mount: function (mount) {\n        return MEMFS.createNode(null, '/', 16384 | 511, 0);\n      },\n      createNode: function (parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          throw new FS.ErrnoError(63);\n        }\n        if (!MEMFS.ops_table) {\n          MEMFS.ops_table = {\n            dir: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                lookup: MEMFS.node_ops.lookup,\n                mknod: MEMFS.node_ops.mknod,\n                rename: MEMFS.node_ops.rename,\n                unlink: MEMFS.node_ops.unlink,\n                rmdir: MEMFS.node_ops.rmdir,\n                readdir: MEMFS.node_ops.readdir,\n                symlink: MEMFS.node_ops.symlink,\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek,\n              },\n            },\n            file: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek,\n                read: MEMFS.stream_ops.read,\n                write: MEMFS.stream_ops.write,\n                allocate: MEMFS.stream_ops.allocate,\n                mmap: MEMFS.stream_ops.mmap,\n                msync: MEMFS.stream_ops.msync,\n              },\n            },\n            link: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                readlink: MEMFS.node_ops.readlink,\n              },\n              stream: {},\n            },\n            chrdev: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n              },\n              stream: FS.chrdev_stream_ops,\n            },\n          };\n        }\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.usedBytes = 0;\n\n          node.contents = null;\n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n\n        if (parent) {\n          parent.contents[name] = node;\n          parent.timestamp = node.timestamp;\n        }\n        return node;\n      },\n      getFileDataAsTypedArray: function (node) {\n        if (!node.contents) return new Uint8Array(0);\n        if (node.contents.subarray)\n          return node.contents.subarray(0, node.usedBytes);\n        return new Uint8Array(node.contents);\n      },\n      expandFileStorage: function (node, newCapacity) {\n        var prevCapacity = node.contents ? node.contents.length : 0;\n        if (prevCapacity >= newCapacity) return;\n\n        var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n        newCapacity = Math.max(\n          newCapacity,\n          (prevCapacity *\n            (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>>\n            0,\n        );\n        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);\n        var oldContents = node.contents;\n        node.contents = new Uint8Array(newCapacity);\n        if (node.usedBytes > 0)\n          node.contents.set(oldContents.subarray(0, node.usedBytes), 0);\n      },\n      resizeFileStorage: function (node, newSize) {\n        if (node.usedBytes == newSize) return;\n        if (newSize == 0) {\n          node.contents = null;\n          node.usedBytes = 0;\n        } else {\n          var oldContents = node.contents;\n          node.contents = new Uint8Array(newSize);\n          if (oldContents) {\n            node.contents.set(\n              oldContents.subarray(0, Math.min(newSize, node.usedBytes)),\n            );\n          }\n          node.usedBytes = newSize;\n        }\n      },\n      node_ops: {\n        getattr: function (node) {\n          var attr = {};\n\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.usedBytes;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },\n        setattr: function (node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.resizeFileStorage(node, attr.size);\n          }\n        },\n        lookup: function (parent, name) {\n          throw FS.genericErrors[44];\n        },\n        mknod: function (parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },\n        rename: function (old_node, new_dir, new_name) {\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {}\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(55);\n              }\n            }\n          }\n\n          delete old_node.parent.contents[old_node.name];\n          old_node.parent.timestamp = Date.now();\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          new_dir.timestamp = old_node.parent.timestamp;\n          old_node.parent = new_dir;\n        },\n        unlink: function (parent, name) {\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n        rmdir: function (parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n        readdir: function (node) {\n          var entries = ['.', '..'];\n          for (var key in node.contents) {\n            if (!node.contents.hasOwnProperty(key)) {\n              continue;\n            }\n            entries.push(key);\n          }\n          return entries;\n        },\n        symlink: function (parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },\n        readlink: function (node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(28);\n          }\n          return node.link;\n        },\n      },\n      stream_ops: {\n        read: function (stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= stream.node.usedBytes) return 0;\n          var size = Math.min(stream.node.usedBytes - position, length);\n          if (size > 8 && contents.subarray) {\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else {\n            for (var i = 0; i < size; i++)\n              buffer[offset + i] = contents[position + i];\n          }\n          return size;\n        },\n        write: function (stream, buffer, offset, length, position, canOwn) {\n          if (buffer.buffer === HEAP8.buffer) {\n            canOwn = false;\n          }\n\n          if (!length) return 0;\n          var node = stream.node;\n          node.timestamp = Date.now();\n\n          if (buffer.subarray && (!node.contents || node.contents.subarray)) {\n            if (canOwn) {\n              node.contents = buffer.subarray(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (node.usedBytes === 0 && position === 0) {\n              node.contents = buffer.slice(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (position + length <= node.usedBytes) {\n              node.contents.set(\n                buffer.subarray(offset, offset + length),\n                position,\n              );\n              return length;\n            }\n          }\n\n          MEMFS.expandFileStorage(node, position + length);\n          if (node.contents.subarray && buffer.subarray) {\n            node.contents.set(\n              buffer.subarray(offset, offset + length),\n              position,\n            );\n          } else {\n            for (var i = 0; i < length; i++) {\n              node.contents[position + i] = buffer[offset + i];\n            }\n          }\n          node.usedBytes = Math.max(node.usedBytes, position + length);\n          return length;\n        },\n        llseek: function (stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.usedBytes;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n          return position;\n        },\n        allocate: function (stream, offset, length) {\n          MEMFS.expandFileStorage(stream.node, offset + length);\n          stream.node.usedBytes = Math.max(\n            stream.node.usedBytes,\n            offset + length,\n          );\n        },\n        mmap: function (stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n\n          if (!(flags & 2) && contents.buffer === HEAP8.buffer) {\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            if (position > 0 || position + length < contents.length) {\n              if (contents.subarray) {\n                contents = contents.subarray(position, position + length);\n              } else {\n                contents = Array.prototype.slice.call(\n                  contents,\n                  position,\n                  position + length,\n                );\n              }\n            }\n            allocated = true;\n            ptr = mmapAlloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(48);\n            }\n            HEAP8.set(contents, ptr);\n          }\n          return { ptr: ptr, allocated: allocated };\n        },\n        msync: function (stream, buffer, offset, length, mmapFlags) {\n          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n\n          return 0;\n        },\n      },\n    };\n\n    function asyncLoad(url, onload, onerror, noRunDep) {\n      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';\n      readAsync(\n        url,\n        (arrayBuffer) => {\n          assert(\n            arrayBuffer,\n            'Loading data file \"' + url + '\" failed (no arrayBuffer).',\n          );\n          onload(new Uint8Array(arrayBuffer));\n          if (dep) removeRunDependency(dep);\n        },\n        (event) => {\n          if (onerror) {\n            onerror();\n          } else {\n            throw 'Loading data file \"' + url + '\" failed.';\n          }\n        },\n      );\n      if (dep) addRunDependency(dep);\n    }\n\n    var FS = {\n      root: null,\n      mounts: [],\n      devices: {},\n      streams: [],\n      nextInode: 1,\n      nameTable: null,\n      currentPath: '/',\n      initialized: false,\n      ignorePermissions: true,\n      ErrnoError: null,\n      genericErrors: {},\n      filesystems: null,\n      syncFSRequests: 0,\n      lookupPath: (path, opts = {}) => {\n        path = PATH_FS.resolve(path);\n\n        if (!path) return { path: '', node: null };\n\n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0,\n        };\n        opts = Object.assign(defaults, opts);\n\n        if (opts.recurse_count > 8) {\n          throw new FS.ErrnoError(32);\n        }\n\n        var parts = path.split('/').filter((p) => !!p);\n\n        var current = FS.root;\n        var current_path = '/';\n\n        for (var i = 0; i < parts.length; i++) {\n          var islast = i === parts.length - 1;\n          if (islast && opts.parent) {\n            break;\n          }\n\n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n\n          if (FS.isMountpoint(current)) {\n            if (!islast || (islast && opts.follow_mount)) {\n              current = current.mounted.root;\n            }\n          }\n\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n\n              var lookup = FS.lookupPath(current_path, {\n                recurse_count: opts.recurse_count + 1,\n              });\n              current = lookup.node;\n\n              if (count++ > 40) {\n                throw new FS.ErrnoError(32);\n              }\n            }\n          }\n        }\n\n        return { path: current_path, node: current };\n      },\n      getPath: (node) => {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length - 1] !== '/'\n              ? mount + '/' + path\n              : mount + path;\n          }\n          path = path ? node.name + '/' + path : node.name;\n          node = node.parent;\n        }\n      },\n      hashName: (parentid, name) => {\n        var hash = 0;\n\n        for (var i = 0; i < name.length; i++) {\n          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n        }\n        return ((parentid + hash) >>> 0) % FS.nameTable.length;\n      },\n      hashAddNode: (node) => {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },\n      hashRemoveNode: (node) => {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },\n      lookupNode: (parent, name) => {\n        var errCode = FS.mayLookup(parent);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode, parent);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n\n        return FS.lookup(parent, name);\n      },\n      createNode: (parent, name, mode, rdev) => {\n        var node = new FS.FSNode(parent, name, mode, rdev);\n\n        FS.hashAddNode(node);\n\n        return node;\n      },\n      destroyNode: (node) => {\n        FS.hashRemoveNode(node);\n      },\n      isRoot: (node) => {\n        return node === node.parent;\n      },\n      isMountpoint: (node) => {\n        return !!node.mounted;\n      },\n      isFile: (mode) => {\n        return (mode & 61440) === 32768;\n      },\n      isDir: (mode) => {\n        return (mode & 61440) === 16384;\n      },\n      isLink: (mode) => {\n        return (mode & 61440) === 40960;\n      },\n      isChrdev: (mode) => {\n        return (mode & 61440) === 8192;\n      },\n      isBlkdev: (mode) => {\n        return (mode & 61440) === 24576;\n      },\n      isFIFO: (mode) => {\n        return (mode & 61440) === 4096;\n      },\n      isSocket: (mode) => {\n        return (mode & 49152) === 49152;\n      },\n      flagModes: { r: 0, 'r+': 2, w: 577, 'w+': 578, a: 1089, 'a+': 1090 },\n      modeStringToFlags: (str) => {\n        var flags = FS.flagModes[str];\n        if (typeof flags == 'undefined') {\n          throw new Error('Unknown file open mode: ' + str);\n        }\n        return flags;\n      },\n      flagsToPermissionString: (flag) => {\n        var perms = ['r', 'w', 'rw'][flag & 3];\n        if (flag & 512) {\n          perms += 'w';\n        }\n        return perms;\n      },\n      nodePermissions: (node, perms) => {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n\n        if (perms.includes('r') && !(node.mode & 292)) {\n          return 2;\n        } else if (perms.includes('w') && !(node.mode & 146)) {\n          return 2;\n        } else if (perms.includes('x') && !(node.mode & 73)) {\n          return 2;\n        }\n        return 0;\n      },\n      mayLookup: (dir) => {\n        var errCode = FS.nodePermissions(dir, 'x');\n        if (errCode) return errCode;\n        if (!dir.node_ops.lookup) return 2;\n        return 0;\n      },\n      mayCreate: (dir, name) => {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return 20;\n        } catch (e) {}\n        return FS.nodePermissions(dir, 'wx');\n      },\n      mayDelete: (dir, name, isdir) => {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var errCode = FS.nodePermissions(dir, 'wx');\n        if (errCode) {\n          return errCode;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return 54;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return 10;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return 31;\n          }\n        }\n        return 0;\n      },\n      mayOpen: (node, flags) => {\n        if (!node) {\n          return 44;\n        }\n        if (FS.isLink(node.mode)) {\n          return 32;\n        } else if (FS.isDir(node.mode)) {\n          if (FS.flagsToPermissionString(flags) !== 'r' || flags & 512) {\n            return 31;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },\n      MAX_OPEN_FDS: 4096,\n      nextfd: (fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {\n        for (var fd = fd_start; fd <= fd_end; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(33);\n      },\n      getStream: (fd) => FS.streams[fd],\n      createStream: (stream, fd_start, fd_end) => {\n        if (!FS.FSStream) {\n          FS.FSStream = function () {\n            this.shared = {};\n          };\n          FS.FSStream.prototype = {};\n          Object.defineProperties(FS.FSStream.prototype, {\n            object: {\n              get: function () {\n                return this.node;\n              },\n\n              set: function (val) {\n                this.node = val;\n              },\n            },\n            isRead: {\n              get: function () {\n                return (this.flags & 2097155) !== 1;\n              },\n            },\n            isWrite: {\n              get: function () {\n                return (this.flags & 2097155) !== 0;\n              },\n            },\n            isAppend: {\n              get: function () {\n                return this.flags & 1024;\n              },\n            },\n            flags: {\n              get: function () {\n                return this.shared.flags;\n              },\n\n              set: function (val) {\n                this.shared.flags = val;\n              },\n            },\n            position: {\n              get: function () {\n                return this.shared.position;\n              },\n\n              set: function (val) {\n                this.shared.position = val;\n              },\n            },\n          });\n        }\n\n        stream = Object.assign(new FS.FSStream(), stream);\n        var fd = FS.nextfd(fd_start, fd_end);\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },\n      closeStream: (fd) => {\n        FS.streams[fd] = null;\n      },\n      chrdev_stream_ops: {\n        open: (stream) => {\n          var device = FS.getDevice(stream.node.rdev);\n\n          stream.stream_ops = device.stream_ops;\n\n          if (stream.stream_ops.open) {\n            stream.stream_ops.open(stream);\n          }\n        },\n        llseek: () => {\n          throw new FS.ErrnoError(70);\n        },\n      },\n      major: (dev) => dev >> 8,\n      minor: (dev) => dev & 0xff,\n      makedev: (ma, mi) => (ma << 8) | mi,\n      registerDevice: (dev, ops) => {\n        FS.devices[dev] = { stream_ops: ops };\n      },\n      getDevice: (dev) => FS.devices[dev],\n      getMounts: (mount) => {\n        var mounts = [];\n        var check = [mount];\n\n        while (check.length) {\n          var m = check.pop();\n\n          mounts.push(m);\n\n          check.push.apply(check, m.mounts);\n        }\n\n        return mounts;\n      },\n      syncfs: (populate, callback) => {\n        if (typeof populate == 'function') {\n          callback = populate;\n          populate = false;\n        }\n\n        FS.syncFSRequests++;\n\n        if (FS.syncFSRequests > 1) {\n          err(\n            'warning: ' +\n              FS.syncFSRequests +\n              ' FS.syncfs operations in flight at once, probably just doing extra work',\n          );\n        }\n\n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n\n        function doCallback(errCode) {\n          FS.syncFSRequests--;\n          return callback(errCode);\n        }\n\n        function done(errCode) {\n          if (errCode) {\n            if (!done.errored) {\n              done.errored = true;\n              return doCallback(errCode);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            doCallback(null);\n          }\n        }\n\n        mounts.forEach((mount) => {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },\n      mount: (type, opts, mountpoint) => {\n        var root = mountpoint === '/';\n        var pseudo = !mountpoint;\n        var node;\n\n        if (root && FS.root) {\n          throw new FS.ErrnoError(10);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n\n          mountpoint = lookup.path;\n          node = lookup.node;\n\n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(10);\n          }\n\n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(54);\n          }\n        }\n\n        var mount = {\n          type: type,\n          opts: opts,\n          mountpoint: mountpoint,\n          mounts: [],\n        };\n\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n\n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          node.mounted = mount;\n\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n\n        return mountRoot;\n      },\n      unmount: (mountpoint) => {\n        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n\n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(28);\n        }\n\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n\n        Object.keys(FS.nameTable).forEach((hash) => {\n          var current = FS.nameTable[hash];\n\n          while (current) {\n            var next = current.name_next;\n\n            if (mounts.includes(current.mount)) {\n              FS.destroyNode(current);\n            }\n\n            current = next;\n          }\n        });\n\n        node.mounted = null;\n\n        var idx = node.mount.mounts.indexOf(mount);\n        node.mount.mounts.splice(idx, 1);\n      },\n      lookup: (parent, name) => {\n        return parent.node_ops.lookup(parent, name);\n      },\n      mknod: (path, mode, dev) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        if (!name || name === '.' || name === '..') {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.mayCreate(parent, name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },\n      create: (path, mode) => {\n        mode = mode !== undefined ? mode : 438;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },\n      mkdir: (path, mode) => {\n        mode = mode !== undefined ? mode : 511;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },\n      mkdirTree: (path, mode) => {\n        var dirs = path.split('/');\n        var d = '';\n        for (var i = 0; i < dirs.length; ++i) {\n          if (!dirs[i]) continue;\n          d += '/' + dirs[i];\n          try {\n            FS.mkdir(d, mode);\n          } catch (e) {\n            if (e.errno != 20) throw e;\n          }\n        }\n      },\n      mkdev: (path, mode, dev) => {\n        if (typeof dev == 'undefined') {\n          dev = mode;\n          mode = 438;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },\n      symlink: (oldpath, newpath) => {\n        if (!PATH_FS.resolve(oldpath)) {\n          throw new FS.ErrnoError(44);\n        }\n        var lookup = FS.lookupPath(newpath, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var newname = PATH.basename(newpath);\n        var errCode = FS.mayCreate(parent, newname);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },\n      rename: (old_path, new_path) => {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n\n        var lookup, old_dir, new_dir;\n\n        lookup = FS.lookupPath(old_path, { parent: true });\n        old_dir = lookup.node;\n        lookup = FS.lookupPath(new_path, { parent: true });\n        new_dir = lookup.node;\n\n        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(75);\n        }\n\n        var old_node = FS.lookupNode(old_dir, old_name);\n\n        var relative = PATH_FS.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(28);\n        }\n\n        relative = PATH_FS.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(55);\n        }\n\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {}\n\n        if (old_node === new_node) {\n          return;\n        }\n\n        var isdir = FS.isDir(old_node.mode);\n        var errCode = FS.mayDelete(old_dir, old_name, isdir);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n\n        errCode = new_node\n          ? FS.mayDelete(new_dir, new_name, isdir)\n          : FS.mayCreate(new_dir, new_name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(63);\n        }\n        if (\n          FS.isMountpoint(old_node) ||\n          (new_node && FS.isMountpoint(new_node))\n        ) {\n          throw new FS.ErrnoError(10);\n        }\n\n        if (new_dir !== old_dir) {\n          errCode = FS.nodePermissions(old_dir, 'w');\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n\n        FS.hashRemoveNode(old_node);\n\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.hashAddNode(old_node);\n        }\n      },\n      rmdir: (path) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, true);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },\n      readdir: (path) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(54);\n        }\n        return node.node_ops.readdir(node);\n      },\n      unlink: (path) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, false);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },\n      readlink: (path) => {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(28);\n        }\n        return PATH_FS.resolve(\n          FS.getPath(link.parent),\n          link.node_ops.readlink(link),\n        );\n      },\n      stat: (path, dontFollow) => {\n        var lookup = FS.lookupPath(path, { follow: !dontFollow });\n        var node = lookup.node;\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(63);\n        }\n        return node.node_ops.getattr(node);\n      },\n      lstat: (path) => {\n        return FS.stat(path, true);\n      },\n      chmod: (path, mode, dontFollow) => {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          mode: (mode & 4095) | (node.mode & ~4095),\n          timestamp: Date.now(),\n        });\n      },\n      lchmod: (path, mode) => {\n        FS.chmod(path, mode, true);\n      },\n      fchmod: (fd, mode) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        FS.chmod(stream.node, mode);\n      },\n      chown: (path, uid, gid, dontFollow) => {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now(),\n        });\n      },\n      lchown: (path, uid, gid) => {\n        FS.chown(path, uid, gid, true);\n      },\n      fchown: (fd, uid, gid) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        FS.chown(stream.node, uid, gid);\n      },\n      truncate: (path, len) => {\n        if (len < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: true });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.nodePermissions(node, 'w');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now(),\n        });\n      },\n      ftruncate: (fd, len) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(28);\n        }\n        FS.truncate(stream.node, len);\n      },\n      utime: (path, atime, mtime) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime),\n        });\n      },\n      open: (path, flags, mode) => {\n        if (path === '') {\n          throw new FS.ErrnoError(44);\n        }\n        flags = typeof flags == 'string' ? FS.modeStringToFlags(flags) : flags;\n        mode = typeof mode == 'undefined' ? 438 : mode;\n        if (flags & 64) {\n          mode = (mode & 4095) | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (typeof path == 'object') {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072),\n            });\n            node = lookup.node;\n          } catch (e) {}\n        }\n\n        var created = false;\n        if (flags & 64) {\n          if (node) {\n            if (flags & 128) {\n              throw new FS.ErrnoError(20);\n            }\n          } else {\n            node = FS.mknod(path, mode, 0);\n            created = true;\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n\n        if (flags & 65536 && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n\n        if (!created) {\n          var errCode = FS.mayOpen(node, flags);\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n\n        if (flags & 512 && !created) {\n          FS.truncate(node, 0);\n        }\n\n        flags &= ~(128 | 512 | 131072);\n\n        var stream = FS.createStream({\n          node: node,\n          path: FS.getPath(node),\n          flags: flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n\n          ungotten: [],\n          error: false,\n        });\n\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module['logReadFiles'] && !(flags & 1)) {\n          if (!FS.readFiles) FS.readFiles = {};\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n          }\n        }\n        return stream;\n      },\n      close: (stream) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (stream.getdents) stream.getdents = null;\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n        stream.fd = null;\n      },\n      isClosed: (stream) => {\n        return stream.fd === null;\n      },\n      llseek: (stream, offset, whence) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(70);\n        }\n        if (whence != 0 && whence != 1 && whence != 2) {\n          throw new FS.ErrnoError(28);\n        }\n        stream.position = stream.stream_ops.llseek(stream, offset, whence);\n        stream.ungotten = [];\n        return stream.position;\n      },\n      read: (stream, buffer, offset, length, position) => {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(28);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesRead = stream.stream_ops.read(\n          stream,\n          buffer,\n          offset,\n          length,\n          position,\n        );\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },\n      write: (stream, buffer, offset, length, position, canOwn) => {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(28);\n        }\n        if (stream.seekable && stream.flags & 1024) {\n          FS.llseek(stream, 0, 2);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesWritten = stream.stream_ops.write(\n          stream,\n          buffer,\n          offset,\n          length,\n          position,\n          canOwn,\n        );\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },\n      allocate: (stream, offset, length) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(138);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },\n      mmap: (stream, length, position, prot, flags) => {\n        if (\n          (prot & 2) !== 0 &&\n          (flags & 2) === 0 &&\n          (stream.flags & 2097155) !== 2\n        ) {\n          throw new FS.ErrnoError(2);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(2);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(43);\n        }\n        return stream.stream_ops.mmap(stream, length, position, prot, flags);\n      },\n      msync: (stream, buffer, offset, length, mmapFlags) => {\n        if (!stream.stream_ops.msync) {\n          return 0;\n        }\n        return stream.stream_ops.msync(\n          stream,\n          buffer,\n          offset,\n          length,\n          mmapFlags,\n        );\n      },\n      munmap: (stream) => 0,\n      ioctl: (stream, cmd, arg) => {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(59);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },\n      readFile: (path, opts = {}) => {\n        opts.flags = opts.flags || 0;\n        opts.encoding = opts.encoding || 'binary';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error('Invalid encoding type \"' + opts.encoding + '\"');\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === 'utf8') {\n          ret = UTF8ArrayToString(buf, 0);\n        } else if (opts.encoding === 'binary') {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },\n      writeFile: (path, data, opts = {}) => {\n        opts.flags = opts.flags || 577;\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (typeof data == 'string') {\n          var buf = new Uint8Array(lengthBytesUTF8(data) + 1);\n          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n        } else if (ArrayBuffer.isView(data)) {\n          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n        } else {\n          throw new Error('Unsupported data type');\n        }\n        FS.close(stream);\n      },\n      cwd: () => FS.currentPath,\n      chdir: (path) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        if (lookup.node === null) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        var errCode = FS.nodePermissions(lookup.node, 'x');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        FS.currentPath = lookup.path;\n      },\n      createDefaultDirectories: () => {\n        FS.mkdir('/tmp');\n        FS.mkdir('/home');\n        FS.mkdir('/home/web_user');\n      },\n      createDefaultDevices: () => {\n        FS.mkdir('/dev');\n\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: () => 0,\n          write: (stream, buffer, offset, length, pos) => length,\n        });\n        FS.mkdev('/dev/null', FS.makedev(1, 3));\n\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev('/dev/tty', FS.makedev(5, 0));\n        FS.mkdev('/dev/tty1', FS.makedev(6, 0));\n\n        var random_device = getRandomDevice();\n        FS.createDevice('/dev', 'random', random_device);\n        FS.createDevice('/dev', 'urandom', random_device);\n\n        FS.mkdir('/dev/shm');\n        FS.mkdir('/dev/shm/tmp');\n      },\n      createSpecialDirectories: () => {\n        FS.mkdir('/proc');\n        var proc_self = FS.mkdir('/proc/self');\n        FS.mkdir('/proc/self/fd');\n        FS.mount(\n          {\n            mount: () => {\n              var node = FS.createNode(proc_self, 'fd', 16384 | 511, 73);\n              node.node_ops = {\n                lookup: (parent, name) => {\n                  var fd = +name;\n                  var stream = FS.getStream(fd);\n                  if (!stream) throw new FS.ErrnoError(8);\n                  var ret = {\n                    parent: null,\n                    mount: { mountpoint: 'fake' },\n                    node_ops: { readlink: () => stream.path },\n                  };\n                  ret.parent = ret;\n                  return ret;\n                },\n              };\n              return node;\n            },\n          },\n          {},\n          '/proc/self/fd',\n        );\n      },\n      createStandardStreams: () => {\n        if (Module['stdin']) {\n          FS.createDevice('/dev', 'stdin', Module['stdin']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdin');\n        }\n        if (Module['stdout']) {\n          FS.createDevice('/dev', 'stdout', null, Module['stdout']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdout');\n        }\n        if (Module['stderr']) {\n          FS.createDevice('/dev', 'stderr', null, Module['stderr']);\n        } else {\n          FS.symlink('/dev/tty1', '/dev/stderr');\n        }\n\n        var stdin = FS.open('/dev/stdin', 0);\n        var stdout = FS.open('/dev/stdout', 1);\n        var stderr = FS.open('/dev/stderr', 1);\n      },\n      ensureErrnoError: () => {\n        if (FS.ErrnoError) return;\n        FS.ErrnoError = function ErrnoError(errno, node) {\n          this.node = node;\n          this.setErrno = function (errno) {\n            this.errno = errno;\n          };\n          this.setErrno(errno);\n          this.message = 'FS error';\n        };\n        FS.ErrnoError.prototype = new Error();\n        FS.ErrnoError.prototype.constructor = FS.ErrnoError;\n\n        [44].forEach((code) => {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = '<generic error, no stack>';\n        });\n      },\n      staticInit: () => {\n        FS.ensureErrnoError();\n\n        FS.nameTable = new Array(4096);\n\n        FS.mount(MEMFS, {}, '/');\n\n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n        FS.createSpecialDirectories();\n\n        FS.filesystems = {\n          MEMFS: MEMFS,\n        };\n      },\n      init: (input, output, error) => {\n        FS.init.initialized = true;\n\n        FS.ensureErrnoError();\n\n        Module['stdin'] = input || Module['stdin'];\n        Module['stdout'] = output || Module['stdout'];\n        Module['stderr'] = error || Module['stderr'];\n\n        FS.createStandardStreams();\n      },\n      quit: () => {\n        FS.init.initialized = false;\n\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },\n      getMode: (canRead, canWrite) => {\n        var mode = 0;\n        if (canRead) mode |= 292 | 73;\n        if (canWrite) mode |= 146;\n        return mode;\n      },\n      findObject: (path, dontResolveLastLink) => {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (!ret.exists) {\n          return null;\n        }\n        return ret.object;\n      },\n      analyzePath: (path, dontResolveLastLink) => {\n        try {\n          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          path = lookup.path;\n        } catch (e) {}\n        var ret = {\n          isRoot: false,\n          exists: false,\n          error: 0,\n          name: null,\n          path: null,\n          object: null,\n          parentExists: false,\n          parentPath: null,\n          parentObject: null,\n        };\n        try {\n          var lookup = FS.lookupPath(path, { parent: true });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === '/';\n        } catch (e) {\n          ret.error = e.errno;\n        }\n        return ret;\n      },\n      createPath: (parent, path, canRead, canWrite) => {\n        parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n        var parts = path.split('/').reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {}\n          parent = current;\n        }\n        return current;\n      },\n      createFile: (parent, name, properties, canRead, canWrite) => {\n        var path = PATH.join2(\n          typeof parent == 'string' ? parent : FS.getPath(parent),\n          name,\n        );\n        var mode = FS.getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },\n      createDataFile: (parent, name, data, canRead, canWrite, canOwn) => {\n        var path = name;\n        if (parent) {\n          parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n          path = name ? PATH.join2(parent, name) : parent;\n        }\n        var mode = FS.getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data == 'string') {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i)\n              arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 577);\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n        return node;\n      },\n      createDevice: (parent, name, input, output) => {\n        var path = PATH.join2(\n          typeof parent == 'string' ? parent : FS.getPath(parent),\n          name,\n        );\n        var mode = FS.getMode(!!input, !!output);\n        if (!FS.createDevice.major) FS.createDevice.major = 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n\n        FS.registerDevice(dev, {\n          open: (stream) => {\n            stream.seekable = false;\n          },\n          close: (stream) => {\n            if (output && output.buffer && output.buffer.length) {\n              output(10);\n            }\n          },\n          read: (stream, buffer, offset, length, pos) => {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(6);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset + i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write: (stream, buffer, offset, length, pos) => {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset + i]);\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          },\n        });\n        return FS.mkdev(path, mode, dev);\n      },\n      forceLoadFile: (obj) => {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents)\n          return true;\n        if (typeof XMLHttpRequest != 'undefined') {\n          throw new Error(\n            'Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.',\n          );\n        } else if (read_) {\n          try {\n            obj.contents = intArrayFromString(read_(obj.url), true);\n            obj.usedBytes = obj.contents.length;\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        } else {\n          throw new Error('Cannot load without read() or XMLHttpRequest.');\n        }\n      },\n      createLazyFile: (parent, name, url, canRead, canWrite) => {\n        function LazyUint8Array() {\n          this.lengthKnown = false;\n          this.chunks = [];\n        }\n        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {\n          if (idx > this.length - 1 || idx < 0) {\n            return undefined;\n          }\n          var chunkOffset = idx % this.chunkSize;\n          var chunkNum = (idx / this.chunkSize) | 0;\n          return this.getter(chunkNum)[chunkOffset];\n        };\n        LazyUint8Array.prototype.setDataGetter =\n          function LazyUint8Array_setDataGetter(getter) {\n            this.getter = getter;\n          };\n        LazyUint8Array.prototype.cacheLength =\n          function LazyUint8Array_cacheLength() {\n            var xhr = new XMLHttpRequest();\n            xhr.open('HEAD', url, false);\n            xhr.send(null);\n            if (\n              !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)\n            )\n              throw new Error(\n                \"Couldn't load \" + url + '. Status: ' + xhr.status,\n              );\n            var datalength = Number(xhr.getResponseHeader('Content-length'));\n            var header;\n            var hasByteServing =\n              (header = xhr.getResponseHeader('Accept-Ranges')) &&\n              header === 'bytes';\n            var usesGzip =\n              (header = xhr.getResponseHeader('Content-Encoding')) &&\n              header === 'gzip';\n\n            var chunkSize = 1024 * 1024;\n\n            if (!hasByteServing) chunkSize = datalength;\n\n            var doXHR = (from, to) => {\n              if (from > to)\n                throw new Error(\n                  'invalid range (' +\n                    from +\n                    ', ' +\n                    to +\n                    ') or no bytes requested!',\n                );\n              if (to > datalength - 1)\n                throw new Error(\n                  'only ' + datalength + ' bytes available! programmer error!',\n                );\n\n              var xhr = new XMLHttpRequest();\n              xhr.open('GET', url, false);\n              if (datalength !== chunkSize)\n                xhr.setRequestHeader('Range', 'bytes=' + from + '-' + to);\n\n              xhr.responseType = 'arraybuffer';\n              if (xhr.overrideMimeType) {\n                xhr.overrideMimeType('text/plain; charset=x-user-defined');\n              }\n\n              xhr.send(null);\n              if (\n                !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)\n              )\n                throw new Error(\n                  \"Couldn't load \" + url + '. Status: ' + xhr.status,\n                );\n              if (xhr.response !== undefined) {\n                return new Uint8Array(xhr.response || []);\n              }\n              return intArrayFromString(xhr.responseText || '', true);\n            };\n            var lazyArray = this;\n            lazyArray.setDataGetter((chunkNum) => {\n              var start = chunkNum * chunkSize;\n              var end = (chunkNum + 1) * chunkSize - 1;\n              end = Math.min(end, datalength - 1);\n              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {\n                lazyArray.chunks[chunkNum] = doXHR(start, end);\n              }\n              if (typeof lazyArray.chunks[chunkNum] == 'undefined')\n                throw new Error('doXHR failed!');\n              return lazyArray.chunks[chunkNum];\n            });\n\n            if (usesGzip || !datalength) {\n              chunkSize = datalength = 1;\n              datalength = this.getter(0).length;\n              chunkSize = datalength;\n              out(\n                'LazyFiles on gzip forces download of the whole file when length is accessed',\n              );\n            }\n\n            this._length = datalength;\n            this._chunkSize = chunkSize;\n            this.lengthKnown = true;\n          };\n        if (typeof XMLHttpRequest != 'undefined') {\n          if (!ENVIRONMENT_IS_WORKER)\n            throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';\n          var lazyArray = new LazyUint8Array();\n          Object.defineProperties(lazyArray, {\n            length: {\n              get: function () {\n                if (!this.lengthKnown) {\n                  this.cacheLength();\n                }\n                return this._length;\n              },\n            },\n            chunkSize: {\n              get: function () {\n                if (!this.lengthKnown) {\n                  this.cacheLength();\n                }\n                return this._chunkSize;\n              },\n            },\n          });\n\n          var properties = { isDevice: false, contents: lazyArray };\n        } else {\n          var properties = { isDevice: false, url: url };\n        }\n\n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n\n        Object.defineProperties(node, {\n          usedBytes: {\n            get: function () {\n              return this.contents.length;\n            },\n          },\n        });\n\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach((key) => {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = function forceLoadLazyFile() {\n            FS.forceLoadFile(node);\n            return fn.apply(null, arguments);\n          };\n        });\n        function writeChunks(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length) return 0;\n          var size = Math.min(contents.length - position, length);\n          if (contents.slice) {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        }\n\n        stream_ops.read = (stream, buffer, offset, length, position) => {\n          FS.forceLoadFile(node);\n          return writeChunks(stream, buffer, offset, length, position);\n        };\n\n        stream_ops.mmap = (stream, length, position, prot, flags) => {\n          FS.forceLoadFile(node);\n          var ptr = mmapAlloc(length);\n          if (!ptr) {\n            throw new FS.ErrnoError(48);\n          }\n          writeChunks(stream, HEAP8, ptr, length, position);\n          return { ptr: ptr, allocated: true };\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },\n      createPreloadedFile: (\n        parent,\n        name,\n        url,\n        canRead,\n        canWrite,\n        onload,\n        onerror,\n        dontCreateFile,\n        canOwn,\n        preFinish,\n      ) => {\n        var fullname = name\n          ? PATH_FS.resolve(PATH.join2(parent, name))\n          : parent;\n        var dep = getUniqueRunDependency('cp ' + fullname);\n        function processData(byteArray) {\n          function finish(byteArray) {\n            if (preFinish) preFinish();\n            if (!dontCreateFile) {\n              FS.createDataFile(\n                parent,\n                name,\n                byteArray,\n                canRead,\n                canWrite,\n                canOwn,\n              );\n            }\n            if (onload) onload();\n            removeRunDependency(dep);\n          }\n          if (\n            Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {\n              if (onerror) onerror();\n              removeRunDependency(dep);\n            })\n          ) {\n            return;\n          }\n          finish(byteArray);\n        }\n        addRunDependency(dep);\n        if (typeof url == 'string') {\n          asyncLoad(url, (byteArray) => processData(byteArray), onerror);\n        } else {\n          processData(url);\n        }\n      },\n      indexedDB: () => {\n        return (\n          window.indexedDB ||\n          window.mozIndexedDB ||\n          window.webkitIndexedDB ||\n          window.msIndexedDB\n        );\n      },\n      DB_NAME: () => {\n        return 'EM_FS_' + window.location.pathname;\n      },\n      DB_VERSION: 20,\n      DB_STORE_NAME: 'FILE_DATA',\n      saveFilesToDB: (paths, onload, onerror) => {\n        onload = onload || (() => {});\n        onerror = onerror || (() => {});\n        var indexedDB = FS.indexedDB();\n        try {\n          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n        } catch (e) {\n          return onerror(e);\n        }\n        openRequest.onupgradeneeded = () => {\n          out('creating db');\n          var db = openRequest.result;\n          db.createObjectStore(FS.DB_STORE_NAME);\n        };\n        openRequest.onsuccess = () => {\n          var db = openRequest.result;\n          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');\n          var files = transaction.objectStore(FS.DB_STORE_NAME);\n          var ok = 0,\n            fail = 0,\n            total = paths.length;\n          function finish() {\n            if (fail == 0) onload();\n            else onerror();\n          }\n          paths.forEach((path) => {\n            var putRequest = files.put(\n              FS.analyzePath(path).object.contents,\n              path,\n            );\n            putRequest.onsuccess = () => {\n              ok++;\n              if (ok + fail == total) finish();\n            };\n            putRequest.onerror = () => {\n              fail++;\n              if (ok + fail == total) finish();\n            };\n          });\n          transaction.onerror = onerror;\n        };\n        openRequest.onerror = onerror;\n      },\n      loadFilesFromDB: (paths, onload, onerror) => {\n        onload = onload || (() => {});\n        onerror = onerror || (() => {});\n        var indexedDB = FS.indexedDB();\n        try {\n          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n        } catch (e) {\n          return onerror(e);\n        }\n        openRequest.onupgradeneeded = onerror;\n        openRequest.onsuccess = () => {\n          var db = openRequest.result;\n          try {\n            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');\n          } catch (e) {\n            onerror(e);\n            return;\n          }\n          var files = transaction.objectStore(FS.DB_STORE_NAME);\n          var ok = 0,\n            fail = 0,\n            total = paths.length;\n          function finish() {\n            if (fail == 0) onload();\n            else onerror();\n          }\n          paths.forEach((path) => {\n            var getRequest = files.get(path);\n            getRequest.onsuccess = () => {\n              if (FS.analyzePath(path).exists) {\n                FS.unlink(path);\n              }\n              FS.createDataFile(\n                PATH.dirname(path),\n                PATH.basename(path),\n                getRequest.result,\n                true,\n                true,\n                true,\n              );\n              ok++;\n              if (ok + fail == total) finish();\n            };\n            getRequest.onerror = () => {\n              fail++;\n              if (ok + fail == total) finish();\n            };\n          });\n          transaction.onerror = onerror;\n        };\n        openRequest.onerror = onerror;\n      },\n    };\n    var SYSCALLS = {\n      DEFAULT_POLLMASK: 5,\n      calculateAt: function (dirfd, path, allowEmpty) {\n        if (PATH.isAbs(path)) {\n          return path;\n        }\n\n        var dir;\n        if (dirfd === -100) {\n          dir = FS.cwd();\n        } else {\n          var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n          dir = dirstream.path;\n        }\n        if (path.length == 0) {\n          if (!allowEmpty) {\n            throw new FS.ErrnoError(44);\n          }\n          return dir;\n        }\n        return PATH.join2(dir, path);\n      },\n      doStat: function (func, path, buf) {\n        try {\n          var stat = func(path);\n        } catch (e) {\n          if (\n            e &&\n            e.node &&\n            PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))\n          ) {\n            return -54;\n          }\n          throw e;\n        }\n        HEAP32[buf >> 2] = stat.dev;\n        HEAP32[(buf + 8) >> 2] = stat.ino;\n        HEAP32[(buf + 12) >> 2] = stat.mode;\n        HEAPU32[(buf + 16) >> 2] = stat.nlink;\n        HEAP32[(buf + 20) >> 2] = stat.uid;\n        HEAP32[(buf + 24) >> 2] = stat.gid;\n        HEAP32[(buf + 28) >> 2] = stat.rdev;\n        (tempI64 = [\n          stat.size >>> 0,\n          ((tempDouble = stat.size),\n          +Math.abs(tempDouble) >= 1.0\n            ? tempDouble > 0.0\n              ? (Math.min(\n                  +Math.floor(tempDouble / 4294967296.0),\n                  4294967295.0,\n                ) |\n                  0) >>>\n                0\n              : ~~+Math.ceil(\n                  (tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0,\n                ) >>> 0\n            : 0),\n        ]),\n          (HEAP32[(buf + 40) >> 2] = tempI64[0]),\n          (HEAP32[(buf + 44) >> 2] = tempI64[1]);\n        HEAP32[(buf + 48) >> 2] = 4096;\n        HEAP32[(buf + 52) >> 2] = stat.blocks;\n        var atime = stat.atime.getTime();\n        var mtime = stat.mtime.getTime();\n        var ctime = stat.ctime.getTime();\n        (tempI64 = [\n          Math.floor(atime / 1000) >>> 0,\n          ((tempDouble = Math.floor(atime / 1000)),\n          +Math.abs(tempDouble) >= 1.0\n            ? tempDouble > 0.0\n              ? (Math.min(\n                  +Math.floor(tempDouble / 4294967296.0),\n                  4294967295.0,\n                ) |\n                  0) >>>\n                0\n              : ~~+Math.ceil(\n                  (tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0,\n                ) >>> 0\n            : 0),\n        ]),\n          (HEAP32[(buf + 56) >> 2] = tempI64[0]),\n          (HEAP32[(buf + 60) >> 2] = tempI64[1]);\n        HEAPU32[(buf + 64) >> 2] = (atime % 1000) * 1000;\n        (tempI64 = [\n          Math.floor(mtime / 1000) >>> 0,\n          ((tempDouble = Math.floor(mtime / 1000)),\n          +Math.abs(tempDouble) >= 1.0\n            ? tempDouble > 0.0\n              ? (Math.min(\n                  +Math.floor(tempDouble / 4294967296.0),\n                  4294967295.0,\n                ) |\n                  0) >>>\n                0\n              : ~~+Math.ceil(\n                  (tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0,\n                ) >>> 0\n            : 0),\n        ]),\n          (HEAP32[(buf + 72) >> 2] = tempI64[0]),\n          (HEAP32[(buf + 76) >> 2] = tempI64[1]);\n        HEAPU32[(buf + 80) >> 2] = (mtime % 1000) * 1000;\n        (tempI64 = [\n          Math.floor(ctime / 1000) >>> 0,\n          ((tempDouble = Math.floor(ctime / 1000)),\n          +Math.abs(tempDouble) >= 1.0\n            ? tempDouble > 0.0\n              ? (Math.min(\n                  +Math.floor(tempDouble / 4294967296.0),\n                  4294967295.0,\n                ) |\n                  0) >>>\n                0\n              : ~~+Math.ceil(\n                  (tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0,\n                ) >>> 0\n            : 0),\n        ]),\n          (HEAP32[(buf + 88) >> 2] = tempI64[0]),\n          (HEAP32[(buf + 92) >> 2] = tempI64[1]);\n        HEAPU32[(buf + 96) >> 2] = (ctime % 1000) * 1000;\n        (tempI64 = [\n          stat.ino >>> 0,\n          ((tempDouble = stat.ino),\n          +Math.abs(tempDouble) >= 1.0\n            ? tempDouble > 0.0\n              ? (Math.min(\n                  +Math.floor(tempDouble / 4294967296.0),\n                  4294967295.0,\n                ) |\n                  0) >>>\n                0\n              : ~~+Math.ceil(\n                  (tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0,\n                ) >>> 0\n            : 0),\n        ]),\n          (HEAP32[(buf + 104) >> 2] = tempI64[0]),\n          (HEAP32[(buf + 108) >> 2] = tempI64[1]);\n        return 0;\n      },\n      doMsync: function (addr, stream, len, flags, offset) {\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (flags & 2) {\n          return 0;\n        }\n        var buffer = HEAPU8.slice(addr, addr + len);\n        FS.msync(stream, buffer, offset, len, flags);\n      },\n      varargs: undefined,\n      get: function () {\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[(SYSCALLS.varargs - 4) >> 2];\n        return ret;\n      },\n      getStr: function (ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },\n      getStreamFromFD: function (fd) {\n        var stream = FS.getStream(fd);\n        if (!stream) throw new FS.ErrnoError(8);\n        return stream;\n      },\n    };\n    function ___syscall_chmod(path, mode) {\n      try {\n        path = SYSCALLS.getStr(path);\n        FS.chmod(path, mode);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_faccessat(dirfd, path, amode, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (amode & ~7) {\n          return -28;\n        }\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node) {\n          return -44;\n        }\n        var perms = '';\n        if (amode & 4) perms += 'r';\n        if (amode & 2) perms += 'w';\n        if (amode & 1) perms += 'x';\n        if (perms && FS.nodePermissions(node, perms)) {\n          return -2;\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fchmod(fd, mode) {\n      try {\n        FS.fchmod(fd, mode);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fchown32(fd, owner, group) {\n      try {\n        FS.fchown(fd, owner, group);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function setErrNo(value) {\n      HEAP32[___errno_location() >> 2] = value;\n      return value;\n    }\n\n    function ___syscall_fcntl64(fd, cmd, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        switch (cmd) {\n          case 0: {\n            var arg = SYSCALLS.get();\n            if (arg < 0) {\n              return -28;\n            }\n            var newStream;\n            newStream = FS.createStream(stream, arg);\n            return newStream.fd;\n          }\n          case 1:\n          case 2:\n            return 0;\n          case 3:\n            return stream.flags;\n          case 4: {\n            var arg = SYSCALLS.get();\n            stream.flags |= arg;\n            return 0;\n          }\n          case 5: {\n            var arg = SYSCALLS.get();\n            var offset = 0;\n\n            HEAP16[(arg + offset) >> 1] = 2;\n            return 0;\n          }\n          case 6:\n          case 7:\n            return 0;\n          case 16:\n          case 8:\n            return -28;\n          case 9:\n            setErrNo(28);\n            return -1;\n          default: {\n            return -28;\n          }\n        }\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fstat64(fd, buf) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        return SYSCALLS.doStat(FS.stat, stream.path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    var MAX_INT53 = 9007199254740992;\n\n    var MIN_INT53 = -9007199254740992;\n    function bigintToI53Checked(num) {\n      return num < MIN_INT53 || num > MAX_INT53 ? NaN : Number(num);\n    }\n\n    function ___syscall_ftruncate64(fd, length) {\n      try {\n        length = bigintToI53Checked(length);\n        if (isNaN(length)) return -61;\n        FS.ftruncate(fd, length);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_getcwd(buf, size) {\n      try {\n        if (size === 0) return -28;\n        var cwd = FS.cwd();\n        var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;\n        if (size < cwdLengthInBytes) return -68;\n        stringToUTF8(cwd, buf, size);\n        return cwdLengthInBytes;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_ioctl(fd, op, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        switch (op) {\n          case 21509:\n          case 21505: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21510:\n          case 21511:\n          case 21512:\n          case 21506:\n          case 21507:\n          case 21508: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21519: {\n            if (!stream.tty) return -59;\n            var argp = SYSCALLS.get();\n            HEAP32[argp >> 2] = 0;\n            return 0;\n          }\n          case 21520: {\n            if (!stream.tty) return -59;\n            return -28;\n          }\n          case 21531: {\n            var argp = SYSCALLS.get();\n            return FS.ioctl(stream, op, argp);\n          }\n          case 21523: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21524: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          default:\n            return -28;\n        }\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_lstat64(path, buf) {\n      try {\n        path = SYSCALLS.getStr(path);\n        return SYSCALLS.doStat(FS.lstat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_mkdirat(dirfd, path, mode) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n\n        path = PATH.normalize(path);\n        if (path[path.length - 1] === '/')\n          path = path.substr(0, path.length - 1);\n        FS.mkdir(path, mode, 0);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_newfstatat(dirfd, path, buf, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        var nofollow = flags & 256;\n        var allowEmpty = flags & 4096;\n        flags = flags & ~6400;\n        path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);\n        return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_openat(dirfd, path, flags, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        var mode = varargs ? SYSCALLS.get() : 0;\n        return FS.open(path, flags, mode).fd;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_readlinkat(dirfd, path, buf, bufsize) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (bufsize <= 0) return -28;\n        var ret = FS.readlink(path);\n\n        var len = Math.min(bufsize, lengthBytesUTF8(ret));\n        var endChar = HEAP8[buf + len];\n        stringToUTF8(ret, buf, bufsize + 1);\n\n        HEAP8[buf + len] = endChar;\n        return len;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_rmdir(path) {\n      try {\n        path = SYSCALLS.getStr(path);\n        FS.rmdir(path);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_stat64(path, buf) {\n      try {\n        path = SYSCALLS.getStr(path);\n        return SYSCALLS.doStat(FS.stat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_unlinkat(dirfd, path, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (flags === 0) {\n          FS.unlink(path);\n        } else if (flags === 512) {\n          FS.rmdir(path);\n        } else {\n          abort('Invalid flags passed to unlinkat');\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function readI53FromI64(ptr) {\n      return HEAPU32[ptr >> 2] + HEAP32[(ptr + 4) >> 2] * 4294967296;\n    }\n\n    function ___syscall_utimensat(dirfd, path, times, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path, true);\n        if (!times) {\n          var atime = Date.now();\n          var mtime = atime;\n        } else {\n          var seconds = readI53FromI64(times);\n          var nanoseconds = HEAP32[(times + 8) >> 2];\n          atime = seconds * 1000 + nanoseconds / (1000 * 1000);\n          times += 16;\n          seconds = readI53FromI64(times);\n          nanoseconds = HEAP32[(times + 8) >> 2];\n          mtime = seconds * 1000 + nanoseconds / (1000 * 1000);\n        }\n        FS.utime(path, atime, mtime);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    var nowIsMonotonic = true;\n    function __emscripten_get_now_is_monotonic() {\n      return nowIsMonotonic;\n    }\n\n    function __isLeapYear(year) {\n      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    }\n\n    var __MONTH_DAYS_LEAP_CUMULATIVE = [\n      0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335,\n    ];\n\n    var __MONTH_DAYS_REGULAR_CUMULATIVE = [\n      0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,\n    ];\n    function __yday_from_date(date) {\n      var isLeapYear = __isLeapYear(date.getFullYear());\n      var monthDaysCumulative = isLeapYear\n        ? __MONTH_DAYS_LEAP_CUMULATIVE\n        : __MONTH_DAYS_REGULAR_CUMULATIVE;\n      var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1;\n\n      return yday;\n    }\n    function __localtime_js(time, tmPtr) {\n      var date = new Date(readI53FromI64(time) * 1000);\n      HEAP32[tmPtr >> 2] = date.getSeconds();\n      HEAP32[(tmPtr + 4) >> 2] = date.getMinutes();\n      HEAP32[(tmPtr + 8) >> 2] = date.getHours();\n      HEAP32[(tmPtr + 12) >> 2] = date.getDate();\n      HEAP32[(tmPtr + 16) >> 2] = date.getMonth();\n      HEAP32[(tmPtr + 20) >> 2] = date.getFullYear() - 1900;\n      HEAP32[(tmPtr + 24) >> 2] = date.getDay();\n\n      var yday = __yday_from_date(date) | 0;\n      HEAP32[(tmPtr + 28) >> 2] = yday;\n      HEAP32[(tmPtr + 36) >> 2] = -(date.getTimezoneOffset() * 60);\n\n      var start = new Date(date.getFullYear(), 0, 1);\n      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();\n      var winterOffset = start.getTimezoneOffset();\n      var dst =\n        (summerOffset != winterOffset &&\n          date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;\n      HEAP32[(tmPtr + 32) >> 2] = dst;\n    }\n\n    function __mmap_js(len, prot, flags, fd, off, allocated, addr) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var res = FS.mmap(stream, len, off, prot, flags);\n        var ptr = res.ptr;\n        HEAP32[allocated >> 2] = res.allocated;\n        HEAPU32[addr >> 2] = ptr;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function __munmap_js(addr, len, prot, flags, fd, offset) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        if (prot & 2) {\n          SYSCALLS.doMsync(addr, stream, len, flags, offset);\n        }\n        FS.munmap(stream);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return -e.errno;\n      }\n    }\n\n    function allocateUTF8(str) {\n      var size = lengthBytesUTF8(str) + 1;\n      var ret = _malloc(size);\n      if (ret) stringToUTF8Array(str, HEAP8, ret, size);\n      return ret;\n    }\n    function __tzset_js(timezone, daylight, tzname) {\n      var currentYear = new Date().getFullYear();\n      var winter = new Date(currentYear, 0, 1);\n      var summer = new Date(currentYear, 6, 1);\n      var winterOffset = winter.getTimezoneOffset();\n      var summerOffset = summer.getTimezoneOffset();\n\n      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);\n\n      HEAPU32[timezone >> 2] = stdTimezoneOffset * 60;\n\n      HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);\n\n      function extractZone(date) {\n        var match = date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);\n        return match ? match[1] : 'GMT';\n      }\n      var winterName = extractZone(winter);\n      var summerName = extractZone(summer);\n      var winterNamePtr = allocateUTF8(winterName);\n      var summerNamePtr = allocateUTF8(summerName);\n      if (summerOffset < winterOffset) {\n        HEAPU32[tzname >> 2] = winterNamePtr;\n        HEAPU32[(tzname + 4) >> 2] = summerNamePtr;\n      } else {\n        HEAPU32[tzname >> 2] = summerNamePtr;\n        HEAPU32[(tzname + 4) >> 2] = winterNamePtr;\n      }\n    }\n\n    function _emscripten_date_now() {\n      return Date.now();\n    }\n\n    var _emscripten_get_now;\n    _emscripten_get_now = () => performance.now();\n    function getHeapMax() {\n      return 2147483648;\n    }\n\n    function emscripten_realloc_buffer(size) {\n      var b = wasmMemory.buffer;\n      try {\n        wasmMemory.grow((size - b.byteLength + 65535) >>> 16);\n        updateMemoryViews();\n        return 1;\n      } catch (e) {}\n    }\n    function _emscripten_resize_heap(requestedSize) {\n      var oldSize = HEAPU8.length;\n      requestedSize = requestedSize >>> 0;\n\n      var maxHeapSize = getHeapMax();\n      if (requestedSize > maxHeapSize) {\n        return false;\n      }\n\n      let alignUp = (x, multiple) =>\n        x + ((multiple - (x % multiple)) % multiple);\n\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n\n        overGrownHeapSize = Math.min(\n          overGrownHeapSize,\n          requestedSize + 100663296,\n        );\n\n        var newSize = Math.min(\n          maxHeapSize,\n          alignUp(Math.max(requestedSize, overGrownHeapSize), 65536),\n        );\n\n        var replacement = emscripten_realloc_buffer(newSize);\n        if (replacement) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var ENV = {};\n\n    function getExecutableName() {\n      return thisProgram || './this.program';\n    }\n    function getEnvStrings() {\n      if (!getEnvStrings.strings) {\n        var lang =\n          (\n            (typeof navigator == 'object' &&\n              navigator.languages &&\n              navigator.languages[0]) ||\n            'C'\n          ).replace('-', '_') + '.UTF-8';\n        var env = {\n          USER: 'web_user',\n          LOGNAME: 'web_user',\n          PATH: '/',\n          PWD: '/',\n          HOME: '/home/web_user',\n          LANG: lang,\n          _: getExecutableName(),\n        };\n\n        for (var x in ENV) {\n          if (ENV[x] === undefined) delete env[x];\n          else env[x] = ENV[x];\n        }\n        var strings = [];\n        for (var x in env) {\n          strings.push(x + '=' + env[x]);\n        }\n        getEnvStrings.strings = strings;\n      }\n      return getEnvStrings.strings;\n    }\n\n    function writeAsciiToMemory(str, buffer, dontAddNull) {\n      for (var i = 0; i < str.length; ++i) {\n        HEAP8[buffer++ >> 0] = str.charCodeAt(i);\n      }\n\n      if (!dontAddNull) HEAP8[buffer >> 0] = 0;\n    }\n\n    function _environ_get(__environ, environ_buf) {\n      var bufSize = 0;\n      getEnvStrings().forEach(function (string, i) {\n        var ptr = environ_buf + bufSize;\n        HEAPU32[(__environ + i * 4) >> 2] = ptr;\n        writeAsciiToMemory(string, ptr);\n        bufSize += string.length + 1;\n      });\n      return 0;\n    }\n\n    function _environ_sizes_get(penviron_count, penviron_buf_size) {\n      var strings = getEnvStrings();\n      HEAPU32[penviron_count >> 2] = strings.length;\n      var bufSize = 0;\n      strings.forEach(function (string) {\n        bufSize += string.length + 1;\n      });\n      HEAPU32[penviron_buf_size >> 2] = bufSize;\n      return 0;\n    }\n\n    function _fd_close(fd) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        FS.close(stream);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_fdstat_get(fd, pbuf) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n\n        var type = stream.tty\n          ? 2\n          : FS.isDir(stream.mode)\n            ? 3\n            : FS.isLink(stream.mode)\n              ? 7\n              : 4;\n        HEAP8[pbuf >> 0] = type;\n\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return e.errno;\n      }\n    }\n\n    function doReadv(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[iov >> 2];\n        var len = HEAPU32[(iov + 4) >> 2];\n        iov += 8;\n        var curr = FS.read(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) break;\n        if (typeof offset !== 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    }\n\n    function _fd_read(fd, iov, iovcnt, pnum) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var num = doReadv(stream, iov, iovcnt);\n        HEAPU32[pnum >> 2] = num;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_seek(fd, offset, whence, newOffset) {\n      try {\n        offset = bigintToI53Checked(offset);\n        if (isNaN(offset)) return 61;\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        FS.llseek(stream, offset, whence);\n        (tempI64 = [\n          stream.position >>> 0,\n          ((tempDouble = stream.position),\n          +Math.abs(tempDouble) >= 1.0\n            ? tempDouble > 0.0\n              ? (Math.min(\n                  +Math.floor(tempDouble / 4294967296.0),\n                  4294967295.0,\n                ) |\n                  0) >>>\n                0\n              : ~~+Math.ceil(\n                  (tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0,\n                ) >>> 0\n            : 0),\n        ]),\n          (HEAP32[newOffset >> 2] = tempI64[0]),\n          (HEAP32[(newOffset + 4) >> 2] = tempI64[1]);\n        if (stream.getdents && offset === 0 && whence === 0)\n          stream.getdents = null;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_sync(fd) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        if (stream.stream_ops && stream.stream_ops.fsync) {\n          return stream.stream_ops.fsync(stream);\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return e.errno;\n      }\n    }\n\n    function doWritev(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[iov >> 2];\n        var len = HEAPU32[(iov + 4) >> 2];\n        iov += 8;\n        var curr = FS.write(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (typeof offset !== 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    }\n\n    function _fd_write(fd, iov, iovcnt, pnum) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var num = doWritev(stream, iov, iovcnt);\n        HEAPU32[pnum >> 2] = num;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n        return e.errno;\n      }\n    }\n\n    var FSNode = function (parent, name, mode, rdev) {\n      if (!parent) {\n        parent = this;\n      }\n      this.parent = parent;\n      this.mount = parent.mount;\n      this.mounted = null;\n      this.id = FS.nextInode++;\n      this.name = name;\n      this.mode = mode;\n      this.node_ops = {};\n      this.stream_ops = {};\n      this.rdev = rdev;\n    };\n    var readMode = 292 | 73;\n    var writeMode = 146;\n    Object.defineProperties(FSNode.prototype, {\n      read: {\n        get: function () {\n          return (this.mode & readMode) === readMode;\n        },\n        set: function (val) {\n          val ? (this.mode |= readMode) : (this.mode &= ~readMode);\n        },\n      },\n      write: {\n        get: function () {\n          return (this.mode & writeMode) === writeMode;\n        },\n        set: function (val) {\n          val ? (this.mode |= writeMode) : (this.mode &= ~writeMode);\n        },\n      },\n      isFolder: {\n        get: function () {\n          return FS.isDir(this.mode);\n        },\n      },\n      isDevice: {\n        get: function () {\n          return FS.isChrdev(this.mode);\n        },\n      },\n    });\n    FS.FSNode = FSNode;\n    FS.staticInit();\n    var ASSERTIONS = false;\n\n    var asmLibraryArg = {\n      __syscall_chmod: ___syscall_chmod,\n      __syscall_faccessat: ___syscall_faccessat,\n      __syscall_fchmod: ___syscall_fchmod,\n      __syscall_fchown32: ___syscall_fchown32,\n      __syscall_fcntl64: ___syscall_fcntl64,\n      __syscall_fstat64: ___syscall_fstat64,\n      __syscall_ftruncate64: ___syscall_ftruncate64,\n      __syscall_getcwd: ___syscall_getcwd,\n      __syscall_ioctl: ___syscall_ioctl,\n      __syscall_lstat64: ___syscall_lstat64,\n      __syscall_mkdirat: ___syscall_mkdirat,\n      __syscall_newfstatat: ___syscall_newfstatat,\n      __syscall_openat: ___syscall_openat,\n      __syscall_readlinkat: ___syscall_readlinkat,\n      __syscall_rmdir: ___syscall_rmdir,\n      __syscall_stat64: ___syscall_stat64,\n      __syscall_unlinkat: ___syscall_unlinkat,\n      __syscall_utimensat: ___syscall_utimensat,\n      _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n      _localtime_js: __localtime_js,\n      _mmap_js: __mmap_js,\n      _munmap_js: __munmap_js,\n      _tzset_js: __tzset_js,\n      emscripten_date_now: _emscripten_date_now,\n      emscripten_get_now: _emscripten_get_now,\n      emscripten_resize_heap: _emscripten_resize_heap,\n      environ_get: _environ_get,\n      environ_sizes_get: _environ_sizes_get,\n      fd_close: _fd_close,\n      fd_fdstat_get: _fd_fdstat_get,\n      fd_read: _fd_read,\n      fd_seek: _fd_seek,\n      fd_sync: _fd_sync,\n      fd_write: _fd_write,\n      memory: wasmMemory,\n    };\n    var asm = createWasm();\n\n    var ___wasm_call_ctors = (Module['___wasm_call_ctors'] = function () {\n      return (___wasm_call_ctors = Module['___wasm_call_ctors'] =\n        Module['asm']['__wasm_call_ctors']).apply(null, arguments);\n    });\n\n    var _sqlite3_status64 = (Module['_sqlite3_status64'] = function () {\n      return (_sqlite3_status64 = Module['_sqlite3_status64'] =\n        Module['asm']['sqlite3_status64']).apply(null, arguments);\n    });\n\n    var _sqlite3_status = (Module['_sqlite3_status'] = function () {\n      return (_sqlite3_status = Module['_sqlite3_status'] =\n        Module['asm']['sqlite3_status']).apply(null, arguments);\n    });\n\n    var _sqlite3_db_status = (Module['_sqlite3_db_status'] = function () {\n      return (_sqlite3_db_status = Module['_sqlite3_db_status'] =\n        Module['asm']['sqlite3_db_status']).apply(null, arguments);\n    });\n\n    var _sqlite3_msize = (Module['_sqlite3_msize'] = function () {\n      return (_sqlite3_msize = Module['_sqlite3_msize'] =\n        Module['asm']['sqlite3_msize']).apply(null, arguments);\n    });\n\n    var _sqlite3_vfs_find = (Module['_sqlite3_vfs_find'] = function () {\n      return (_sqlite3_vfs_find = Module['_sqlite3_vfs_find'] =\n        Module['asm']['sqlite3_vfs_find']).apply(null, arguments);\n    });\n\n    var _sqlite3_initialize = (Module['_sqlite3_initialize'] = function () {\n      return (_sqlite3_initialize = Module['_sqlite3_initialize'] =\n        Module['asm']['sqlite3_initialize']).apply(null, arguments);\n    });\n\n    var _sqlite3_malloc = (Module['_sqlite3_malloc'] = function () {\n      return (_sqlite3_malloc = Module['_sqlite3_malloc'] =\n        Module['asm']['sqlite3_malloc']).apply(null, arguments);\n    });\n\n    var _sqlite3_free = (Module['_sqlite3_free'] = function () {\n      return (_sqlite3_free = Module['_sqlite3_free'] =\n        Module['asm']['sqlite3_free']).apply(null, arguments);\n    });\n\n    var _sqlite3_vfs_register = (Module['_sqlite3_vfs_register'] = function () {\n      return (_sqlite3_vfs_register = Module['_sqlite3_vfs_register'] =\n        Module['asm']['sqlite3_vfs_register']).apply(null, arguments);\n    });\n\n    var _sqlite3_vfs_unregister = (Module['_sqlite3_vfs_unregister'] =\n      function () {\n        return (_sqlite3_vfs_unregister = Module['_sqlite3_vfs_unregister'] =\n          Module['asm']['sqlite3_vfs_unregister']).apply(null, arguments);\n      });\n\n    var _sqlite3_malloc64 = (Module['_sqlite3_malloc64'] = function () {\n      return (_sqlite3_malloc64 = Module['_sqlite3_malloc64'] =\n        Module['asm']['sqlite3_malloc64']).apply(null, arguments);\n    });\n\n    var _sqlite3_realloc = (Module['_sqlite3_realloc'] = function () {\n      return (_sqlite3_realloc = Module['_sqlite3_realloc'] =\n        Module['asm']['sqlite3_realloc']).apply(null, arguments);\n    });\n\n    var _sqlite3_realloc64 = (Module['_sqlite3_realloc64'] = function () {\n      return (_sqlite3_realloc64 = Module['_sqlite3_realloc64'] =\n        Module['asm']['sqlite3_realloc64']).apply(null, arguments);\n    });\n\n    var _sqlite3_value_text = (Module['_sqlite3_value_text'] = function () {\n      return (_sqlite3_value_text = Module['_sqlite3_value_text'] =\n        Module['asm']['sqlite3_value_text']).apply(null, arguments);\n    });\n\n    var _sqlite3_randomness = (Module['_sqlite3_randomness'] = function () {\n      return (_sqlite3_randomness = Module['_sqlite3_randomness'] =\n        Module['asm']['sqlite3_randomness']).apply(null, arguments);\n    });\n\n    var _sqlite3_stricmp = (Module['_sqlite3_stricmp'] = function () {\n      return (_sqlite3_stricmp = Module['_sqlite3_stricmp'] =\n        Module['asm']['sqlite3_stricmp']).apply(null, arguments);\n    });\n\n    var _sqlite3_strnicmp = (Module['_sqlite3_strnicmp'] = function () {\n      return (_sqlite3_strnicmp = Module['_sqlite3_strnicmp'] =\n        Module['asm']['sqlite3_strnicmp']).apply(null, arguments);\n    });\n\n    var _sqlite3_uri_parameter = (Module['_sqlite3_uri_parameter'] =\n      function () {\n        return (_sqlite3_uri_parameter = Module['_sqlite3_uri_parameter'] =\n          Module['asm']['sqlite3_uri_parameter']).apply(null, arguments);\n      });\n\n    var ___errno_location = (Module['___errno_location'] = function () {\n      return (___errno_location = Module['___errno_location'] =\n        Module['asm']['__errno_location']).apply(null, arguments);\n    });\n\n    var _sqlite3_uri_boolean = (Module['_sqlite3_uri_boolean'] = function () {\n      return (_sqlite3_uri_boolean = Module['_sqlite3_uri_boolean'] =\n        Module['asm']['sqlite3_uri_boolean']).apply(null, arguments);\n    });\n\n    var _sqlite3_serialize = (Module['_sqlite3_serialize'] = function () {\n      return (_sqlite3_serialize = Module['_sqlite3_serialize'] =\n        Module['asm']['sqlite3_serialize']).apply(null, arguments);\n    });\n\n    var _sqlite3_prepare_v2 = (Module['_sqlite3_prepare_v2'] = function () {\n      return (_sqlite3_prepare_v2 = Module['_sqlite3_prepare_v2'] =\n        Module['asm']['sqlite3_prepare_v2']).apply(null, arguments);\n    });\n\n    var _sqlite3_step = (Module['_sqlite3_step'] = function () {\n      return (_sqlite3_step = Module['_sqlite3_step'] =\n        Module['asm']['sqlite3_step']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_int64 = (Module['_sqlite3_column_int64'] = function () {\n      return (_sqlite3_column_int64 = Module['_sqlite3_column_int64'] =\n        Module['asm']['sqlite3_column_int64']).apply(null, arguments);\n    });\n\n    var _sqlite3_reset = (Module['_sqlite3_reset'] = function () {\n      return (_sqlite3_reset = Module['_sqlite3_reset'] =\n        Module['asm']['sqlite3_reset']).apply(null, arguments);\n    });\n\n    var _sqlite3_exec = (Module['_sqlite3_exec'] = function () {\n      return (_sqlite3_exec = Module['_sqlite3_exec'] =\n        Module['asm']['sqlite3_exec']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_int = (Module['_sqlite3_column_int'] = function () {\n      return (_sqlite3_column_int = Module['_sqlite3_column_int'] =\n        Module['asm']['sqlite3_column_int']).apply(null, arguments);\n    });\n\n    var _sqlite3_finalize = (Module['_sqlite3_finalize'] = function () {\n      return (_sqlite3_finalize = Module['_sqlite3_finalize'] =\n        Module['asm']['sqlite3_finalize']).apply(null, arguments);\n    });\n\n    var _sqlite3_file_control = (Module['_sqlite3_file_control'] = function () {\n      return (_sqlite3_file_control = Module['_sqlite3_file_control'] =\n        Module['asm']['sqlite3_file_control']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_name = (Module['_sqlite3_column_name'] = function () {\n      return (_sqlite3_column_name = Module['_sqlite3_column_name'] =\n        Module['asm']['sqlite3_column_name']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_text = (Module['_sqlite3_column_text'] = function () {\n      return (_sqlite3_column_text = Module['_sqlite3_column_text'] =\n        Module['asm']['sqlite3_column_text']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_type = (Module['_sqlite3_column_type'] = function () {\n      return (_sqlite3_column_type = Module['_sqlite3_column_type'] =\n        Module['asm']['sqlite3_column_type']).apply(null, arguments);\n    });\n\n    var _sqlite3_errmsg = (Module['_sqlite3_errmsg'] = function () {\n      return (_sqlite3_errmsg = Module['_sqlite3_errmsg'] =\n        Module['asm']['sqlite3_errmsg']).apply(null, arguments);\n    });\n\n    var _sqlite3_deserialize = (Module['_sqlite3_deserialize'] = function () {\n      return (_sqlite3_deserialize = Module['_sqlite3_deserialize'] =\n        Module['asm']['sqlite3_deserialize']).apply(null, arguments);\n    });\n\n    var _sqlite3_clear_bindings = (Module['_sqlite3_clear_bindings'] =\n      function () {\n        return (_sqlite3_clear_bindings = Module['_sqlite3_clear_bindings'] =\n          Module['asm']['sqlite3_clear_bindings']).apply(null, arguments);\n      });\n\n    var _sqlite3_value_blob = (Module['_sqlite3_value_blob'] = function () {\n      return (_sqlite3_value_blob = Module['_sqlite3_value_blob'] =\n        Module['asm']['sqlite3_value_blob']).apply(null, arguments);\n    });\n\n    var _sqlite3_value_bytes = (Module['_sqlite3_value_bytes'] = function () {\n      return (_sqlite3_value_bytes = Module['_sqlite3_value_bytes'] =\n        Module['asm']['sqlite3_value_bytes']).apply(null, arguments);\n    });\n\n    var _sqlite3_value_double = (Module['_sqlite3_value_double'] = function () {\n      return (_sqlite3_value_double = Module['_sqlite3_value_double'] =\n        Module['asm']['sqlite3_value_double']).apply(null, arguments);\n    });\n\n    var _sqlite3_value_int = (Module['_sqlite3_value_int'] = function () {\n      return (_sqlite3_value_int = Module['_sqlite3_value_int'] =\n        Module['asm']['sqlite3_value_int']).apply(null, arguments);\n    });\n\n    var _sqlite3_value_int64 = (Module['_sqlite3_value_int64'] = function () {\n      return (_sqlite3_value_int64 = Module['_sqlite3_value_int64'] =\n        Module['asm']['sqlite3_value_int64']).apply(null, arguments);\n    });\n\n    var _sqlite3_value_subtype = (Module['_sqlite3_value_subtype'] =\n      function () {\n        return (_sqlite3_value_subtype = Module['_sqlite3_value_subtype'] =\n          Module['asm']['sqlite3_value_subtype']).apply(null, arguments);\n      });\n\n    var _sqlite3_value_pointer = (Module['_sqlite3_value_pointer'] =\n      function () {\n        return (_sqlite3_value_pointer = Module['_sqlite3_value_pointer'] =\n          Module['asm']['sqlite3_value_pointer']).apply(null, arguments);\n      });\n\n    var _sqlite3_value_type = (Module['_sqlite3_value_type'] = function () {\n      return (_sqlite3_value_type = Module['_sqlite3_value_type'] =\n        Module['asm']['sqlite3_value_type']).apply(null, arguments);\n    });\n\n    var _sqlite3_value_nochange = (Module['_sqlite3_value_nochange'] =\n      function () {\n        return (_sqlite3_value_nochange = Module['_sqlite3_value_nochange'] =\n          Module['asm']['sqlite3_value_nochange']).apply(null, arguments);\n      });\n\n    var _sqlite3_value_frombind = (Module['_sqlite3_value_frombind'] =\n      function () {\n        return (_sqlite3_value_frombind = Module['_sqlite3_value_frombind'] =\n          Module['asm']['sqlite3_value_frombind']).apply(null, arguments);\n      });\n\n    var _sqlite3_value_dup = (Module['_sqlite3_value_dup'] = function () {\n      return (_sqlite3_value_dup = Module['_sqlite3_value_dup'] =\n        Module['asm']['sqlite3_value_dup']).apply(null, arguments);\n    });\n\n    var _sqlite3_value_free = (Module['_sqlite3_value_free'] = function () {\n      return (_sqlite3_value_free = Module['_sqlite3_value_free'] =\n        Module['asm']['sqlite3_value_free']).apply(null, arguments);\n    });\n\n    var _sqlite3_result_blob = (Module['_sqlite3_result_blob'] = function () {\n      return (_sqlite3_result_blob = Module['_sqlite3_result_blob'] =\n        Module['asm']['sqlite3_result_blob']).apply(null, arguments);\n    });\n\n    var _sqlite3_result_error_toobig = (Module['_sqlite3_result_error_toobig'] =\n      function () {\n        return (_sqlite3_result_error_toobig = Module[\n          '_sqlite3_result_error_toobig'\n        ] =\n          Module['asm']['sqlite3_result_error_toobig']).apply(null, arguments);\n      });\n\n    var _sqlite3_result_error_nomem = (Module['_sqlite3_result_error_nomem'] =\n      function () {\n        return (_sqlite3_result_error_nomem = Module[\n          '_sqlite3_result_error_nomem'\n        ] =\n          Module['asm']['sqlite3_result_error_nomem']).apply(null, arguments);\n      });\n\n    var _sqlite3_result_double = (Module['_sqlite3_result_double'] =\n      function () {\n        return (_sqlite3_result_double = Module['_sqlite3_result_double'] =\n          Module['asm']['sqlite3_result_double']).apply(null, arguments);\n      });\n\n    var _sqlite3_result_error = (Module['_sqlite3_result_error'] = function () {\n      return (_sqlite3_result_error = Module['_sqlite3_result_error'] =\n        Module['asm']['sqlite3_result_error']).apply(null, arguments);\n    });\n\n    var _sqlite3_result_int = (Module['_sqlite3_result_int'] = function () {\n      return (_sqlite3_result_int = Module['_sqlite3_result_int'] =\n        Module['asm']['sqlite3_result_int']).apply(null, arguments);\n    });\n\n    var _sqlite3_result_int64 = (Module['_sqlite3_result_int64'] = function () {\n      return (_sqlite3_result_int64 = Module['_sqlite3_result_int64'] =\n        Module['asm']['sqlite3_result_int64']).apply(null, arguments);\n    });\n\n    var _sqlite3_result_null = (Module['_sqlite3_result_null'] = function () {\n      return (_sqlite3_result_null = Module['_sqlite3_result_null'] =\n        Module['asm']['sqlite3_result_null']).apply(null, arguments);\n    });\n\n    var _sqlite3_result_pointer = (Module['_sqlite3_result_pointer'] =\n      function () {\n        return (_sqlite3_result_pointer = Module['_sqlite3_result_pointer'] =\n          Module['asm']['sqlite3_result_pointer']).apply(null, arguments);\n      });\n\n    var _sqlite3_result_subtype = (Module['_sqlite3_result_subtype'] =\n      function () {\n        return (_sqlite3_result_subtype = Module['_sqlite3_result_subtype'] =\n          Module['asm']['sqlite3_result_subtype']).apply(null, arguments);\n      });\n\n    var _sqlite3_result_text = (Module['_sqlite3_result_text'] = function () {\n      return (_sqlite3_result_text = Module['_sqlite3_result_text'] =\n        Module['asm']['sqlite3_result_text']).apply(null, arguments);\n    });\n\n    var _sqlite3_result_zeroblob = (Module['_sqlite3_result_zeroblob'] =\n      function () {\n        return (_sqlite3_result_zeroblob = Module['_sqlite3_result_zeroblob'] =\n          Module['asm']['sqlite3_result_zeroblob']).apply(null, arguments);\n      });\n\n    var _sqlite3_result_zeroblob64 = (Module['_sqlite3_result_zeroblob64'] =\n      function () {\n        return (_sqlite3_result_zeroblob64 = Module[\n          '_sqlite3_result_zeroblob64'\n        ] =\n          Module['asm']['sqlite3_result_zeroblob64']).apply(null, arguments);\n      });\n\n    var _sqlite3_result_error_code = (Module['_sqlite3_result_error_code'] =\n      function () {\n        return (_sqlite3_result_error_code = Module[\n          '_sqlite3_result_error_code'\n        ] =\n          Module['asm']['sqlite3_result_error_code']).apply(null, arguments);\n      });\n\n    var _sqlite3_user_data = (Module['_sqlite3_user_data'] = function () {\n      return (_sqlite3_user_data = Module['_sqlite3_user_data'] =\n        Module['asm']['sqlite3_user_data']).apply(null, arguments);\n    });\n\n    var _sqlite3_context_db_handle = (Module['_sqlite3_context_db_handle'] =\n      function () {\n        return (_sqlite3_context_db_handle = Module[\n          '_sqlite3_context_db_handle'\n        ] =\n          Module['asm']['sqlite3_context_db_handle']).apply(null, arguments);\n      });\n\n    var _sqlite3_vtab_nochange = (Module['_sqlite3_vtab_nochange'] =\n      function () {\n        return (_sqlite3_vtab_nochange = Module['_sqlite3_vtab_nochange'] =\n          Module['asm']['sqlite3_vtab_nochange']).apply(null, arguments);\n      });\n\n    var _sqlite3_vtab_in_first = (Module['_sqlite3_vtab_in_first'] =\n      function () {\n        return (_sqlite3_vtab_in_first = Module['_sqlite3_vtab_in_first'] =\n          Module['asm']['sqlite3_vtab_in_first']).apply(null, arguments);\n      });\n\n    var _sqlite3_vtab_in_next = (Module['_sqlite3_vtab_in_next'] = function () {\n      return (_sqlite3_vtab_in_next = Module['_sqlite3_vtab_in_next'] =\n        Module['asm']['sqlite3_vtab_in_next']).apply(null, arguments);\n    });\n\n    var _sqlite3_aggregate_context = (Module['_sqlite3_aggregate_context'] =\n      function () {\n        return (_sqlite3_aggregate_context = Module[\n          '_sqlite3_aggregate_context'\n        ] =\n          Module['asm']['sqlite3_aggregate_context']).apply(null, arguments);\n      });\n\n    var _sqlite3_get_auxdata = (Module['_sqlite3_get_auxdata'] = function () {\n      return (_sqlite3_get_auxdata = Module['_sqlite3_get_auxdata'] =\n        Module['asm']['sqlite3_get_auxdata']).apply(null, arguments);\n    });\n\n    var _sqlite3_set_auxdata = (Module['_sqlite3_set_auxdata'] = function () {\n      return (_sqlite3_set_auxdata = Module['_sqlite3_set_auxdata'] =\n        Module['asm']['sqlite3_set_auxdata']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_count = (Module['_sqlite3_column_count'] = function () {\n      return (_sqlite3_column_count = Module['_sqlite3_column_count'] =\n        Module['asm']['sqlite3_column_count']).apply(null, arguments);\n    });\n\n    var _sqlite3_data_count = (Module['_sqlite3_data_count'] = function () {\n      return (_sqlite3_data_count = Module['_sqlite3_data_count'] =\n        Module['asm']['sqlite3_data_count']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_blob = (Module['_sqlite3_column_blob'] = function () {\n      return (_sqlite3_column_blob = Module['_sqlite3_column_blob'] =\n        Module['asm']['sqlite3_column_blob']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_bytes = (Module['_sqlite3_column_bytes'] = function () {\n      return (_sqlite3_column_bytes = Module['_sqlite3_column_bytes'] =\n        Module['asm']['sqlite3_column_bytes']).apply(null, arguments);\n    });\n\n    var _sqlite3_column_double = (Module['_sqlite3_column_double'] =\n      function () {\n        return (_sqlite3_column_double = Module['_sqlite3_column_double'] =\n          Module['asm']['sqlite3_column_double']).apply(null, arguments);\n      });\n\n    var _sqlite3_column_value = (Module['_sqlite3_column_value'] = function () {\n      return (_sqlite3_column_value = Module['_sqlite3_column_value'] =\n        Module['asm']['sqlite3_column_value']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_blob = (Module['_sqlite3_bind_blob'] = function () {\n      return (_sqlite3_bind_blob = Module['_sqlite3_bind_blob'] =\n        Module['asm']['sqlite3_bind_blob']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_double = (Module['_sqlite3_bind_double'] = function () {\n      return (_sqlite3_bind_double = Module['_sqlite3_bind_double'] =\n        Module['asm']['sqlite3_bind_double']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_int = (Module['_sqlite3_bind_int'] = function () {\n      return (_sqlite3_bind_int = Module['_sqlite3_bind_int'] =\n        Module['asm']['sqlite3_bind_int']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_int64 = (Module['_sqlite3_bind_int64'] = function () {\n      return (_sqlite3_bind_int64 = Module['_sqlite3_bind_int64'] =\n        Module['asm']['sqlite3_bind_int64']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_null = (Module['_sqlite3_bind_null'] = function () {\n      return (_sqlite3_bind_null = Module['_sqlite3_bind_null'] =\n        Module['asm']['sqlite3_bind_null']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_pointer = (Module['_sqlite3_bind_pointer'] = function () {\n      return (_sqlite3_bind_pointer = Module['_sqlite3_bind_pointer'] =\n        Module['asm']['sqlite3_bind_pointer']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_text = (Module['_sqlite3_bind_text'] = function () {\n      return (_sqlite3_bind_text = Module['_sqlite3_bind_text'] =\n        Module['asm']['sqlite3_bind_text']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_parameter_count = (Module[\n      '_sqlite3_bind_parameter_count'\n    ] = function () {\n      return (_sqlite3_bind_parameter_count = Module[\n        '_sqlite3_bind_parameter_count'\n      ] =\n        Module['asm']['sqlite3_bind_parameter_count']).apply(null, arguments);\n    });\n\n    var _sqlite3_bind_parameter_index = (Module[\n      '_sqlite3_bind_parameter_index'\n    ] = function () {\n      return (_sqlite3_bind_parameter_index = Module[\n        '_sqlite3_bind_parameter_index'\n      ] =\n        Module['asm']['sqlite3_bind_parameter_index']).apply(null, arguments);\n    });\n\n    var _sqlite3_db_handle = (Module['_sqlite3_db_handle'] = function () {\n      return (_sqlite3_db_handle = Module['_sqlite3_db_handle'] =\n        Module['asm']['sqlite3_db_handle']).apply(null, arguments);\n    });\n\n    var _sqlite3_stmt_readonly = (Module['_sqlite3_stmt_readonly'] =\n      function () {\n        return (_sqlite3_stmt_readonly = Module['_sqlite3_stmt_readonly'] =\n          Module['asm']['sqlite3_stmt_readonly']).apply(null, arguments);\n      });\n\n    var _sqlite3_stmt_isexplain = (Module['_sqlite3_stmt_isexplain'] =\n      function () {\n        return (_sqlite3_stmt_isexplain = Module['_sqlite3_stmt_isexplain'] =\n          Module['asm']['sqlite3_stmt_isexplain']).apply(null, arguments);\n      });\n\n    var _sqlite3_stmt_status = (Module['_sqlite3_stmt_status'] = function () {\n      return (_sqlite3_stmt_status = Module['_sqlite3_stmt_status'] =\n        Module['asm']['sqlite3_stmt_status']).apply(null, arguments);\n    });\n\n    var _sqlite3_sql = (Module['_sqlite3_sql'] = function () {\n      return (_sqlite3_sql = Module['_sqlite3_sql'] =\n        Module['asm']['sqlite3_sql']).apply(null, arguments);\n    });\n\n    var _sqlite3_expanded_sql = (Module['_sqlite3_expanded_sql'] = function () {\n      return (_sqlite3_expanded_sql = Module['_sqlite3_expanded_sql'] =\n        Module['asm']['sqlite3_expanded_sql']).apply(null, arguments);\n    });\n\n    var _sqlite3_preupdate_old = (Module['_sqlite3_preupdate_old'] =\n      function () {\n        return (_sqlite3_preupdate_old = Module['_sqlite3_preupdate_old'] =\n          Module['asm']['sqlite3_preupdate_old']).apply(null, arguments);\n      });\n\n    var _sqlite3_preupdate_count = (Module['_sqlite3_preupdate_count'] =\n      function () {\n        return (_sqlite3_preupdate_count = Module['_sqlite3_preupdate_count'] =\n          Module['asm']['sqlite3_preupdate_count']).apply(null, arguments);\n      });\n\n    var _sqlite3_preupdate_depth = (Module['_sqlite3_preupdate_depth'] =\n      function () {\n        return (_sqlite3_preupdate_depth = Module['_sqlite3_preupdate_depth'] =\n          Module['asm']['sqlite3_preupdate_depth']).apply(null, arguments);\n      });\n\n    var _sqlite3_preupdate_blobwrite = (Module['_sqlite3_preupdate_blobwrite'] =\n      function () {\n        return (_sqlite3_preupdate_blobwrite = Module[\n          '_sqlite3_preupdate_blobwrite'\n        ] =\n          Module['asm']['sqlite3_preupdate_blobwrite']).apply(null, arguments);\n      });\n\n    var _sqlite3_preupdate_new = (Module['_sqlite3_preupdate_new'] =\n      function () {\n        return (_sqlite3_preupdate_new = Module['_sqlite3_preupdate_new'] =\n          Module['asm']['sqlite3_preupdate_new']).apply(null, arguments);\n      });\n\n    var _sqlite3_value_numeric_type = (Module['_sqlite3_value_numeric_type'] =\n      function () {\n        return (_sqlite3_value_numeric_type = Module[\n          '_sqlite3_value_numeric_type'\n        ] =\n          Module['asm']['sqlite3_value_numeric_type']).apply(null, arguments);\n      });\n\n    var _sqlite3_set_authorizer = (Module['_sqlite3_set_authorizer'] =\n      function () {\n        return (_sqlite3_set_authorizer = Module['_sqlite3_set_authorizer'] =\n          Module['asm']['sqlite3_set_authorizer']).apply(null, arguments);\n      });\n\n    var _sqlite3_strglob = (Module['_sqlite3_strglob'] = function () {\n      return (_sqlite3_strglob = Module['_sqlite3_strglob'] =\n        Module['asm']['sqlite3_strglob']).apply(null, arguments);\n    });\n\n    var _sqlite3_strlike = (Module['_sqlite3_strlike'] = function () {\n      return (_sqlite3_strlike = Module['_sqlite3_strlike'] =\n        Module['asm']['sqlite3_strlike']).apply(null, arguments);\n    });\n\n    var _sqlite3_auto_extension = (Module['_sqlite3_auto_extension'] =\n      function () {\n        return (_sqlite3_auto_extension = Module['_sqlite3_auto_extension'] =\n          Module['asm']['sqlite3_auto_extension']).apply(null, arguments);\n      });\n\n    var _sqlite3_cancel_auto_extension = (Module[\n      '_sqlite3_cancel_auto_extension'\n    ] = function () {\n      return (_sqlite3_cancel_auto_extension = Module[\n        '_sqlite3_cancel_auto_extension'\n      ] =\n        Module['asm']['sqlite3_cancel_auto_extension']).apply(null, arguments);\n    });\n\n    var _sqlite3_reset_auto_extension = (Module[\n      '_sqlite3_reset_auto_extension'\n    ] = function () {\n      return (_sqlite3_reset_auto_extension = Module[\n        '_sqlite3_reset_auto_extension'\n      ] =\n        Module['asm']['sqlite3_reset_auto_extension']).apply(null, arguments);\n    });\n\n    var _sqlite3_prepare_v3 = (Module['_sqlite3_prepare_v3'] = function () {\n      return (_sqlite3_prepare_v3 = Module['_sqlite3_prepare_v3'] =\n        Module['asm']['sqlite3_prepare_v3']).apply(null, arguments);\n    });\n\n    var _sqlite3_create_module = (Module['_sqlite3_create_module'] =\n      function () {\n        return (_sqlite3_create_module = Module['_sqlite3_create_module'] =\n          Module['asm']['sqlite3_create_module']).apply(null, arguments);\n      });\n\n    var _sqlite3_create_module_v2 = (Module['_sqlite3_create_module_v2'] =\n      function () {\n        return (_sqlite3_create_module_v2 = Module[\n          '_sqlite3_create_module_v2'\n        ] =\n          Module['asm']['sqlite3_create_module_v2']).apply(null, arguments);\n      });\n\n    var _sqlite3_drop_modules = (Module['_sqlite3_drop_modules'] = function () {\n      return (_sqlite3_drop_modules = Module['_sqlite3_drop_modules'] =\n        Module['asm']['sqlite3_drop_modules']).apply(null, arguments);\n    });\n\n    var _sqlite3_declare_vtab = (Module['_sqlite3_declare_vtab'] = function () {\n      return (_sqlite3_declare_vtab = Module['_sqlite3_declare_vtab'] =\n        Module['asm']['sqlite3_declare_vtab']).apply(null, arguments);\n    });\n\n    var _sqlite3_vtab_on_conflict = (Module['_sqlite3_vtab_on_conflict'] =\n      function () {\n        return (_sqlite3_vtab_on_conflict = Module[\n          '_sqlite3_vtab_on_conflict'\n        ] =\n          Module['asm']['sqlite3_vtab_on_conflict']).apply(null, arguments);\n      });\n\n    var _sqlite3_vtab_collation = (Module['_sqlite3_vtab_collation'] =\n      function () {\n        return (_sqlite3_vtab_collation = Module['_sqlite3_vtab_collation'] =\n          Module['asm']['sqlite3_vtab_collation']).apply(null, arguments);\n      });\n\n    var _sqlite3_vtab_in = (Module['_sqlite3_vtab_in'] = function () {\n      return (_sqlite3_vtab_in = Module['_sqlite3_vtab_in'] =\n        Module['asm']['sqlite3_vtab_in']).apply(null, arguments);\n    });\n\n    var _sqlite3_vtab_rhs_value = (Module['_sqlite3_vtab_rhs_value'] =\n      function () {\n        return (_sqlite3_vtab_rhs_value = Module['_sqlite3_vtab_rhs_value'] =\n          Module['asm']['sqlite3_vtab_rhs_value']).apply(null, arguments);\n      });\n\n    var _sqlite3_vtab_distinct = (Module['_sqlite3_vtab_distinct'] =\n      function () {\n        return (_sqlite3_vtab_distinct = Module['_sqlite3_vtab_distinct'] =\n          Module['asm']['sqlite3_vtab_distinct']).apply(null, arguments);\n      });\n\n    var _sqlite3_keyword_name = (Module['_sqlite3_keyword_name'] = function () {\n      return (_sqlite3_keyword_name = Module['_sqlite3_keyword_name'] =\n        Module['asm']['sqlite3_keyword_name']).apply(null, arguments);\n    });\n\n    var _sqlite3_keyword_count = (Module['_sqlite3_keyword_count'] =\n      function () {\n        return (_sqlite3_keyword_count = Module['_sqlite3_keyword_count'] =\n          Module['asm']['sqlite3_keyword_count']).apply(null, arguments);\n      });\n\n    var _sqlite3_keyword_check = (Module['_sqlite3_keyword_check'] =\n      function () {\n        return (_sqlite3_keyword_check = Module['_sqlite3_keyword_check'] =\n          Module['asm']['sqlite3_keyword_check']).apply(null, arguments);\n      });\n\n    var _sqlite3_complete = (Module['_sqlite3_complete'] = function () {\n      return (_sqlite3_complete = Module['_sqlite3_complete'] =\n        Module['asm']['sqlite3_complete']).apply(null, arguments);\n    });\n\n    var _sqlite3_libversion = (Module['_sqlite3_libversion'] = function () {\n      return (_sqlite3_libversion = Module['_sqlite3_libversion'] =\n        Module['asm']['sqlite3_libversion']).apply(null, arguments);\n    });\n\n    var _sqlite3_libversion_number = (Module['_sqlite3_libversion_number'] =\n      function () {\n        return (_sqlite3_libversion_number = Module[\n          '_sqlite3_libversion_number'\n        ] =\n          Module['asm']['sqlite3_libversion_number']).apply(null, arguments);\n      });\n\n    var _sqlite3_shutdown = (Module['_sqlite3_shutdown'] = function () {\n      return (_sqlite3_shutdown = Module['_sqlite3_shutdown'] =\n        Module['asm']['sqlite3_shutdown']).apply(null, arguments);\n    });\n\n    var _sqlite3_last_insert_rowid = (Module['_sqlite3_last_insert_rowid'] =\n      function () {\n        return (_sqlite3_last_insert_rowid = Module[\n          '_sqlite3_last_insert_rowid'\n        ] =\n          Module['asm']['sqlite3_last_insert_rowid']).apply(null, arguments);\n      });\n\n    var _sqlite3_set_last_insert_rowid = (Module[\n      '_sqlite3_set_last_insert_rowid'\n    ] = function () {\n      return (_sqlite3_set_last_insert_rowid = Module[\n        '_sqlite3_set_last_insert_rowid'\n      ] =\n        Module['asm']['sqlite3_set_last_insert_rowid']).apply(null, arguments);\n    });\n\n    var _sqlite3_changes64 = (Module['_sqlite3_changes64'] = function () {\n      return (_sqlite3_changes64 = Module['_sqlite3_changes64'] =\n        Module['asm']['sqlite3_changes64']).apply(null, arguments);\n    });\n\n    var _sqlite3_changes = (Module['_sqlite3_changes'] = function () {\n      return (_sqlite3_changes = Module['_sqlite3_changes'] =\n        Module['asm']['sqlite3_changes']).apply(null, arguments);\n    });\n\n    var _sqlite3_total_changes64 = (Module['_sqlite3_total_changes64'] =\n      function () {\n        return (_sqlite3_total_changes64 = Module['_sqlite3_total_changes64'] =\n          Module['asm']['sqlite3_total_changes64']).apply(null, arguments);\n      });\n\n    var _sqlite3_total_changes = (Module['_sqlite3_total_changes'] =\n      function () {\n        return (_sqlite3_total_changes = Module['_sqlite3_total_changes'] =\n          Module['asm']['sqlite3_total_changes']).apply(null, arguments);\n      });\n\n    var _sqlite3_txn_state = (Module['_sqlite3_txn_state'] = function () {\n      return (_sqlite3_txn_state = Module['_sqlite3_txn_state'] =\n        Module['asm']['sqlite3_txn_state']).apply(null, arguments);\n    });\n\n    var _sqlite3_close_v2 = (Module['_sqlite3_close_v2'] = function () {\n      return (_sqlite3_close_v2 = Module['_sqlite3_close_v2'] =\n        Module['asm']['sqlite3_close_v2']).apply(null, arguments);\n    });\n\n    var _sqlite3_busy_handler = (Module['_sqlite3_busy_handler'] = function () {\n      return (_sqlite3_busy_handler = Module['_sqlite3_busy_handler'] =\n        Module['asm']['sqlite3_busy_handler']).apply(null, arguments);\n    });\n\n    var _sqlite3_progress_handler = (Module['_sqlite3_progress_handler'] =\n      function () {\n        return (_sqlite3_progress_handler = Module[\n          '_sqlite3_progress_handler'\n        ] =\n          Module['asm']['sqlite3_progress_handler']).apply(null, arguments);\n      });\n\n    var _sqlite3_busy_timeout = (Module['_sqlite3_busy_timeout'] = function () {\n      return (_sqlite3_busy_timeout = Module['_sqlite3_busy_timeout'] =\n        Module['asm']['sqlite3_busy_timeout']).apply(null, arguments);\n    });\n\n    var _sqlite3_create_function = (Module['_sqlite3_create_function'] =\n      function () {\n        return (_sqlite3_create_function = Module['_sqlite3_create_function'] =\n          Module['asm']['sqlite3_create_function']).apply(null, arguments);\n      });\n\n    var _sqlite3_create_function_v2 = (Module['_sqlite3_create_function_v2'] =\n      function () {\n        return (_sqlite3_create_function_v2 = Module[\n          '_sqlite3_create_function_v2'\n        ] =\n          Module['asm']['sqlite3_create_function_v2']).apply(null, arguments);\n      });\n\n    var _sqlite3_create_window_function = (Module[\n      '_sqlite3_create_window_function'\n    ] = function () {\n      return (_sqlite3_create_window_function = Module[\n        '_sqlite3_create_window_function'\n      ] =\n        Module['asm']['sqlite3_create_window_function']).apply(null, arguments);\n    });\n\n    var _sqlite3_overload_function = (Module['_sqlite3_overload_function'] =\n      function () {\n        return (_sqlite3_overload_function = Module[\n          '_sqlite3_overload_function'\n        ] =\n          Module['asm']['sqlite3_overload_function']).apply(null, arguments);\n      });\n\n    var _sqlite3_trace_v2 = (Module['_sqlite3_trace_v2'] = function () {\n      return (_sqlite3_trace_v2 = Module['_sqlite3_trace_v2'] =\n        Module['asm']['sqlite3_trace_v2']).apply(null, arguments);\n    });\n\n    var _sqlite3_commit_hook = (Module['_sqlite3_commit_hook'] = function () {\n      return (_sqlite3_commit_hook = Module['_sqlite3_commit_hook'] =\n        Module['asm']['sqlite3_commit_hook']).apply(null, arguments);\n    });\n\n    var _sqlite3_update_hook = (Module['_sqlite3_update_hook'] = function () {\n      return (_sqlite3_update_hook = Module['_sqlite3_update_hook'] =\n        Module['asm']['sqlite3_update_hook']).apply(null, arguments);\n    });\n\n    var _sqlite3_rollback_hook = (Module['_sqlite3_rollback_hook'] =\n      function () {\n        return (_sqlite3_rollback_hook = Module['_sqlite3_rollback_hook'] =\n          Module['asm']['sqlite3_rollback_hook']).apply(null, arguments);\n      });\n\n    var _sqlite3_preupdate_hook = (Module['_sqlite3_preupdate_hook'] =\n      function () {\n        return (_sqlite3_preupdate_hook = Module['_sqlite3_preupdate_hook'] =\n          Module['asm']['sqlite3_preupdate_hook']).apply(null, arguments);\n      });\n\n    var _sqlite3_error_offset = (Module['_sqlite3_error_offset'] = function () {\n      return (_sqlite3_error_offset = Module['_sqlite3_error_offset'] =\n        Module['asm']['sqlite3_error_offset']).apply(null, arguments);\n    });\n\n    var _sqlite3_errcode = (Module['_sqlite3_errcode'] = function () {\n      return (_sqlite3_errcode = Module['_sqlite3_errcode'] =\n        Module['asm']['sqlite3_errcode']).apply(null, arguments);\n    });\n\n    var _sqlite3_extended_errcode = (Module['_sqlite3_extended_errcode'] =\n      function () {\n        return (_sqlite3_extended_errcode = Module[\n          '_sqlite3_extended_errcode'\n        ] =\n          Module['asm']['sqlite3_extended_errcode']).apply(null, arguments);\n      });\n\n    var _sqlite3_errstr = (Module['_sqlite3_errstr'] = function () {\n      return (_sqlite3_errstr = Module['_sqlite3_errstr'] =\n        Module['asm']['sqlite3_errstr']).apply(null, arguments);\n    });\n\n    var _sqlite3_limit = (Module['_sqlite3_limit'] = function () {\n      return (_sqlite3_limit = Module['_sqlite3_limit'] =\n        Module['asm']['sqlite3_limit']).apply(null, arguments);\n    });\n\n    var _sqlite3_open = (Module['_sqlite3_open'] = function () {\n      return (_sqlite3_open = Module['_sqlite3_open'] =\n        Module['asm']['sqlite3_open']).apply(null, arguments);\n    });\n\n    var _sqlite3_open_v2 = (Module['_sqlite3_open_v2'] = function () {\n      return (_sqlite3_open_v2 = Module['_sqlite3_open_v2'] =\n        Module['asm']['sqlite3_open_v2']).apply(null, arguments);\n    });\n\n    var _sqlite3_create_collation = (Module['_sqlite3_create_collation'] =\n      function () {\n        return (_sqlite3_create_collation = Module[\n          '_sqlite3_create_collation'\n        ] =\n          Module['asm']['sqlite3_create_collation']).apply(null, arguments);\n      });\n\n    var _sqlite3_create_collation_v2 = (Module['_sqlite3_create_collation_v2'] =\n      function () {\n        return (_sqlite3_create_collation_v2 = Module[\n          '_sqlite3_create_collation_v2'\n        ] =\n          Module['asm']['sqlite3_create_collation_v2']).apply(null, arguments);\n      });\n\n    var _sqlite3_collation_needed = (Module['_sqlite3_collation_needed'] =\n      function () {\n        return (_sqlite3_collation_needed = Module[\n          '_sqlite3_collation_needed'\n        ] =\n          Module['asm']['sqlite3_collation_needed']).apply(null, arguments);\n      });\n\n    var _sqlite3_get_autocommit = (Module['_sqlite3_get_autocommit'] =\n      function () {\n        return (_sqlite3_get_autocommit = Module['_sqlite3_get_autocommit'] =\n          Module['asm']['sqlite3_get_autocommit']).apply(null, arguments);\n      });\n\n    var _sqlite3_table_column_metadata = (Module[\n      '_sqlite3_table_column_metadata'\n    ] = function () {\n      return (_sqlite3_table_column_metadata = Module[\n        '_sqlite3_table_column_metadata'\n      ] =\n        Module['asm']['sqlite3_table_column_metadata']).apply(null, arguments);\n    });\n\n    var _sqlite3_extended_result_codes = (Module[\n      '_sqlite3_extended_result_codes'\n    ] = function () {\n      return (_sqlite3_extended_result_codes = Module[\n        '_sqlite3_extended_result_codes'\n      ] =\n        Module['asm']['sqlite3_extended_result_codes']).apply(null, arguments);\n    });\n\n    var _sqlite3_uri_key = (Module['_sqlite3_uri_key'] = function () {\n      return (_sqlite3_uri_key = Module['_sqlite3_uri_key'] =\n        Module['asm']['sqlite3_uri_key']).apply(null, arguments);\n    });\n\n    var _sqlite3_uri_int64 = (Module['_sqlite3_uri_int64'] = function () {\n      return (_sqlite3_uri_int64 = Module['_sqlite3_uri_int64'] =\n        Module['asm']['sqlite3_uri_int64']).apply(null, arguments);\n    });\n\n    var _sqlite3_db_name = (Module['_sqlite3_db_name'] = function () {\n      return (_sqlite3_db_name = Module['_sqlite3_db_name'] =\n        Module['asm']['sqlite3_db_name']).apply(null, arguments);\n    });\n\n    var _sqlite3_db_filename = (Module['_sqlite3_db_filename'] = function () {\n      return (_sqlite3_db_filename = Module['_sqlite3_db_filename'] =\n        Module['asm']['sqlite3_db_filename']).apply(null, arguments);\n    });\n\n    var _sqlite3_compileoption_used = (Module['_sqlite3_compileoption_used'] =\n      function () {\n        return (_sqlite3_compileoption_used = Module[\n          '_sqlite3_compileoption_used'\n        ] =\n          Module['asm']['sqlite3_compileoption_used']).apply(null, arguments);\n      });\n\n    var _sqlite3_compileoption_get = (Module['_sqlite3_compileoption_get'] =\n      function () {\n        return (_sqlite3_compileoption_get = Module[\n          '_sqlite3_compileoption_get'\n        ] =\n          Module['asm']['sqlite3_compileoption_get']).apply(null, arguments);\n      });\n\n    var _sqlite3session_diff = (Module['_sqlite3session_diff'] = function () {\n      return (_sqlite3session_diff = Module['_sqlite3session_diff'] =\n        Module['asm']['sqlite3session_diff']).apply(null, arguments);\n    });\n\n    var _sqlite3session_attach = (Module['_sqlite3session_attach'] =\n      function () {\n        return (_sqlite3session_attach = Module['_sqlite3session_attach'] =\n          Module['asm']['sqlite3session_attach']).apply(null, arguments);\n      });\n\n    var _sqlite3session_create = (Module['_sqlite3session_create'] =\n      function () {\n        return (_sqlite3session_create = Module['_sqlite3session_create'] =\n          Module['asm']['sqlite3session_create']).apply(null, arguments);\n      });\n\n    var _sqlite3session_delete = (Module['_sqlite3session_delete'] =\n      function () {\n        return (_sqlite3session_delete = Module['_sqlite3session_delete'] =\n          Module['asm']['sqlite3session_delete']).apply(null, arguments);\n      });\n\n    var _sqlite3session_table_filter = (Module['_sqlite3session_table_filter'] =\n      function () {\n        return (_sqlite3session_table_filter = Module[\n          '_sqlite3session_table_filter'\n        ] =\n          Module['asm']['sqlite3session_table_filter']).apply(null, arguments);\n      });\n\n    var _sqlite3session_changeset = (Module['_sqlite3session_changeset'] =\n      function () {\n        return (_sqlite3session_changeset = Module[\n          '_sqlite3session_changeset'\n        ] =\n          Module['asm']['sqlite3session_changeset']).apply(null, arguments);\n      });\n\n    var _sqlite3session_changeset_strm = (Module[\n      '_sqlite3session_changeset_strm'\n    ] = function () {\n      return (_sqlite3session_changeset_strm = Module[\n        '_sqlite3session_changeset_strm'\n      ] =\n        Module['asm']['sqlite3session_changeset_strm']).apply(null, arguments);\n    });\n\n    var _sqlite3session_patchset_strm = (Module[\n      '_sqlite3session_patchset_strm'\n    ] = function () {\n      return (_sqlite3session_patchset_strm = Module[\n        '_sqlite3session_patchset_strm'\n      ] =\n        Module['asm']['sqlite3session_patchset_strm']).apply(null, arguments);\n    });\n\n    var _sqlite3session_patchset = (Module['_sqlite3session_patchset'] =\n      function () {\n        return (_sqlite3session_patchset = Module['_sqlite3session_patchset'] =\n          Module['asm']['sqlite3session_patchset']).apply(null, arguments);\n      });\n\n    var _sqlite3session_enable = (Module['_sqlite3session_enable'] =\n      function () {\n        return (_sqlite3session_enable = Module['_sqlite3session_enable'] =\n          Module['asm']['sqlite3session_enable']).apply(null, arguments);\n      });\n\n    var _sqlite3session_indirect = (Module['_sqlite3session_indirect'] =\n      function () {\n        return (_sqlite3session_indirect = Module['_sqlite3session_indirect'] =\n          Module['asm']['sqlite3session_indirect']).apply(null, arguments);\n      });\n\n    var _sqlite3session_isempty = (Module['_sqlite3session_isempty'] =\n      function () {\n        return (_sqlite3session_isempty = Module['_sqlite3session_isempty'] =\n          Module['asm']['sqlite3session_isempty']).apply(null, arguments);\n      });\n\n    var _sqlite3session_memory_used = (Module['_sqlite3session_memory_used'] =\n      function () {\n        return (_sqlite3session_memory_used = Module[\n          '_sqlite3session_memory_used'\n        ] =\n          Module['asm']['sqlite3session_memory_used']).apply(null, arguments);\n      });\n\n    var _sqlite3session_object_config = (Module[\n      '_sqlite3session_object_config'\n    ] = function () {\n      return (_sqlite3session_object_config = Module[\n        '_sqlite3session_object_config'\n      ] =\n        Module['asm']['sqlite3session_object_config']).apply(null, arguments);\n    });\n\n    var _sqlite3session_changeset_size = (Module[\n      '_sqlite3session_changeset_size'\n    ] = function () {\n      return (_sqlite3session_changeset_size = Module[\n        '_sqlite3session_changeset_size'\n      ] =\n        Module['asm']['sqlite3session_changeset_size']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_start = (Module['_sqlite3changeset_start'] =\n      function () {\n        return (_sqlite3changeset_start = Module['_sqlite3changeset_start'] =\n          Module['asm']['sqlite3changeset_start']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_start_v2 = (Module['_sqlite3changeset_start_v2'] =\n      function () {\n        return (_sqlite3changeset_start_v2 = Module[\n          '_sqlite3changeset_start_v2'\n        ] =\n          Module['asm']['sqlite3changeset_start_v2']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_start_strm = (Module['_sqlite3changeset_start_strm'] =\n      function () {\n        return (_sqlite3changeset_start_strm = Module[\n          '_sqlite3changeset_start_strm'\n        ] =\n          Module['asm']['sqlite3changeset_start_strm']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_start_v2_strm = (Module[\n      '_sqlite3changeset_start_v2_strm'\n    ] = function () {\n      return (_sqlite3changeset_start_v2_strm = Module[\n        '_sqlite3changeset_start_v2_strm'\n      ] =\n        Module['asm']['sqlite3changeset_start_v2_strm']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_next = (Module['_sqlite3changeset_next'] =\n      function () {\n        return (_sqlite3changeset_next = Module['_sqlite3changeset_next'] =\n          Module['asm']['sqlite3changeset_next']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_op = (Module['_sqlite3changeset_op'] = function () {\n      return (_sqlite3changeset_op = Module['_sqlite3changeset_op'] =\n        Module['asm']['sqlite3changeset_op']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_pk = (Module['_sqlite3changeset_pk'] = function () {\n      return (_sqlite3changeset_pk = Module['_sqlite3changeset_pk'] =\n        Module['asm']['sqlite3changeset_pk']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_old = (Module['_sqlite3changeset_old'] = function () {\n      return (_sqlite3changeset_old = Module['_sqlite3changeset_old'] =\n        Module['asm']['sqlite3changeset_old']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_new = (Module['_sqlite3changeset_new'] = function () {\n      return (_sqlite3changeset_new = Module['_sqlite3changeset_new'] =\n        Module['asm']['sqlite3changeset_new']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_conflict = (Module['_sqlite3changeset_conflict'] =\n      function () {\n        return (_sqlite3changeset_conflict = Module[\n          '_sqlite3changeset_conflict'\n        ] =\n          Module['asm']['sqlite3changeset_conflict']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_fk_conflicts = (Module[\n      '_sqlite3changeset_fk_conflicts'\n    ] = function () {\n      return (_sqlite3changeset_fk_conflicts = Module[\n        '_sqlite3changeset_fk_conflicts'\n      ] =\n        Module['asm']['sqlite3changeset_fk_conflicts']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_finalize = (Module['_sqlite3changeset_finalize'] =\n      function () {\n        return (_sqlite3changeset_finalize = Module[\n          '_sqlite3changeset_finalize'\n        ] =\n          Module['asm']['sqlite3changeset_finalize']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_invert = (Module['_sqlite3changeset_invert'] =\n      function () {\n        return (_sqlite3changeset_invert = Module['_sqlite3changeset_invert'] =\n          Module['asm']['sqlite3changeset_invert']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_invert_strm = (Module[\n      '_sqlite3changeset_invert_strm'\n    ] = function () {\n      return (_sqlite3changeset_invert_strm = Module[\n        '_sqlite3changeset_invert_strm'\n      ] =\n        Module['asm']['sqlite3changeset_invert_strm']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_apply_v2 = (Module['_sqlite3changeset_apply_v2'] =\n      function () {\n        return (_sqlite3changeset_apply_v2 = Module[\n          '_sqlite3changeset_apply_v2'\n        ] =\n          Module['asm']['sqlite3changeset_apply_v2']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_apply = (Module['_sqlite3changeset_apply'] =\n      function () {\n        return (_sqlite3changeset_apply = Module['_sqlite3changeset_apply'] =\n          Module['asm']['sqlite3changeset_apply']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_apply_v2_strm = (Module[\n      '_sqlite3changeset_apply_v2_strm'\n    ] = function () {\n      return (_sqlite3changeset_apply_v2_strm = Module[\n        '_sqlite3changeset_apply_v2_strm'\n      ] =\n        Module['asm']['sqlite3changeset_apply_v2_strm']).apply(null, arguments);\n    });\n\n    var _sqlite3changeset_apply_strm = (Module['_sqlite3changeset_apply_strm'] =\n      function () {\n        return (_sqlite3changeset_apply_strm = Module[\n          '_sqlite3changeset_apply_strm'\n        ] =\n          Module['asm']['sqlite3changeset_apply_strm']).apply(null, arguments);\n      });\n\n    var _sqlite3changegroup_new = (Module['_sqlite3changegroup_new'] =\n      function () {\n        return (_sqlite3changegroup_new = Module['_sqlite3changegroup_new'] =\n          Module['asm']['sqlite3changegroup_new']).apply(null, arguments);\n      });\n\n    var _sqlite3changegroup_add = (Module['_sqlite3changegroup_add'] =\n      function () {\n        return (_sqlite3changegroup_add = Module['_sqlite3changegroup_add'] =\n          Module['asm']['sqlite3changegroup_add']).apply(null, arguments);\n      });\n\n    var _sqlite3changegroup_output = (Module['_sqlite3changegroup_output'] =\n      function () {\n        return (_sqlite3changegroup_output = Module[\n          '_sqlite3changegroup_output'\n        ] =\n          Module['asm']['sqlite3changegroup_output']).apply(null, arguments);\n      });\n\n    var _sqlite3changegroup_add_strm = (Module['_sqlite3changegroup_add_strm'] =\n      function () {\n        return (_sqlite3changegroup_add_strm = Module[\n          '_sqlite3changegroup_add_strm'\n        ] =\n          Module['asm']['sqlite3changegroup_add_strm']).apply(null, arguments);\n      });\n\n    var _sqlite3changegroup_output_strm = (Module[\n      '_sqlite3changegroup_output_strm'\n    ] = function () {\n      return (_sqlite3changegroup_output_strm = Module[\n        '_sqlite3changegroup_output_strm'\n      ] =\n        Module['asm']['sqlite3changegroup_output_strm']).apply(null, arguments);\n    });\n\n    var _sqlite3changegroup_delete = (Module['_sqlite3changegroup_delete'] =\n      function () {\n        return (_sqlite3changegroup_delete = Module[\n          '_sqlite3changegroup_delete'\n        ] =\n          Module['asm']['sqlite3changegroup_delete']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_concat = (Module['_sqlite3changeset_concat'] =\n      function () {\n        return (_sqlite3changeset_concat = Module['_sqlite3changeset_concat'] =\n          Module['asm']['sqlite3changeset_concat']).apply(null, arguments);\n      });\n\n    var _sqlite3changeset_concat_strm = (Module[\n      '_sqlite3changeset_concat_strm'\n    ] = function () {\n      return (_sqlite3changeset_concat_strm = Module[\n        '_sqlite3changeset_concat_strm'\n      ] =\n        Module['asm']['sqlite3changeset_concat_strm']).apply(null, arguments);\n    });\n\n    var _sqlite3session_config = (Module['_sqlite3session_config'] =\n      function () {\n        return (_sqlite3session_config = Module['_sqlite3session_config'] =\n          Module['asm']['sqlite3session_config']).apply(null, arguments);\n      });\n\n    var _sqlite3_sourceid = (Module['_sqlite3_sourceid'] = function () {\n      return (_sqlite3_sourceid = Module['_sqlite3_sourceid'] =\n        Module['asm']['sqlite3_sourceid']).apply(null, arguments);\n    });\n\n    var _sqlite3_wasm_pstack_ptr = (Module['_sqlite3_wasm_pstack_ptr'] =\n      function () {\n        return (_sqlite3_wasm_pstack_ptr = Module['_sqlite3_wasm_pstack_ptr'] =\n          Module['asm']['sqlite3_wasm_pstack_ptr']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_pstack_restore = (Module['_sqlite3_wasm_pstack_restore'] =\n      function () {\n        return (_sqlite3_wasm_pstack_restore = Module[\n          '_sqlite3_wasm_pstack_restore'\n        ] =\n          Module['asm']['sqlite3_wasm_pstack_restore']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_pstack_alloc = (Module['_sqlite3_wasm_pstack_alloc'] =\n      function () {\n        return (_sqlite3_wasm_pstack_alloc = Module[\n          '_sqlite3_wasm_pstack_alloc'\n        ] =\n          Module['asm']['sqlite3_wasm_pstack_alloc']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_pstack_remaining = (Module[\n      '_sqlite3_wasm_pstack_remaining'\n    ] = function () {\n      return (_sqlite3_wasm_pstack_remaining = Module[\n        '_sqlite3_wasm_pstack_remaining'\n      ] =\n        Module['asm']['sqlite3_wasm_pstack_remaining']).apply(null, arguments);\n    });\n\n    var _sqlite3_wasm_pstack_quota = (Module['_sqlite3_wasm_pstack_quota'] =\n      function () {\n        return (_sqlite3_wasm_pstack_quota = Module[\n          '_sqlite3_wasm_pstack_quota'\n        ] =\n          Module['asm']['sqlite3_wasm_pstack_quota']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_db_error = (Module['_sqlite3_wasm_db_error'] =\n      function () {\n        return (_sqlite3_wasm_db_error = Module['_sqlite3_wasm_db_error'] =\n          Module['asm']['sqlite3_wasm_db_error']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_test_struct = (Module['_sqlite3_wasm_test_struct'] =\n      function () {\n        return (_sqlite3_wasm_test_struct = Module[\n          '_sqlite3_wasm_test_struct'\n        ] =\n          Module['asm']['sqlite3_wasm_test_struct']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_enum_json = (Module['_sqlite3_wasm_enum_json'] =\n      function () {\n        return (_sqlite3_wasm_enum_json = Module['_sqlite3_wasm_enum_json'] =\n          Module['asm']['sqlite3_wasm_enum_json']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_vfs_unlink = (Module['_sqlite3_wasm_vfs_unlink'] =\n      function () {\n        return (_sqlite3_wasm_vfs_unlink = Module['_sqlite3_wasm_vfs_unlink'] =\n          Module['asm']['sqlite3_wasm_vfs_unlink']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_db_vfs = (Module['_sqlite3_wasm_db_vfs'] = function () {\n      return (_sqlite3_wasm_db_vfs = Module['_sqlite3_wasm_db_vfs'] =\n        Module['asm']['sqlite3_wasm_db_vfs']).apply(null, arguments);\n    });\n\n    var _sqlite3_wasm_db_reset = (Module['_sqlite3_wasm_db_reset'] =\n      function () {\n        return (_sqlite3_wasm_db_reset = Module['_sqlite3_wasm_db_reset'] =\n          Module['asm']['sqlite3_wasm_db_reset']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_db_export_chunked = (Module[\n      '_sqlite3_wasm_db_export_chunked'\n    ] = function () {\n      return (_sqlite3_wasm_db_export_chunked = Module[\n        '_sqlite3_wasm_db_export_chunked'\n      ] =\n        Module['asm']['sqlite3_wasm_db_export_chunked']).apply(null, arguments);\n    });\n\n    var _sqlite3_wasm_db_serialize = (Module['_sqlite3_wasm_db_serialize'] =\n      function () {\n        return (_sqlite3_wasm_db_serialize = Module[\n          '_sqlite3_wasm_db_serialize'\n        ] =\n          Module['asm']['sqlite3_wasm_db_serialize']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_vfs_create_file = (Module[\n      '_sqlite3_wasm_vfs_create_file'\n    ] = function () {\n      return (_sqlite3_wasm_vfs_create_file = Module[\n        '_sqlite3_wasm_vfs_create_file'\n      ] =\n        Module['asm']['sqlite3_wasm_vfs_create_file']).apply(null, arguments);\n    });\n\n    var _sqlite3_wasm_posix_create_file = (Module[\n      '_sqlite3_wasm_posix_create_file'\n    ] = function () {\n      return (_sqlite3_wasm_posix_create_file = Module[\n        '_sqlite3_wasm_posix_create_file'\n      ] =\n        Module['asm']['sqlite3_wasm_posix_create_file']).apply(null, arguments);\n    });\n\n    var _sqlite3_wasm_kvvfsMakeKeyOnPstack = (Module[\n      '_sqlite3_wasm_kvvfsMakeKeyOnPstack'\n    ] = function () {\n      return (_sqlite3_wasm_kvvfsMakeKeyOnPstack = Module[\n        '_sqlite3_wasm_kvvfsMakeKeyOnPstack'\n      ] =\n        Module['asm']['sqlite3_wasm_kvvfsMakeKeyOnPstack']).apply(\n        null,\n        arguments,\n      );\n    });\n\n    var _sqlite3_wasm_kvvfs_methods = (Module['_sqlite3_wasm_kvvfs_methods'] =\n      function () {\n        return (_sqlite3_wasm_kvvfs_methods = Module[\n          '_sqlite3_wasm_kvvfs_methods'\n        ] =\n          Module['asm']['sqlite3_wasm_kvvfs_methods']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_vtab_config = (Module['_sqlite3_wasm_vtab_config'] =\n      function () {\n        return (_sqlite3_wasm_vtab_config = Module[\n          '_sqlite3_wasm_vtab_config'\n        ] =\n          Module['asm']['sqlite3_wasm_vtab_config']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_db_config_ip = (Module['_sqlite3_wasm_db_config_ip'] =\n      function () {\n        return (_sqlite3_wasm_db_config_ip = Module[\n          '_sqlite3_wasm_db_config_ip'\n        ] =\n          Module['asm']['sqlite3_wasm_db_config_ip']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_db_config_pii = (Module['_sqlite3_wasm_db_config_pii'] =\n      function () {\n        return (_sqlite3_wasm_db_config_pii = Module[\n          '_sqlite3_wasm_db_config_pii'\n        ] =\n          Module['asm']['sqlite3_wasm_db_config_pii']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_db_config_s = (Module['_sqlite3_wasm_db_config_s'] =\n      function () {\n        return (_sqlite3_wasm_db_config_s = Module[\n          '_sqlite3_wasm_db_config_s'\n        ] =\n          Module['asm']['sqlite3_wasm_db_config_s']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_config_i = (Module['_sqlite3_wasm_config_i'] =\n      function () {\n        return (_sqlite3_wasm_config_i = Module['_sqlite3_wasm_config_i'] =\n          Module['asm']['sqlite3_wasm_config_i']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_config_ii = (Module['_sqlite3_wasm_config_ii'] =\n      function () {\n        return (_sqlite3_wasm_config_ii = Module['_sqlite3_wasm_config_ii'] =\n          Module['asm']['sqlite3_wasm_config_ii']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_config_j = (Module['_sqlite3_wasm_config_j'] =\n      function () {\n        return (_sqlite3_wasm_config_j = Module['_sqlite3_wasm_config_j'] =\n          Module['asm']['sqlite3_wasm_config_j']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_init_wasmfs = (Module['_sqlite3_wasm_init_wasmfs'] =\n      function () {\n        return (_sqlite3_wasm_init_wasmfs = Module[\n          '_sqlite3_wasm_init_wasmfs'\n        ] =\n          Module['asm']['sqlite3_wasm_init_wasmfs']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_test_intptr = (Module['_sqlite3_wasm_test_intptr'] =\n      function () {\n        return (_sqlite3_wasm_test_intptr = Module[\n          '_sqlite3_wasm_test_intptr'\n        ] =\n          Module['asm']['sqlite3_wasm_test_intptr']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_test_voidptr = (Module['_sqlite3_wasm_test_voidptr'] =\n      function () {\n        return (_sqlite3_wasm_test_voidptr = Module[\n          '_sqlite3_wasm_test_voidptr'\n        ] =\n          Module['asm']['sqlite3_wasm_test_voidptr']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_test_int64_max = (Module['_sqlite3_wasm_test_int64_max'] =\n      function () {\n        return (_sqlite3_wasm_test_int64_max = Module[\n          '_sqlite3_wasm_test_int64_max'\n        ] =\n          Module['asm']['sqlite3_wasm_test_int64_max']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_test_int64_min = (Module['_sqlite3_wasm_test_int64_min'] =\n      function () {\n        return (_sqlite3_wasm_test_int64_min = Module[\n          '_sqlite3_wasm_test_int64_min'\n        ] =\n          Module['asm']['sqlite3_wasm_test_int64_min']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_test_int64_times2 = (Module[\n      '_sqlite3_wasm_test_int64_times2'\n    ] = function () {\n      return (_sqlite3_wasm_test_int64_times2 = Module[\n        '_sqlite3_wasm_test_int64_times2'\n      ] =\n        Module['asm']['sqlite3_wasm_test_int64_times2']).apply(null, arguments);\n    });\n\n    var _sqlite3_wasm_test_int64_minmax = (Module[\n      '_sqlite3_wasm_test_int64_minmax'\n    ] = function () {\n      return (_sqlite3_wasm_test_int64_minmax = Module[\n        '_sqlite3_wasm_test_int64_minmax'\n      ] =\n        Module['asm']['sqlite3_wasm_test_int64_minmax']).apply(null, arguments);\n    });\n\n    var _sqlite3_wasm_test_int64ptr = (Module['_sqlite3_wasm_test_int64ptr'] =\n      function () {\n        return (_sqlite3_wasm_test_int64ptr = Module[\n          '_sqlite3_wasm_test_int64ptr'\n        ] =\n          Module['asm']['sqlite3_wasm_test_int64ptr']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_test_stack_overflow = (Module[\n      '_sqlite3_wasm_test_stack_overflow'\n    ] = function () {\n      return (_sqlite3_wasm_test_stack_overflow = Module[\n        '_sqlite3_wasm_test_stack_overflow'\n      ] =\n        Module['asm']['sqlite3_wasm_test_stack_overflow']).apply(\n        null,\n        arguments,\n      );\n    });\n\n    var _sqlite3_wasm_test_str_hello = (Module['_sqlite3_wasm_test_str_hello'] =\n      function () {\n        return (_sqlite3_wasm_test_str_hello = Module[\n          '_sqlite3_wasm_test_str_hello'\n        ] =\n          Module['asm']['sqlite3_wasm_test_str_hello']).apply(null, arguments);\n      });\n\n    var _sqlite3_wasm_SQLTester_strglob = (Module[\n      '_sqlite3_wasm_SQLTester_strglob'\n    ] = function () {\n      return (_sqlite3_wasm_SQLTester_strglob = Module[\n        '_sqlite3_wasm_SQLTester_strglob'\n      ] =\n        Module['asm']['sqlite3_wasm_SQLTester_strglob']).apply(null, arguments);\n    });\n\n    var _malloc = (Module['_malloc'] = function () {\n      return (_malloc = Module['_malloc'] = Module['asm']['malloc']).apply(\n        null,\n        arguments,\n      );\n    });\n\n    var _free = (Module['_free'] = function () {\n      return (_free = Module['_free'] = Module['asm']['free']).apply(\n        null,\n        arguments,\n      );\n    });\n\n    var _realloc = (Module['_realloc'] = function () {\n      return (_realloc = Module['_realloc'] = Module['asm']['realloc']).apply(\n        null,\n        arguments,\n      );\n    });\n\n    var _emscripten_builtin_memalign = (Module['_emscripten_builtin_memalign'] =\n      function () {\n        return (_emscripten_builtin_memalign = Module[\n          '_emscripten_builtin_memalign'\n        ] =\n          Module['asm']['emscripten_builtin_memalign']).apply(null, arguments);\n      });\n\n    var stackSave = (Module['stackSave'] = function () {\n      return (stackSave = Module['stackSave'] =\n        Module['asm']['stackSave']).apply(null, arguments);\n    });\n\n    var stackRestore = (Module['stackRestore'] = function () {\n      return (stackRestore = Module['stackRestore'] =\n        Module['asm']['stackRestore']).apply(null, arguments);\n    });\n\n    var stackAlloc = (Module['stackAlloc'] = function () {\n      return (stackAlloc = Module['stackAlloc'] =\n        Module['asm']['stackAlloc']).apply(null, arguments);\n    });\n\n    Module['wasmMemory'] = wasmMemory;\n\n    var calledRun;\n\n    dependenciesFulfilled = function runCaller() {\n      if (!calledRun) run();\n      if (!calledRun) dependenciesFulfilled = runCaller;\n    };\n\n    function run(args) {\n      args = args || arguments_;\n\n      if (runDependencies > 0) {\n        return;\n      }\n\n      preRun();\n\n      if (runDependencies > 0) {\n        return;\n      }\n\n      function doRun() {\n        if (calledRun) return;\n        calledRun = true;\n        Module['calledRun'] = true;\n\n        if (ABORT) return;\n\n        initRuntime();\n\n        readyPromiseResolve(Module);\n        if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n\n        postRun();\n      }\n\n      if (Module['setStatus']) {\n        Module['setStatus']('Running...');\n        setTimeout(function () {\n          setTimeout(function () {\n            Module['setStatus']('');\n          }, 1);\n          doRun();\n        }, 1);\n      } else {\n        doRun();\n      }\n    }\n\n    if (Module['preInit']) {\n      if (typeof Module['preInit'] == 'function')\n        Module['preInit'] = [Module['preInit']];\n      while (Module['preInit'].length > 0) {\n        Module['preInit'].pop()();\n      }\n    }\n\n    run();\n\n    if (!Module.postRun) Module.postRun = [];\n    Module.postRun.push(function (Module) {\n      'use strict';\n\n      'use strict';\n      globalThis.sqlite3ApiBootstrap = function sqlite3ApiBootstrap(\n        apiConfig = globalThis.sqlite3ApiConfig ||\n          sqlite3ApiBootstrap.defaultConfig,\n      ) {\n        if (sqlite3ApiBootstrap.sqlite3) {\n          console.warn(\n            'sqlite3ApiBootstrap() called multiple times.',\n            'Config and external initializers are ignored on calls after the first.',\n          );\n          return sqlite3ApiBootstrap.sqlite3;\n        }\n        const config = Object.assign(\n          Object.create(null),\n          {\n            exports: undefined,\n            memory: undefined,\n            bigIntEnabled: (() => {\n              if ('undefined' !== typeof Module) {\n                return !!Module.HEAPU64;\n              }\n              return !!globalThis.BigInt64Array;\n            })(),\n            debug: console.debug.bind(console),\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n            log: console.log.bind(console),\n            wasmfsOpfsDir: '/opfs',\n\n            useStdAlloc: false,\n          },\n          apiConfig || {},\n        );\n\n        Object.assign(\n          config,\n          {\n            allocExportName: config.useStdAlloc ? 'malloc' : 'sqlite3_malloc',\n            deallocExportName: config.useStdAlloc ? 'free' : 'sqlite3_free',\n            reallocExportName: config.useStdAlloc\n              ? 'realloc'\n              : 'sqlite3_realloc',\n          },\n          config,\n        );\n\n        ['exports', 'memory', 'wasmfsOpfsDir'].forEach((k) => {\n          if ('function' === typeof config[k]) {\n            config[k] = config[k]();\n          }\n        });\n\n        const capi = Object.create(null);\n\n        const wasm = Object.create(null);\n\n        const __rcStr = (rc) => {\n          return (\n            (capi.sqlite3_js_rc_str && capi.sqlite3_js_rc_str(rc)) ||\n            'Unknown result code #' + rc\n          );\n        };\n\n        const __isInt = (n) => 'number' === typeof n && n === (n | 0);\n\n        class SQLite3Error extends Error {\n          constructor(...args) {\n            let rc;\n            if (args.length) {\n              if (__isInt(args[0])) {\n                rc = args[0];\n                if (1 === args.length) {\n                  super(__rcStr(args[0]));\n                } else {\n                  const rcStr = __rcStr(rc);\n                  if ('object' === typeof args[1]) {\n                    super(rcStr, args[1]);\n                  } else {\n                    args[0] = rcStr + ':';\n                    super(args.join(' '));\n                  }\n                }\n              } else {\n                if (2 === args.length && 'object' === typeof args[1]) {\n                  super(...args);\n                } else {\n                  super(args.join(' '));\n                }\n              }\n            }\n            this.resultCode = rc || capi.SQLITE_ERROR;\n            this.name = 'SQLite3Error';\n          }\n        }\n\n        SQLite3Error.toss = (...args) => {\n          throw new SQLite3Error(...args);\n        };\n        const toss3 = SQLite3Error.toss;\n\n        if (config.wasmfsOpfsDir && !/^\\/[^/]+$/.test(config.wasmfsOpfsDir)) {\n          toss3(\n            \"config.wasmfsOpfsDir must be falsy or in the form '/dir-name'.\",\n          );\n        }\n\n        const isInt32 = (n) => {\n          return (\n            'bigint' !== typeof n &&\n            !!(n === (n | 0) && n <= 2147483647 && n >= -2147483648)\n          );\n        };\n\n        const bigIntFits64 = function f(b) {\n          if (!f._max) {\n            f._max = BigInt('0x7fffffffffffffff');\n            f._min = ~f._max;\n          }\n          return b >= f._min && b <= f._max;\n        };\n\n        const bigIntFits32 = (b) => b >= -0x7fffffffn - 1n && b <= 0x7fffffffn;\n\n        const bigIntFitsDouble = function f(b) {\n          if (!f._min) {\n            f._min = Number.MIN_SAFE_INTEGER;\n            f._max = Number.MAX_SAFE_INTEGER;\n          }\n          return b >= f._min && b <= f._max;\n        };\n\n        const isTypedArray = (v) => {\n          return v && v.constructor && isInt32(v.constructor.BYTES_PER_ELEMENT)\n            ? v\n            : false;\n        };\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n\n        const isSharedTypedArray = (aTypedArray) =>\n          aTypedArray.buffer instanceof __SAB;\n\n        const typedArrayPart = (aTypedArray, begin, end) => {\n          return isSharedTypedArray(aTypedArray)\n            ? aTypedArray.slice(begin, end)\n            : aTypedArray.subarray(begin, end);\n        };\n\n        const isBindableTypedArray = (v) => {\n          return (\n            v &&\n            (v instanceof Uint8Array ||\n              v instanceof Int8Array ||\n              v instanceof ArrayBuffer)\n          );\n        };\n\n        const isSQLableTypedArray = (v) => {\n          return (\n            v &&\n            (v instanceof Uint8Array ||\n              v instanceof Int8Array ||\n              v instanceof ArrayBuffer)\n          );\n        };\n\n        const affirmBindableTypedArray = (v) => {\n          return (\n            isBindableTypedArray(v) ||\n            toss3('Value is not of a supported TypedArray type.')\n          );\n        };\n\n        const utf8Decoder = new TextDecoder('utf-8');\n\n        const typedArrayToString = function (typedArray, begin, end) {\n          return utf8Decoder.decode(typedArrayPart(typedArray, begin, end));\n        };\n\n        const flexibleString = function (v) {\n          if (isSQLableTypedArray(v)) {\n            return typedArrayToString(\n              v instanceof ArrayBuffer ? new Uint8Array(v) : v,\n            );\n          } else if (Array.isArray(v)) return v.join('');\n          else if (wasm.isPtr(v)) v = wasm.cstrToJs(v);\n          return v;\n        };\n\n        class WasmAllocError extends Error {\n          constructor(...args) {\n            if (2 === args.length && 'object' === typeof args[1]) {\n              super(...args);\n            } else if (args.length) {\n              super(args.join(' '));\n            } else {\n              super('Allocation failed.');\n            }\n            this.resultCode = capi.SQLITE_NOMEM;\n            this.name = 'WasmAllocError';\n          }\n        }\n\n        WasmAllocError.toss = (...args) => {\n          throw new WasmAllocError(...args);\n        };\n\n        Object.assign(capi, {\n          sqlite3_bind_blob: undefined,\n\n          sqlite3_bind_text: undefined,\n\n          sqlite3_create_function_v2: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n            xDestroy,\n          ) => {},\n\n          sqlite3_create_function: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n          ) => {},\n\n          sqlite3_create_window_function: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xStep,\n            xFinal,\n            xValue,\n            xInverse,\n            xDestroy,\n          ) => {},\n\n          sqlite3_prepare_v3: (\n            dbPtr,\n            sql,\n            sqlByteLen,\n            prepFlags,\n            stmtPtrPtr,\n            strPtrPtr,\n          ) => {},\n\n          sqlite3_prepare_v2: (\n            dbPtr,\n            sql,\n            sqlByteLen,\n            stmtPtrPtr,\n            strPtrPtr,\n          ) => {},\n\n          sqlite3_exec: (pDb, sql, callback, pVoid, pErrMsg) => {},\n\n          sqlite3_randomness: (n, outPtr) => {},\n        });\n\n        const util = {\n          affirmBindableTypedArray,\n          flexibleString,\n          bigIntFits32,\n          bigIntFits64,\n          bigIntFitsDouble,\n          isBindableTypedArray,\n          isInt32,\n          isSQLableTypedArray,\n          isTypedArray,\n          typedArrayToString,\n          isUIThread: () =>\n            globalThis.window === globalThis && !!globalThis.document,\n\n          isSharedTypedArray,\n          toss: function (...args) {\n            throw new Error(args.join(' '));\n          },\n          toss3,\n          typedArrayPart,\n\n          affirmDbHeader: function (bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            const header = 'SQLite format 3';\n            if (header.length > bytes.byteLength) {\n              toss3('Input does not contain an SQLite3 database header.');\n            }\n            for (let i = 0; i < header.length; ++i) {\n              if (header.charCodeAt(i) !== bytes[i]) {\n                toss3('Input does not contain an SQLite3 database header.');\n              }\n            }\n          },\n\n          affirmIsDb: function (bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            const n = bytes.byteLength;\n            if (n < 512 || n % 512 !== 0) {\n              toss3('Byte array size', n, 'is invalid for an SQLite3 db.');\n            }\n            util.affirmDbHeader(bytes);\n          },\n        };\n\n        Object.assign(wasm, {\n          ptrSizeof: config.wasmPtrSizeof || 4,\n\n          ptrIR: config.wasmPtrIR || 'i32',\n\n          bigIntEnabled: !!config.bigIntEnabled,\n\n          exports:\n            config.exports ||\n            toss3('Missing API config.exports (WASM module exports).'),\n\n          memory:\n            config.memory ||\n            config.exports['memory'] ||\n            toss3(\n              'API config object requires a WebAssembly.Memory object',\n              'in either config.exports.memory (exported)',\n              'or config.memory (imported).',\n            ),\n\n          alloc: undefined,\n\n          realloc: undefined,\n\n          dealloc: undefined,\n        });\n\n        wasm.allocFromTypedArray = function (srcTypedArray) {\n          if (srcTypedArray instanceof ArrayBuffer) {\n            srcTypedArray = new Uint8Array(srcTypedArray);\n          }\n          affirmBindableTypedArray(srcTypedArray);\n          const pRet = wasm.alloc(srcTypedArray.byteLength || 1);\n          wasm\n            .heapForSize(srcTypedArray.constructor)\n            .set(srcTypedArray.byteLength ? srcTypedArray : [0], pRet);\n          return pRet;\n        };\n\n        {\n          const keyAlloc = config.allocExportName,\n            keyDealloc = config.deallocExportName,\n            keyRealloc = config.reallocExportName;\n          for (const key of [keyAlloc, keyDealloc, keyRealloc]) {\n            const f = wasm.exports[key];\n            if (!(f instanceof Function))\n              toss3('Missing required exports[', key, '] function.');\n          }\n\n          wasm.alloc = function f(n) {\n            return (\n              f.impl(n) ||\n              WasmAllocError.toss('Failed to allocate', n, ' bytes.')\n            );\n          };\n          wasm.alloc.impl = wasm.exports[keyAlloc];\n          wasm.realloc = function f(m, n) {\n            const m2 = f.impl(m, n);\n            return n\n              ? m2 || WasmAllocError.toss('Failed to reallocate', n, ' bytes.')\n              : 0;\n          };\n          wasm.realloc.impl = wasm.exports[keyRealloc];\n          wasm.dealloc = wasm.exports[keyDealloc];\n        }\n\n        wasm.compileOptionUsed = function f(optName) {\n          if (!arguments.length) {\n            if (f._result) return f._result;\n            else if (!f._opt) {\n              f._rx = /^([^=]+)=(.+)/;\n              f._rxInt = /^-?\\d+$/;\n              f._opt = function (opt, rv) {\n                const m = f._rx.exec(opt);\n                rv[0] = m ? m[1] : opt;\n                rv[1] = m ? (f._rxInt.test(m[2]) ? +m[2] : m[2]) : true;\n              };\n            }\n            const rc = {},\n              ov = [0, 0];\n            let i = 0,\n              k;\n            while ((k = capi.sqlite3_compileoption_get(i++))) {\n              f._opt(k, ov);\n              rc[ov[0]] = ov[1];\n            }\n            return (f._result = rc);\n          } else if (Array.isArray(optName)) {\n            const rc = {};\n            optName.forEach((v) => {\n              rc[v] = capi.sqlite3_compileoption_used(v);\n            });\n            return rc;\n          } else if ('object' === typeof optName) {\n            Object.keys(optName).forEach((k) => {\n              optName[k] = capi.sqlite3_compileoption_used(k);\n            });\n            return optName;\n          }\n          return 'string' === typeof optName\n            ? !!capi.sqlite3_compileoption_used(optName)\n            : false;\n        };\n\n        wasm.pstack = Object.assign(Object.create(null), {\n          restore: wasm.exports.sqlite3_wasm_pstack_restore,\n\n          alloc: function (n) {\n            if ('string' === typeof n && !(n = wasm.sizeofIR(n))) {\n              WasmAllocError.toss(\n                'Invalid value for pstack.alloc(',\n                arguments[0],\n                ')',\n              );\n            }\n            return (\n              wasm.exports.sqlite3_wasm_pstack_alloc(n) ||\n              WasmAllocError.toss(\n                'Could not allocate',\n                n,\n                'bytes from the pstack.',\n              )\n            );\n          },\n\n          allocChunks: function (n, sz) {\n            if ('string' === typeof sz && !(sz = wasm.sizeofIR(sz))) {\n              WasmAllocError.toss(\n                'Invalid size value for allocChunks(',\n                arguments[1],\n                ')',\n              );\n            }\n            const mem = wasm.pstack.alloc(n * sz);\n            const rc = [];\n            let i = 0,\n              offset = 0;\n            for (; i < n; ++i, offset += sz) rc.push(mem + offset);\n            return rc;\n          },\n\n          allocPtr: (n = 1, safePtrSize = true) => {\n            return 1 === n\n              ? wasm.pstack.alloc(safePtrSize ? 8 : wasm.ptrSizeof)\n              : wasm.pstack.allocChunks(n, safePtrSize ? 8 : wasm.ptrSizeof);\n          },\n\n          call: function (f) {\n            const stackPos = wasm.pstack.pointer;\n            try {\n              return f(sqlite3);\n            } finally {\n              wasm.pstack.restore(stackPos);\n            }\n          },\n        });\n        Object.defineProperties(wasm.pstack, {\n          pointer: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3_wasm_pstack_ptr,\n          },\n\n          quota: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3_wasm_pstack_quota,\n          },\n\n          remaining: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3_wasm_pstack_remaining,\n          },\n        });\n\n        capi.sqlite3_randomness = (...args) => {\n          if (\n            1 === args.length &&\n            util.isTypedArray(args[0]) &&\n            1 === args[0].BYTES_PER_ELEMENT\n          ) {\n            const ta = args[0];\n            if (0 === ta.byteLength) {\n              wasm.exports.sqlite3_randomness(0, 0);\n              return ta;\n            }\n            const stack = wasm.pstack.pointer;\n            try {\n              let n = ta.byteLength,\n                offset = 0;\n              const r = wasm.exports.sqlite3_randomness;\n              const heap = wasm.heap8u();\n              const nAlloc = n < 512 ? n : 512;\n              const ptr = wasm.pstack.alloc(nAlloc);\n              do {\n                const j = n > nAlloc ? nAlloc : n;\n                r(j, ptr);\n                ta.set(typedArrayPart(heap, ptr, ptr + j), offset);\n                n -= j;\n                offset += j;\n              } while (n > 0);\n            } catch (e) {\n              console.error(\n                'Highly unexpected (and ignored!) ' +\n                  'exception in sqlite3_randomness():',\n                e,\n              );\n            } finally {\n              wasm.pstack.restore(stack);\n            }\n            return ta;\n          }\n          wasm.exports.sqlite3_randomness(...args);\n        };\n\n        let __wasmfsOpfsDir = undefined;\n\n        capi.sqlite3_wasmfs_opfs_dir = function () {\n          if (undefined !== __wasmfsOpfsDir) return __wasmfsOpfsDir;\n\n          const pdir = config.wasmfsOpfsDir;\n          if (\n            !pdir ||\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle\n          ) {\n            return (__wasmfsOpfsDir = '');\n          }\n          try {\n            if (\n              pdir &&\n              0 ===\n                wasm.xCallWrapped(\n                  'sqlite3_wasm_init_wasmfs',\n                  'i32',\n                  ['string'],\n                  pdir,\n                )\n            ) {\n              return (__wasmfsOpfsDir = pdir);\n            } else {\n              return (__wasmfsOpfsDir = '');\n            }\n          } catch (e) {\n            return (__wasmfsOpfsDir = '');\n          }\n        };\n\n        capi.sqlite3_wasmfs_filename_is_persistent = function (name) {\n          const p = capi.sqlite3_wasmfs_opfs_dir();\n          return p && name ? name.startsWith(p + '/') : false;\n        };\n\n        capi.sqlite3_js_db_uses_vfs = function (pDb, vfsName, dbName = 0) {\n          try {\n            const pK = capi.sqlite3_vfs_find(vfsName);\n            if (!pK) return false;\n            else if (!pDb) {\n              return pK === capi.sqlite3_vfs_find(0) ? pK : false;\n            } else {\n              return pK === capi.sqlite3_js_db_vfs(pDb, dbName) ? pK : false;\n            }\n          } catch (e) {\n            return false;\n          }\n        };\n\n        capi.sqlite3_js_vfs_list = function () {\n          const rc = [];\n          let pVfs = capi.sqlite3_vfs_find(0);\n          while (pVfs) {\n            const oVfs = new capi.sqlite3_vfs(pVfs);\n            rc.push(wasm.cstrToJs(oVfs.$zName));\n            pVfs = oVfs.$pNext;\n            oVfs.dispose();\n          }\n          return rc;\n        };\n\n        capi.sqlite3_js_db_export = function (pDb, schema = 0) {\n          pDb = wasm.xWrap.testConvertArg('sqlite3*', pDb);\n          if (!pDb) toss3('Invalid sqlite3* argument.');\n          if (!wasm.bigIntEnabled) toss3('BigInt64 support is not enabled.');\n          const scope = wasm.scopedAllocPush();\n          let pOut;\n          try {\n            const pSize = wasm.scopedAlloc(8 + wasm.ptrSizeof);\n            const ppOut = pSize + 8;\n\n            const zSchema = schema\n              ? wasm.isPtr(schema)\n                ? schema\n                : wasm.scopedAllocCString('' + schema)\n              : 0;\n            let rc = wasm.exports.sqlite3_wasm_db_serialize(\n              pDb,\n              zSchema,\n              ppOut,\n              pSize,\n              0,\n            );\n            if (rc) {\n              toss3(\n                'Database serialization failed with code',\n                sqlite3.capi.sqlite3_js_rc_str(rc),\n              );\n            }\n            pOut = wasm.peekPtr(ppOut);\n            const nOut = wasm.peek(pSize, 'i64');\n            rc = nOut\n              ? wasm.heap8u().slice(pOut, pOut + Number(nOut))\n              : new Uint8Array();\n            return rc;\n          } finally {\n            if (pOut) wasm.exports.sqlite3_free(pOut);\n            wasm.scopedAllocPop(scope);\n          }\n        };\n\n        capi.sqlite3_js_db_vfs = (dbPointer, dbName = 0) =>\n          wasm.sqlite3_wasm_db_vfs(dbPointer, dbName);\n\n        capi.sqlite3_js_aggregate_context = (pCtx, n) => {\n          return (\n            capi.sqlite3_aggregate_context(pCtx, n) ||\n            (n\n              ? WasmAllocError.toss(\n                  'Cannot allocate',\n                  n,\n                  'bytes for sqlite3_aggregate_context()',\n                )\n              : 0)\n          );\n        };\n\n        capi.sqlite3_js_posix_create_file = function (filename, data, dataLen) {\n          let pData;\n          if (data && wasm.isPtr(data)) {\n            pData = data;\n          } else if (\n            data instanceof ArrayBuffer ||\n            data instanceof Uint8Array\n          ) {\n            pData = wasm.allocFromTypedArray(data);\n            if (arguments.length < 3 || !util.isInt32(dataLen) || dataLen < 0) {\n              dataLen = data.byteLength;\n            }\n          } else {\n            SQLite3Error.toss(\n              'Invalid 2nd argument for sqlite3_js_posix_create_file().',\n            );\n          }\n          try {\n            if (!util.isInt32(dataLen) || dataLen < 0) {\n              SQLite3Error.toss(\n                'Invalid 3rd argument for sqlite3_js_posix_create_file().',\n              );\n            }\n            const rc = wasm.sqlite3_wasm_posix_create_file(\n              filename,\n              pData,\n              dataLen,\n            );\n            if (rc)\n              SQLite3Error.toss(\n                'Creation of file failed with sqlite3 result code',\n                capi.sqlite3_js_rc_str(rc),\n              );\n          } finally {\n            wasm.dealloc(pData);\n          }\n        };\n\n        capi.sqlite3_js_vfs_create_file = function (\n          vfs,\n          filename,\n          data,\n          dataLen,\n        ) {\n          config.warn(\n            'sqlite3_js_vfs_create_file() is deprecated and',\n            'should be avoided because it can lead to C-level crashes.',\n            'See its documentation for alternative options.',\n          );\n          let pData;\n          if (data) {\n            if (wasm.isPtr(data)) {\n              pData = data;\n            } else if (data instanceof ArrayBuffer) {\n              data = new Uint8Array(data);\n            }\n            if (data instanceof Uint8Array) {\n              pData = wasm.allocFromTypedArray(data);\n              if (\n                arguments.length < 4 ||\n                !util.isInt32(dataLen) ||\n                dataLen < 0\n              ) {\n                dataLen = data.byteLength;\n              }\n            } else {\n              SQLite3Error.toss(\n                'Invalid 3rd argument type for sqlite3_js_vfs_create_file().',\n              );\n            }\n          } else {\n            pData = 0;\n          }\n          if (!util.isInt32(dataLen) || dataLen < 0) {\n            wasm.dealloc(pData);\n            SQLite3Error.toss(\n              'Invalid 4th argument for sqlite3_js_vfs_create_file().',\n            );\n          }\n          try {\n            const rc = wasm.sqlite3_wasm_vfs_create_file(\n              vfs,\n              filename,\n              pData,\n              dataLen,\n            );\n            if (rc)\n              SQLite3Error.toss(\n                'Creation of file failed with sqlite3 result code',\n                capi.sqlite3_js_rc_str(rc),\n              );\n          } finally {\n            wasm.dealloc(pData);\n          }\n        };\n\n        capi.sqlite3_js_sql_to_string = (sql) => {\n          if ('string' === typeof sql) {\n            return sql;\n          }\n          const x = flexibleString(v);\n          return x === v ? undefined : x;\n        };\n\n        if (util.isUIThread()) {\n          const __kvvfsInfo = function (which) {\n            const rc = Object.create(null);\n            rc.prefix = 'kvvfs-' + which;\n            rc.stores = [];\n            if ('session' === which || '' === which)\n              rc.stores.push(globalThis.sessionStorage);\n            if ('local' === which || '' === which)\n              rc.stores.push(globalThis.localStorage);\n            return rc;\n          };\n\n          capi.sqlite3_js_kvvfs_clear = function (which = '') {\n            let rc = 0;\n            const kvinfo = __kvvfsInfo(which);\n            kvinfo.stores.forEach((s) => {\n              const toRm = [];\n              let i;\n              for (i = 0; i < s.length; ++i) {\n                const k = s.key(i);\n                if (k.startsWith(kvinfo.prefix)) toRm.push(k);\n              }\n              toRm.forEach((kk) => s.removeItem(kk));\n              rc += toRm.length;\n            });\n            return rc;\n          };\n\n          capi.sqlite3_js_kvvfs_size = function (which = '') {\n            let sz = 0;\n            const kvinfo = __kvvfsInfo(which);\n            kvinfo.stores.forEach((s) => {\n              let i;\n              for (i = 0; i < s.length; ++i) {\n                const k = s.key(i);\n                if (k.startsWith(kvinfo.prefix)) {\n                  sz += k.length;\n                  sz += s.getItem(k).length;\n                }\n              }\n            });\n            return sz * 2;\n          };\n        }\n\n        capi.sqlite3_db_config = function (pDb, op, ...args) {\n          if (!this.s) {\n            this.s = wasm.xWrap('sqlite3_wasm_db_config_s', 'int', [\n              'sqlite3*',\n              'int',\n              'string:static',\n            ]);\n            this.pii = wasm.xWrap('sqlite3_wasm_db_config_pii', 'int', [\n              'sqlite3*',\n              'int',\n              '*',\n              'int',\n              'int',\n            ]);\n            this.ip = wasm.xWrap('sqlite3_wasm_db_config_ip', 'int', [\n              'sqlite3*',\n              'int',\n              'int',\n              '*',\n            ]);\n          }\n          switch (op) {\n            case capi.SQLITE_DBCONFIG_ENABLE_FKEY:\n            case capi.SQLITE_DBCONFIG_ENABLE_TRIGGER:\n            case capi.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER:\n            case capi.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION:\n            case capi.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE:\n            case capi.SQLITE_DBCONFIG_ENABLE_QPSG:\n            case capi.SQLITE_DBCONFIG_TRIGGER_EQP:\n            case capi.SQLITE_DBCONFIG_RESET_DATABASE:\n            case capi.SQLITE_DBCONFIG_DEFENSIVE:\n            case capi.SQLITE_DBCONFIG_WRITABLE_SCHEMA:\n            case capi.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE:\n            case capi.SQLITE_DBCONFIG_DQS_DML:\n            case capi.SQLITE_DBCONFIG_DQS_DDL:\n            case capi.SQLITE_DBCONFIG_ENABLE_VIEW:\n            case capi.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT:\n            case capi.SQLITE_DBCONFIG_TRUSTED_SCHEMA:\n            case capi.SQLITE_DBCONFIG_STMT_SCANSTATUS:\n            case capi.SQLITE_DBCONFIG_REVERSE_SCANORDER:\n              return this.ip(pDb, op, args[0], args[1] || 0);\n            case capi.SQLITE_DBCONFIG_LOOKASIDE:\n              return this.pii(pDb, op, args[0], args[1], args[2]);\n            case capi.SQLITE_DBCONFIG_MAINDBNAME:\n              return this.s(pDb, op, args[0]);\n            default:\n              return capi.SQLITE_MISUSE;\n          }\n        }.bind(Object.create(null));\n\n        capi.sqlite3_value_to_js = function (\n          pVal,\n          throwIfCannotConvert = true,\n        ) {\n          let arg;\n          const valType = capi.sqlite3_value_type(pVal);\n          switch (valType) {\n            case capi.SQLITE_INTEGER:\n              if (wasm.bigIntEnabled) {\n                arg = capi.sqlite3_value_int64(pVal);\n                if (util.bigIntFitsDouble(arg)) arg = Number(arg);\n              } else arg = capi.sqlite3_value_double(pVal);\n              break;\n            case capi.SQLITE_FLOAT:\n              arg = capi.sqlite3_value_double(pVal);\n              break;\n            case capi.SQLITE_TEXT:\n              arg = capi.sqlite3_value_text(pVal);\n              break;\n            case capi.SQLITE_BLOB: {\n              const n = capi.sqlite3_value_bytes(pVal);\n              const pBlob = capi.sqlite3_value_blob(pVal);\n              if (n && !pBlob)\n                sqlite3.WasmAllocError.toss(\n                  'Cannot allocate memory for blob argument of',\n                  n,\n                  'byte(s)',\n                );\n              arg = n ? wasm.heap8u().slice(pBlob, pBlob + Number(n)) : null;\n              break;\n            }\n            case capi.SQLITE_NULL:\n              arg = null;\n              break;\n            default:\n              if (throwIfCannotConvert) {\n                toss3(\n                  capi.SQLITE_MISMATCH,\n                  'Unhandled sqlite3_value_type():',\n                  valType,\n                );\n              }\n              arg = undefined;\n          }\n          return arg;\n        };\n\n        capi.sqlite3_values_to_js = function (\n          argc,\n          pArgv,\n          throwIfCannotConvert = true,\n        ) {\n          let i;\n          const tgt = [];\n          for (i = 0; i < argc; ++i) {\n            tgt.push(\n              capi.sqlite3_value_to_js(\n                wasm.peekPtr(pArgv + wasm.ptrSizeof * i),\n                throwIfCannotConvert,\n              ),\n            );\n          }\n          return tgt;\n        };\n\n        capi.sqlite3_result_error_js = function (pCtx, e) {\n          if (e instanceof WasmAllocError) {\n            capi.sqlite3_result_error_nomem(pCtx);\n          } else {\n            capi.sqlite3_result_error(pCtx, '' + e, -1);\n          }\n        };\n\n        capi.sqlite3_result_js = function (pCtx, val) {\n          if (val instanceof Error) {\n            capi.sqlite3_result_error_js(pCtx, val);\n            return;\n          }\n          try {\n            switch (typeof val) {\n              case 'undefined':\n                break;\n              case 'boolean':\n                capi.sqlite3_result_int(pCtx, val ? 1 : 0);\n                break;\n              case 'bigint':\n                if (util.bigIntFits32(val)) {\n                  capi.sqlite3_result_int(pCtx, Number(val));\n                } else if (util.bigIntFitsDouble(val)) {\n                  capi.sqlite3_result_double(pCtx, Number(val));\n                } else if (wasm.bigIntEnabled) {\n                  if (util.bigIntFits64(val))\n                    capi.sqlite3_result_int64(pCtx, val);\n                  else\n                    toss3(\n                      'BigInt value',\n                      val.toString(),\n                      'is too BigInt for int64.',\n                    );\n                } else {\n                  toss3('BigInt value', val.toString(), 'is too BigInt.');\n                }\n                break;\n              case 'number': {\n                let f;\n                if (util.isInt32(val)) {\n                  f = capi.sqlite3_result_int;\n                } else if (\n                  wasm.bigIntEnabled &&\n                  Number.isInteger(val) &&\n                  util.bigIntFits64(BigInt(val))\n                ) {\n                  f = capi.sqlite3_result_int64;\n                } else {\n                  f = capi.sqlite3_result_double;\n                }\n                f(pCtx, val);\n                break;\n              }\n              case 'string': {\n                const [p, n] = wasm.allocCString(val, true);\n                capi.sqlite3_result_text(pCtx, p, n, capi.SQLITE_WASM_DEALLOC);\n                break;\n              }\n              case 'object':\n                if (null === val) {\n                  capi.sqlite3_result_null(pCtx);\n                  break;\n                } else if (util.isBindableTypedArray(val)) {\n                  const pBlob = wasm.allocFromTypedArray(val);\n                  capi.sqlite3_result_blob(\n                    pCtx,\n                    pBlob,\n                    val.byteLength,\n                    capi.SQLITE_WASM_DEALLOC,\n                  );\n                  break;\n                }\n\n              default:\n                toss3(\n                  \"Don't not how to handle this UDF result value:\",\n                  typeof val,\n                  val,\n                );\n            }\n          } catch (e) {\n            capi.sqlite3_result_error_js(pCtx, e);\n          }\n        };\n\n        capi.sqlite3_column_js = function (\n          pStmt,\n          iCol,\n          throwIfCannotConvert = true,\n        ) {\n          const v = capi.sqlite3_column_value(pStmt, iCol);\n          return 0 === v\n            ? undefined\n            : capi.sqlite3_value_to_js(v, throwIfCannotConvert);\n        };\n\n        const __newOldValue = function (pObj, iCol, impl) {\n          impl = capi[impl];\n          if (!this.ptr) this.ptr = wasm.allocPtr();\n          else wasm.pokePtr(this.ptr, 0);\n          const rc = impl(pObj, iCol, this.ptr);\n          if (rc)\n            return SQLite3Error.toss(\n              rc,\n              arguments[2] + '() failed with code ' + rc,\n            );\n          const pv = wasm.peekPtr(this.ptr);\n          return pv ? capi.sqlite3_value_to_js(pv, true) : undefined;\n        }.bind(Object.create(null));\n\n        capi.sqlite3_preupdate_new_js = (pDb, iCol) =>\n          __newOldValue(pDb, iCol, 'sqlite3_preupdate_new');\n\n        capi.sqlite3_preupdate_old_js = (pDb, iCol) =>\n          __newOldValue(pDb, iCol, 'sqlite3_preupdate_old');\n\n        capi.sqlite3changeset_new_js = (pChangesetIter, iCol) =>\n          __newOldValue(pChangesetIter, iCol, 'sqlite3changeset_new');\n\n        capi.sqlite3changeset_old_js = (pChangesetIter, iCol) =>\n          __newOldValue(pChangesetIter, iCol, 'sqlite3changeset_old');\n\n        const sqlite3 = {\n          WasmAllocError: WasmAllocError,\n          SQLite3Error: SQLite3Error,\n          capi,\n          util,\n          wasm,\n          config,\n\n          version: Object.create(null),\n\n          client: undefined,\n\n          asyncPostInit: async function ff() {\n            if (ff.isReady instanceof Promise) return ff.isReady;\n            let lia = sqlite3ApiBootstrap.initializersAsync;\n            delete sqlite3ApiBootstrap.initializersAsync;\n            const postInit = async () => {\n              if (!sqlite3.__isUnderTest) {\n                delete sqlite3.util;\n\n                delete sqlite3.StructBinder;\n              }\n              return sqlite3;\n            };\n            const catcher = (e) => {\n              config.error('an async sqlite3 initializer failed:', e);\n              throw e;\n            };\n            if (!lia || !lia.length) {\n              return (ff.isReady = postInit().catch(catcher));\n            }\n            lia = lia.map((f) => {\n              return f instanceof Function ? async (x) => f(sqlite3) : f;\n            });\n            lia.push(postInit);\n            let p = Promise.resolve(sqlite3);\n            while (lia.length) p = p.then(lia.shift());\n            return (ff.isReady = p.catch(catcher));\n          },\n\n          scriptInfo: undefined,\n        };\n        try {\n          sqlite3ApiBootstrap.initializers.forEach((f) => {\n            f(sqlite3);\n          });\n        } catch (e) {\n          console.error('sqlite3 bootstrap initializer threw:', e);\n          throw e;\n        }\n        delete sqlite3ApiBootstrap.initializers;\n        sqlite3ApiBootstrap.sqlite3 = sqlite3;\n        return sqlite3;\n      };\n\n      globalThis.sqlite3ApiBootstrap.initializers = [];\n\n      globalThis.sqlite3ApiBootstrap.initializersAsync = [];\n\n      globalThis.sqlite3ApiBootstrap.defaultConfig = Object.create(null);\n\n      globalThis.sqlite3ApiBootstrap.sqlite3 = undefined;\n\n      globalThis.WhWasmUtilInstaller = function (target) {\n        'use strict';\n        if (undefined === target.bigIntEnabled) {\n          target.bigIntEnabled = !!globalThis['BigInt64Array'];\n        }\n\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n\n        if (!target.exports) {\n          Object.defineProperty(target, 'exports', {\n            enumerable: true,\n            configurable: true,\n            get: () => target.instance && target.instance.exports,\n          });\n        }\n\n        const ptrIR = target.pointerIR || 'i32';\n        const ptrSizeof = (target.ptrSizeof =\n          'i32' === ptrIR\n            ? 4\n            : 'i64' === ptrIR\n              ? 8\n              : toss('Unhandled ptrSizeof:', ptrIR));\n\n        const cache = Object.create(null);\n\n        cache.heapSize = 0;\n\n        cache.memory = null;\n\n        cache.freeFuncIndexes = [];\n\n        cache.scopedAlloc = [];\n\n        cache.utf8Decoder = new TextDecoder();\n        cache.utf8Encoder = new TextEncoder('utf-8');\n\n        target.sizeofIR = (n) => {\n          switch (n) {\n            case 'i8':\n              return 1;\n            case 'i16':\n              return 2;\n            case 'i32':\n            case 'f32':\n            case 'float':\n              return 4;\n            case 'i64':\n            case 'f64':\n            case 'double':\n              return 8;\n            case '*':\n              return ptrSizeof;\n            default:\n              return ('' + n).endsWith('*') ? ptrSizeof : undefined;\n          }\n        };\n\n        const heapWrappers = function () {\n          if (!cache.memory) {\n            cache.memory =\n              target.memory instanceof WebAssembly.Memory\n                ? target.memory\n                : target.exports.memory;\n          } else if (cache.heapSize === cache.memory.buffer.byteLength) {\n            return cache;\n          }\n\n          const b = cache.memory.buffer;\n          cache.HEAP8 = new Int8Array(b);\n          cache.HEAP8U = new Uint8Array(b);\n          cache.HEAP16 = new Int16Array(b);\n          cache.HEAP16U = new Uint16Array(b);\n          cache.HEAP32 = new Int32Array(b);\n          cache.HEAP32U = new Uint32Array(b);\n          if (target.bigIntEnabled) {\n            cache.HEAP64 = new BigInt64Array(b);\n            cache.HEAP64U = new BigUint64Array(b);\n          }\n          cache.HEAP32F = new Float32Array(b);\n          cache.HEAP64F = new Float64Array(b);\n          cache.heapSize = b.byteLength;\n          return cache;\n        };\n\n        target.heap8 = () => heapWrappers().HEAP8;\n\n        target.heap8u = () => heapWrappers().HEAP8U;\n\n        target.heap16 = () => heapWrappers().HEAP16;\n\n        target.heap16u = () => heapWrappers().HEAP16U;\n\n        target.heap32 = () => heapWrappers().HEAP32;\n\n        target.heap32u = () => heapWrappers().HEAP32U;\n\n        target.heapForSize = function (n, unsigned = true) {\n          let ctor;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          switch (n) {\n            case Int8Array:\n              return c.HEAP8;\n            case Uint8Array:\n              return c.HEAP8U;\n            case Int16Array:\n              return c.HEAP16;\n            case Uint16Array:\n              return c.HEAP16U;\n            case Int32Array:\n              return c.HEAP32;\n            case Uint32Array:\n              return c.HEAP32U;\n            case 8:\n              return unsigned ? c.HEAP8U : c.HEAP8;\n            case 16:\n              return unsigned ? c.HEAP16U : c.HEAP16;\n            case 32:\n              return unsigned ? c.HEAP32U : c.HEAP32;\n            case 64:\n              if (c.HEAP64) return unsigned ? c.HEAP64U : c.HEAP64;\n              break;\n            default:\n              if (target.bigIntEnabled) {\n                if (n === globalThis['BigUint64Array']) return c.HEAP64U;\n                else if (n === globalThis['BigInt64Array']) return c.HEAP64;\n                break;\n              }\n          }\n          toss(\n            'Invalid heapForSize() size: expecting 8, 16, 32,',\n            'or (if BigInt is enabled) 64.',\n          );\n        };\n\n        target.functionTable = function () {\n          return target.exports.__indirect_function_table;\n        };\n\n        target.functionEntry = function (fptr) {\n          const ft = target.functionTable();\n          return fptr < ft.length ? ft.get(fptr) : undefined;\n        };\n\n        target.jsFuncToWasm = function f(func, sig) {\n          if (!f._) {\n            f._ = {\n              sigTypes: Object.assign(Object.create(null), {\n                i: 'i32',\n                p: 'i32',\n                P: 'i32',\n                s: 'i32',\n                j: 'i64',\n                f: 'f32',\n                d: 'f64',\n              }),\n\n              typeCodes: Object.assign(Object.create(null), {\n                f64: 0x7c,\n                f32: 0x7d,\n                i64: 0x7e,\n                i32: 0x7f,\n              }),\n\n              uleb128Encode: function (tgt, method, n) {\n                if (n < 128) tgt[method](n);\n                else tgt[method](n % 128 | 128, n >> 7);\n              },\n\n              rxJSig: /^(\\w)\\((\\w*)\\)$/,\n\n              sigParams: function (sig) {\n                const m = f._.rxJSig.exec(sig);\n                return m ? m[2] : sig.substr(1);\n              },\n\n              letterType: (x) =>\n                f._.sigTypes[x] || toss('Invalid signature letter:', x),\n\n              pushSigType: (dest, letter) =>\n                dest.push(f._.typeCodes[f._.letterType(letter)]),\n            };\n          }\n          if ('string' === typeof func) {\n            const x = sig;\n            sig = func;\n            func = x;\n          }\n          const sigParams = f._.sigParams(sig);\n          const wasmCode = [0x01, 0x60];\n          f._.uleb128Encode(wasmCode, 'push', sigParams.length);\n          for (const x of sigParams) f._.pushSigType(wasmCode, x);\n          if ('v' === sig[0]) wasmCode.push(0);\n          else {\n            wasmCode.push(1);\n            f._.pushSigType(wasmCode, sig[0]);\n          }\n          f._.uleb128Encode(wasmCode, 'unshift', wasmCode.length);\n          wasmCode.unshift(\n            0x00,\n            0x61,\n            0x73,\n            0x6d,\n            0x01,\n            0x00,\n            0x00,\n            0x00,\n            0x01,\n          );\n          wasmCode.push(\n            0x02,\n            0x07,\n\n            0x01,\n            0x01,\n            0x65,\n            0x01,\n            0x66,\n            0x00,\n            0x00,\n            0x07,\n            0x05,\n\n            0x01,\n            0x01,\n            0x66,\n            0x00,\n            0x00,\n          );\n          return new WebAssembly.Instance(\n            new WebAssembly.Module(new Uint8Array(wasmCode)),\n            {\n              e: { f: func },\n            },\n          ).exports['f'];\n        };\n\n        const __installFunction = function f(func, sig, scoped) {\n          if (scoped && !cache.scopedAlloc.length) {\n            toss('No scopedAllocPush() scope is active.');\n          }\n          if ('string' === typeof func) {\n            const x = sig;\n            sig = func;\n            func = x;\n          }\n          if ('string' !== typeof sig || !(func instanceof Function)) {\n            toss(\n              'Invalid arguments: expecting (function,signature) ' +\n                'or (signature,function).',\n            );\n          }\n          const ft = target.functionTable();\n          const oldLen = ft.length;\n          let ptr;\n          while (cache.freeFuncIndexes.length) {\n            ptr = cache.freeFuncIndexes.pop();\n            if (ft.get(ptr)) {\n              ptr = null;\n              continue;\n            } else {\n              break;\n            }\n          }\n          if (!ptr) {\n            ptr = oldLen;\n            ft.grow(1);\n          }\n          try {\n            ft.set(ptr, func);\n            if (scoped) {\n              cache.scopedAlloc[cache.scopedAlloc.length - 1].push(ptr);\n            }\n            return ptr;\n          } catch (e) {\n            if (!(e instanceof TypeError)) {\n              if (ptr === oldLen) cache.freeFuncIndexes.push(oldLen);\n              throw e;\n            }\n          }\n\n          try {\n            const fptr = target.jsFuncToWasm(func, sig);\n            ft.set(ptr, fptr);\n            if (scoped) {\n              cache.scopedAlloc[cache.scopedAlloc.length - 1].push(ptr);\n            }\n          } catch (e) {\n            if (ptr === oldLen) cache.freeFuncIndexes.push(oldLen);\n            throw e;\n          }\n          return ptr;\n        };\n\n        target.installFunction = (func, sig) =>\n          __installFunction(func, sig, false);\n\n        target.scopedInstallFunction = (func, sig) =>\n          __installFunction(func, sig, true);\n\n        target.uninstallFunction = function (ptr) {\n          if (!ptr && 0 !== ptr) return undefined;\n          const fi = cache.freeFuncIndexes;\n          const ft = target.functionTable();\n          fi.push(ptr);\n          const rc = ft.get(ptr);\n          ft.set(ptr, null);\n          return rc;\n        };\n\n        target.peek = function f(ptr, type = 'i8') {\n          if (type.endsWith('*')) type = ptrIR;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          const list = Array.isArray(ptr) ? [] : undefined;\n          let rc;\n          do {\n            if (list) ptr = arguments[0].shift();\n            switch (type) {\n              case 'i1':\n              case 'i8':\n                rc = c.HEAP8[ptr >> 0];\n                break;\n              case 'i16':\n                rc = c.HEAP16[ptr >> 1];\n                break;\n              case 'i32':\n                rc = c.HEAP32[ptr >> 2];\n                break;\n              case 'float':\n              case 'f32':\n                rc = c.HEAP32F[ptr >> 2];\n                break;\n              case 'double':\n              case 'f64':\n                rc = Number(c.HEAP64F[ptr >> 3]);\n                break;\n              case 'i64':\n                if (target.bigIntEnabled) {\n                  rc = BigInt(c.HEAP64[ptr >> 3]);\n                  break;\n                }\n\n              default:\n                toss('Invalid type for peek():', type);\n            }\n            if (list) list.push(rc);\n          } while (list && arguments[0].length);\n          return list || rc;\n        };\n\n        target.poke = function (ptr, value, type = 'i8') {\n          if (type.endsWith('*')) type = ptrIR;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          for (const p of Array.isArray(ptr) ? ptr : [ptr]) {\n            switch (type) {\n              case 'i1':\n              case 'i8':\n                c.HEAP8[p >> 0] = value;\n                continue;\n              case 'i16':\n                c.HEAP16[p >> 1] = value;\n                continue;\n              case 'i32':\n                c.HEAP32[p >> 2] = value;\n                continue;\n              case 'float':\n              case 'f32':\n                c.HEAP32F[p >> 2] = value;\n                continue;\n              case 'double':\n              case 'f64':\n                c.HEAP64F[p >> 3] = value;\n                continue;\n              case 'i64':\n                if (c.HEAP64) {\n                  c.HEAP64[p >> 3] = BigInt(value);\n                  continue;\n                }\n\n              default:\n                toss('Invalid type for poke(): ' + type);\n            }\n          }\n          return this;\n        };\n\n        target.peekPtr = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, ptrIR);\n\n        target.pokePtr = (ptr, value = 0) => target.poke(ptr, value, ptrIR);\n\n        target.peek8 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i8');\n\n        target.poke8 = (ptr, value) => target.poke(ptr, value, 'i8');\n\n        target.peek16 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i16');\n\n        target.poke16 = (ptr, value) => target.poke(ptr, value, 'i16');\n\n        target.peek32 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i32');\n\n        target.poke32 = (ptr, value) => target.poke(ptr, value, 'i32');\n\n        target.peek64 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i64');\n\n        target.poke64 = (ptr, value) => target.poke(ptr, value, 'i64');\n\n        target.peek32f = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'f32');\n\n        target.poke32f = (ptr, value) => target.poke(ptr, value, 'f32');\n\n        target.peek64f = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'f64');\n\n        target.poke64f = (ptr, value) => target.poke(ptr, value, 'f64');\n\n        target.getMemValue = target.peek;\n\n        target.getPtrValue = target.peekPtr;\n\n        target.setMemValue = target.poke;\n\n        target.setPtrValue = target.pokePtr;\n\n        target.isPtr32 = (ptr) =>\n          'number' === typeof ptr && ptr === (ptr | 0) && ptr >= 0;\n\n        target.isPtr = target.isPtr32;\n\n        target.cstrlen = function (ptr) {\n          if (!ptr || !target.isPtr(ptr)) return null;\n          const h = heapWrappers().HEAP8U;\n          let pos = ptr;\n          for (; h[pos] !== 0; ++pos) {}\n          return pos - ptr;\n        };\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n        const __utf8Decode = function (arrayBuffer, begin, end) {\n          return cache.utf8Decoder.decode(\n            arrayBuffer.buffer instanceof __SAB\n              ? arrayBuffer.slice(begin, end)\n              : arrayBuffer.subarray(begin, end),\n          );\n        };\n\n        target.cstrToJs = function (ptr) {\n          const n = target.cstrlen(ptr);\n          return n\n            ? __utf8Decode(heapWrappers().HEAP8U, ptr, ptr + n)\n            : null === n\n              ? n\n              : '';\n        };\n\n        target.jstrlen = function (str) {\n          if ('string' !== typeof str) return null;\n          const n = str.length;\n          let len = 0;\n          for (let i = 0; i < n; ++i) {\n            let u = str.charCodeAt(i);\n            if (u >= 0xd800 && u <= 0xdfff) {\n              u =\n                (0x10000 + ((u & 0x3ff) << 10)) | (str.charCodeAt(++i) & 0x3ff);\n            }\n            if (u <= 0x7f) ++len;\n            else if (u <= 0x7ff) len += 2;\n            else if (u <= 0xffff) len += 3;\n            else len += 4;\n          }\n          return len;\n        };\n\n        target.jstrcpy = function (\n          jstr,\n          tgt,\n          offset = 0,\n          maxBytes = -1,\n          addNul = true,\n        ) {\n          if (\n            !tgt ||\n            (!(tgt instanceof Int8Array) && !(tgt instanceof Uint8Array))\n          ) {\n            toss('jstrcpy() target must be an Int8Array or Uint8Array.');\n          }\n          if (maxBytes < 0) maxBytes = tgt.length - offset;\n          if (!(maxBytes > 0) || !(offset >= 0)) return 0;\n          let i = 0,\n            max = jstr.length;\n          const begin = offset,\n            end = offset + maxBytes - (addNul ? 1 : 0);\n          for (; i < max && offset < end; ++i) {\n            let u = jstr.charCodeAt(i);\n            if (u >= 0xd800 && u <= 0xdfff) {\n              u =\n                (0x10000 + ((u & 0x3ff) << 10)) |\n                (jstr.charCodeAt(++i) & 0x3ff);\n            }\n            if (u <= 0x7f) {\n              if (offset >= end) break;\n              tgt[offset++] = u;\n            } else if (u <= 0x7ff) {\n              if (offset + 1 >= end) break;\n              tgt[offset++] = 0xc0 | (u >> 6);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            } else if (u <= 0xffff) {\n              if (offset + 2 >= end) break;\n              tgt[offset++] = 0xe0 | (u >> 12);\n              tgt[offset++] = 0x80 | ((u >> 6) & 0x3f);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            } else {\n              if (offset + 3 >= end) break;\n              tgt[offset++] = 0xf0 | (u >> 18);\n              tgt[offset++] = 0x80 | ((u >> 12) & 0x3f);\n              tgt[offset++] = 0x80 | ((u >> 6) & 0x3f);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            }\n          }\n          if (addNul) tgt[offset++] = 0;\n          return offset - begin;\n        };\n\n        target.cstrncpy = function (tgtPtr, srcPtr, n) {\n          if (!tgtPtr || !srcPtr)\n            toss('cstrncpy() does not accept NULL strings.');\n          if (n < 0) n = target.cstrlen(strPtr) + 1;\n          else if (!(n > 0)) return 0;\n          const heap = target.heap8u();\n          let i = 0,\n            ch;\n          for (; i < n && (ch = heap[srcPtr + i]); ++i) {\n            heap[tgtPtr + i] = ch;\n          }\n          if (i < n) heap[tgtPtr + i++] = 0;\n          return i;\n        };\n\n        target.jstrToUintArray = (str, addNul = false) => {\n          return cache.utf8Encoder.encode(addNul ? str + '\\0' : str);\n        };\n\n        const __affirmAlloc = (obj, funcName) => {\n          if (\n            !(obj.alloc instanceof Function) ||\n            !(obj.dealloc instanceof Function)\n          ) {\n            toss(\n              'Object is missing alloc() and/or dealloc() function(s)',\n              'required by',\n              funcName + '().',\n            );\n          }\n        };\n\n        const __allocCStr = function (\n          jstr,\n          returnWithLength,\n          allocator,\n          funcName,\n        ) {\n          __affirmAlloc(target, funcName);\n          if ('string' !== typeof jstr) return null;\n          if (false) {} else {\n            const u = cache.utf8Encoder.encode(jstr),\n              ptr = allocator(u.length + 1),\n              heap = heapWrappers().HEAP8U;\n            heap.set(u, ptr);\n            heap[ptr + u.length] = 0;\n            return returnWithLength ? [ptr, u.length] : ptr;\n          }\n        };\n\n        target.allocCString = (jstr, returnWithLength = false) =>\n          __allocCStr(jstr, returnWithLength, target.alloc, 'allocCString()');\n\n        target.scopedAllocPush = function () {\n          __affirmAlloc(target, 'scopedAllocPush');\n          const a = [];\n          cache.scopedAlloc.push(a);\n          return a;\n        };\n\n        target.scopedAllocPop = function (state) {\n          __affirmAlloc(target, 'scopedAllocPop');\n          const n = arguments.length\n            ? cache.scopedAlloc.indexOf(state)\n            : cache.scopedAlloc.length - 1;\n          if (n < 0) toss('Invalid state object for scopedAllocPop().');\n          if (0 === arguments.length) state = cache.scopedAlloc[n];\n          cache.scopedAlloc.splice(n, 1);\n          for (let p; (p = state.pop()); ) {\n            if (target.functionEntry(p)) {\n              target.uninstallFunction(p);\n            } else target.dealloc(p);\n          }\n        };\n\n        target.scopedAlloc = function (n) {\n          if (!cache.scopedAlloc.length) {\n            toss('No scopedAllocPush() scope is active.');\n          }\n          const p = target.alloc(n);\n          cache.scopedAlloc[cache.scopedAlloc.length - 1].push(p);\n          return p;\n        };\n\n        Object.defineProperty(target.scopedAlloc, 'level', {\n          configurable: false,\n          enumerable: false,\n          get: () => cache.scopedAlloc.length,\n          set: () => toss(\"The 'active' property is read-only.\"),\n        });\n\n        target.scopedAllocCString = (jstr, returnWithLength = false) =>\n          __allocCStr(\n            jstr,\n            returnWithLength,\n            target.scopedAlloc,\n            'scopedAllocCString()',\n          );\n\n        const __allocMainArgv = function (isScoped, list) {\n          const pList = target[isScoped ? 'scopedAlloc' : 'alloc'](\n            (list.length + 1) * target.ptrSizeof,\n          );\n          let i = 0;\n          list.forEach((e) => {\n            target.pokePtr(\n              pList + target.ptrSizeof * i++,\n              target[isScoped ? 'scopedAllocCString' : 'allocCString']('' + e),\n            );\n          });\n          target.pokePtr(pList + target.ptrSizeof * i, 0);\n          return pList;\n        };\n\n        target.scopedAllocMainArgv = (list) => __allocMainArgv(true, list);\n\n        target.allocMainArgv = (list) => __allocMainArgv(false, list);\n\n        target.cArgvToJs = (argc, pArgv) => {\n          const list = [];\n          for (let i = 0; i < argc; ++i) {\n            const arg = target.peekPtr(pArgv + target.ptrSizeof * i);\n            list.push(arg ? target.cstrToJs(arg) : null);\n          }\n          return list;\n        };\n\n        target.scopedAllocCall = function (func) {\n          target.scopedAllocPush();\n          try {\n            return func();\n          } finally {\n            target.scopedAllocPop();\n          }\n        };\n\n        const __allocPtr = function (howMany, safePtrSize, method) {\n          __affirmAlloc(target, method);\n          const pIr = safePtrSize ? 'i64' : ptrIR;\n          let m = target[method](howMany * (safePtrSize ? 8 : ptrSizeof));\n          target.poke(m, 0, pIr);\n          if (1 === howMany) {\n            return m;\n          }\n          const a = [m];\n          for (let i = 1; i < howMany; ++i) {\n            m += safePtrSize ? 8 : ptrSizeof;\n            a[i] = m;\n            target.poke(m, 0, pIr);\n          }\n          return a;\n        };\n\n        target.allocPtr = (howMany = 1, safePtrSize = true) =>\n          __allocPtr(howMany, safePtrSize, 'alloc');\n\n        target.scopedAllocPtr = (howMany = 1, safePtrSize = true) =>\n          __allocPtr(howMany, safePtrSize, 'scopedAlloc');\n\n        target.xGet = function (name) {\n          return (\n            target.exports[name] || toss('Cannot find exported symbol:', name)\n          );\n        };\n\n        const __argcMismatch = (f, n) =>\n          toss(f + '() requires', n, 'argument(s).');\n\n        target.xCall = function (fname, ...args) {\n          const f = target.xGet(fname);\n          if (!(f instanceof Function))\n            toss('Exported symbol', fname, 'is not a function.');\n          if (f.length !== args.length) __argcMismatch(fname, f.length);\n          return 2 === arguments.length && Array.isArray(arguments[1])\n            ? f.apply(null, arguments[1])\n            : f.apply(null, args);\n        };\n\n        cache.xWrap = Object.create(null);\n        cache.xWrap.convert = Object.create(null);\n\n        cache.xWrap.convert.arg = new Map();\n\n        cache.xWrap.convert.result = new Map();\n        const xArg = cache.xWrap.convert.arg,\n          xResult = cache.xWrap.convert.result;\n\n        if (target.bigIntEnabled) {\n          xArg.set('i64', (i) => BigInt(i));\n        }\n        const __xArgPtr =\n          'i32' === ptrIR ? (i) => i | 0 : (i) => BigInt(i) | BigInt(0);\n        xArg\n          .set('i32', __xArgPtr)\n          .set('i16', (i) => (i | 0) & 0xffff)\n          .set('i8', (i) => (i | 0) & 0xff)\n          .set('f32', (i) => Number(i).valueOf())\n          .set('float', xArg.get('f32'))\n          .set('f64', xArg.get('f32'))\n          .set('double', xArg.get('f64'))\n          .set('int', xArg.get('i32'))\n          .set('null', (i) => i)\n          .set(null, xArg.get('null'))\n          .set('**', __xArgPtr)\n          .set('*', __xArgPtr);\n        xResult\n          .set('*', __xArgPtr)\n          .set('pointer', __xArgPtr)\n          .set('number', (v) => Number(v))\n          .set('void', (v) => undefined)\n          .set('null', (v) => v)\n          .set(null, xResult.get('null'));\n\n        {\n          const copyToResult = [\n            'i8',\n            'i16',\n            'i32',\n            'int',\n            'f32',\n            'float',\n            'f64',\n            'double',\n          ];\n          if (target.bigIntEnabled) copyToResult.push('i64');\n          const adaptPtr = xArg.get(ptrIR);\n          for (const t of copyToResult) {\n            xArg.set(t + '*', adaptPtr);\n            xResult.set(t + '*', adaptPtr);\n            xResult.set(t, xArg.get(t) || toss('Missing arg converter:', t));\n          }\n        }\n\n        const __xArgString = function (v) {\n          if ('string' === typeof v) return target.scopedAllocCString(v);\n          return v ? __xArgPtr(v) : null;\n        };\n        xArg\n          .set('string', __xArgString)\n          .set('utf8', __xArgString)\n          .set('pointer', __xArgString);\n\n        xResult\n          .set('string', (i) => target.cstrToJs(i))\n          .set('utf8', xResult.get('string'))\n          .set('string:dealloc', (i) => {\n            try {\n              return i ? target.cstrToJs(i) : null;\n            } finally {\n              target.dealloc(i);\n            }\n          })\n          .set('utf8:dealloc', xResult.get('string:dealloc'))\n          .set('json', (i) => JSON.parse(target.cstrToJs(i)))\n          .set('json:dealloc', (i) => {\n            try {\n              return i ? JSON.parse(target.cstrToJs(i)) : null;\n            } finally {\n              target.dealloc(i);\n            }\n          });\n\n        const AbstractArgAdapter = class {\n          constructor(opt) {\n            this.name = opt.name || 'unnamed adapter';\n          }\n\n          convertArg(v, argv, argIndex) {\n            toss('AbstractArgAdapter must be subclassed.');\n          }\n        };\n\n        xArg.FuncPtrAdapter = class FuncPtrAdapter extends AbstractArgAdapter {\n          constructor(opt) {\n            super(opt);\n            if (xArg.FuncPtrAdapter.warnOnUse) {\n              console.warn(\n                'xArg.FuncPtrAdapter is an internal-only API',\n                'and is not intended to be invoked from',\n                'client-level code. Invoked with:',\n                opt,\n              );\n            }\n            this.name = opt.name || 'unnamed';\n            this.signature = opt.signature;\n            if (opt.contextKey instanceof Function) {\n              this.contextKey = opt.contextKey;\n              if (!opt.bindScope) opt.bindScope = 'context';\n            }\n            this.bindScope =\n              opt.bindScope ||\n              toss(\n                'FuncPtrAdapter options requires a bindScope (explicit or implied).',\n              );\n            if (FuncPtrAdapter.bindScopes.indexOf(opt.bindScope) < 0) {\n              toss(\n                'Invalid options.bindScope (' +\n                  opt.bindMod +\n                  ') for FuncPtrAdapter. ' +\n                  'Expecting one of: (' +\n                  FuncPtrAdapter.bindScopes.join(', ') +\n                  ')',\n              );\n            }\n            this.isTransient = 'transient' === this.bindScope;\n            this.isContext = 'context' === this.bindScope;\n            this.isPermanent = 'permanent' === this.bindScope;\n            this.singleton = 'singleton' === this.bindScope ? [] : undefined;\n\n            this.callProxy =\n              opt.callProxy instanceof Function ? opt.callProxy : undefined;\n          }\n\n          contextKey(argv, argIndex) {\n            return this;\n          }\n\n          contextMap(key) {\n            const cm = this.__cmap || (this.__cmap = new Map());\n            let rc = cm.get(key);\n            if (undefined === rc) cm.set(key, (rc = []));\n            return rc;\n          }\n\n          convertArg(v, argv, argIndex) {\n            let pair = this.singleton;\n            if (!pair && this.isContext) {\n              pair = this.contextMap(this.contextKey(argv, argIndex));\n            }\n            if (pair && pair[0] === v) return pair[1];\n            if (v instanceof Function) {\n              if (this.callProxy) v = this.callProxy(v);\n              const fp = __installFunction(v, this.signature, this.isTransient);\n              if (FuncPtrAdapter.debugFuncInstall) {\n                FuncPtrAdapter.debugOut(\n                  'FuncPtrAdapter installed',\n                  this,\n                  this.contextKey(argv, argIndex),\n                  '@' + fp,\n                  v,\n                );\n              }\n              if (pair) {\n                if (pair[1]) {\n                  if (FuncPtrAdapter.debugFuncInstall) {\n                    FuncPtrAdapter.debugOut(\n                      'FuncPtrAdapter uninstalling',\n                      this,\n                      this.contextKey(argv, argIndex),\n                      '@' + pair[1],\n                      v,\n                    );\n                  }\n                  try {\n                    cache.scopedAlloc[cache.scopedAlloc.length - 1].push(\n                      pair[1],\n                    );\n                  } catch (e) {}\n                }\n                pair[0] = v;\n                pair[1] = fp;\n              }\n              return fp;\n            } else if (target.isPtr(v) || null === v || undefined === v) {\n              if (pair && pair[1] && pair[1] !== v) {\n                if (FuncPtrAdapter.debugFuncInstall) {\n                  FuncPtrAdapter.debugOut(\n                    'FuncPtrAdapter uninstalling',\n                    this,\n                    this.contextKey(argv, argIndex),\n                    '@' + pair[1],\n                    v,\n                  );\n                }\n                try {\n                  cache.scopedAlloc[cache.scopedAlloc.length - 1].push(pair[1]);\n                } catch (e) {}\n                pair[0] = pair[1] = v | 0;\n              }\n              return v || 0;\n            } else {\n              throw new TypeError(\n                'Invalid FuncPtrAdapter argument type. ' +\n                  'Expecting a function pointer or a ' +\n                  (this.name ? this.name + ' ' : '') +\n                  'function matching signature ' +\n                  this.signature +\n                  '.',\n              );\n            }\n          }\n        };\n\n        xArg.FuncPtrAdapter.warnOnUse = false;\n\n        xArg.FuncPtrAdapter.debugFuncInstall = false;\n\n        xArg.FuncPtrAdapter.debugOut = console.debug.bind(console);\n\n        xArg.FuncPtrAdapter.bindScopes = [\n          'transient',\n          'context',\n          'singleton',\n          'permanent',\n        ];\n\n        const __xArgAdapterCheck = (t) =>\n          xArg.get(t) || toss('Argument adapter not found:', t);\n\n        const __xResultAdapterCheck = (t) =>\n          xResult.get(t) || toss('Result adapter not found:', t);\n\n        cache.xWrap.convertArg = (t, ...args) => __xArgAdapterCheck(t)(...args);\n        cache.xWrap.convertArgNoCheck = (t, ...args) => xArg.get(t)(...args);\n\n        cache.xWrap.convertResult = (t, v) =>\n          null === t ? v : t ? __xResultAdapterCheck(t)(v) : undefined;\n        cache.xWrap.convertResultNoCheck = (t, v) =>\n          null === t ? v : t ? xResult.get(t)(v) : undefined;\n\n        target.xWrap = function (fArg, resultType, ...argTypes) {\n          if (3 === arguments.length && Array.isArray(arguments[2])) {\n            argTypes = arguments[2];\n          }\n          if (target.isPtr(fArg)) {\n            fArg =\n              target.functionEntry(fArg) ||\n              toss('Function pointer not found in WASM function table.');\n          }\n          const fIsFunc = fArg instanceof Function;\n          const xf = fIsFunc ? fArg : target.xGet(fArg);\n          if (fIsFunc) fArg = xf.name || 'unnamed function';\n          if (argTypes.length !== xf.length) __argcMismatch(fArg, xf.length);\n          if (null === resultType && 0 === xf.length) {\n            return xf;\n          }\n          if (undefined !== resultType && null !== resultType)\n            __xResultAdapterCheck(resultType);\n          for (const t of argTypes) {\n            if (t instanceof AbstractArgAdapter)\n              xArg.set(t, (...args) => t.convertArg(...args));\n            else __xArgAdapterCheck(t);\n          }\n          const cxw = cache.xWrap;\n          if (0 === xf.length) {\n            return (...args) =>\n              args.length\n                ? __argcMismatch(fArg, xf.length)\n                : cxw.convertResult(resultType, xf.call(null));\n          }\n          return function (...args) {\n            if (args.length !== xf.length) __argcMismatch(fArg, xf.length);\n            const scope = target.scopedAllocPush();\n            try {\n              for (const i in args)\n                args[i] = cxw.convertArgNoCheck(argTypes[i], args[i], args, i);\n              return cxw.convertResultNoCheck(resultType, xf.apply(null, args));\n            } finally {\n              target.scopedAllocPop(scope);\n            }\n          };\n        };\n\n        const __xAdapter = function (\n          func,\n          argc,\n          typeName,\n          adapter,\n          modeName,\n          xcvPart,\n        ) {\n          if ('string' === typeof typeName) {\n            if (1 === argc) return xcvPart.get(typeName);\n            else if (2 === argc) {\n              if (!adapter) {\n                delete xcvPart.get(typeName);\n                return func;\n              } else if (!(adapter instanceof Function)) {\n                toss(modeName, 'requires a function argument.');\n              }\n              xcvPart.set(typeName, adapter);\n              return func;\n            }\n          }\n          toss('Invalid arguments to', modeName);\n        };\n\n        target.xWrap.resultAdapter = function f(typeName, adapter) {\n          return __xAdapter(\n            f,\n            arguments.length,\n            typeName,\n            adapter,\n            'resultAdapter()',\n            xResult,\n          );\n        };\n\n        target.xWrap.argAdapter = function f(typeName, adapter) {\n          return __xAdapter(\n            f,\n            arguments.length,\n            typeName,\n            adapter,\n            'argAdapter()',\n            xArg,\n          );\n        };\n\n        target.xWrap.FuncPtrAdapter = xArg.FuncPtrAdapter;\n\n        target.xCallWrapped = function (fArg, resultType, argTypes, ...args) {\n          if (Array.isArray(arguments[3])) args = arguments[3];\n          return target\n            .xWrap(fArg, resultType, argTypes || [])\n            .apply(null, args || []);\n        };\n\n        target.xWrap.testConvertArg = cache.xWrap.convertArg;\n\n        target.xWrap.testConvertResult = cache.xWrap.convertResult;\n\n        return target;\n      };\n\n      globalThis.WhWasmUtilInstaller.yawl = function (config) {\n        const wfetch = () => fetch(config.uri, { credentials: 'same-origin' });\n        const wui = this;\n        const finalThen = function (arg) {\n          if (config.wasmUtilTarget) {\n            const toss = (...args) => {\n              throw new Error(args.join(' '));\n            };\n            const tgt = config.wasmUtilTarget;\n            tgt.module = arg.module;\n            tgt.instance = arg.instance;\n\n            if (!tgt.instance.exports.memory) {\n              tgt.memory =\n                (config.imports &&\n                  config.imports.env &&\n                  config.imports.env.memory) ||\n                toss(\"Missing 'memory' object!\");\n            }\n            if (!tgt.alloc && arg.instance.exports.malloc) {\n              const exports = arg.instance.exports;\n              tgt.alloc = function (n) {\n                return (\n                  exports.malloc(n) || toss('Allocation of', n, 'bytes failed.')\n                );\n              };\n              tgt.dealloc = function (m) {\n                exports.free(m);\n              };\n            }\n            wui(tgt);\n          }\n          if (config.onload) config.onload(arg, config);\n          return arg;\n        };\n        const loadWasm = WebAssembly.instantiateStreaming\n          ? function loadWasmStreaming() {\n              return WebAssembly.instantiateStreaming(\n                wfetch(),\n                config.imports || {},\n              ).then(finalThen);\n            }\n          : function loadWasmOldSchool() {\n              return wfetch()\n                .then((response) => response.arrayBuffer())\n                .then((bytes) =>\n                  WebAssembly.instantiate(bytes, config.imports || {}),\n                )\n                .then(finalThen);\n            };\n        return loadWasm;\n      }.bind(globalThis.WhWasmUtilInstaller);\n\n      ('use strict');\n      globalThis.Jaccwabyt = function StructBinderFactory(config) {\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n\n        if (\n          !(config.heap instanceof WebAssembly.Memory) &&\n          !(config.heap instanceof Function)\n        ) {\n          toss(\n            'config.heap must be WebAssembly.Memory instance or a function.',\n          );\n        }\n        ['alloc', 'dealloc'].forEach(function (k) {\n          config[k] instanceof Function ||\n            toss(\"Config option '\" + k + \"' must be a function.\");\n        });\n        const SBF = StructBinderFactory;\n        const heap =\n            config.heap instanceof Function\n              ? config.heap\n              : () => new Uint8Array(config.heap.buffer),\n          alloc = config.alloc,\n          dealloc = config.dealloc,\n          log = config.log || console.log.bind(console),\n          memberPrefix = config.memberPrefix || '',\n          memberSuffix = config.memberSuffix || '',\n          bigIntEnabled =\n            undefined === config.bigIntEnabled\n              ? !!globalThis['BigInt64Array']\n              : !!config.bigIntEnabled,\n          BigInt = globalThis['BigInt'],\n          BigInt64Array = globalThis['BigInt64Array'],\n          ptrSizeof = config.ptrSizeof || 4,\n          ptrIR = config.ptrIR || 'i32';\n        if (!SBF.debugFlags) {\n          SBF.__makeDebugFlags = function (deriveFrom = null) {\n            if (deriveFrom && deriveFrom.__flags)\n              deriveFrom = deriveFrom.__flags;\n            const f = function f(flags) {\n              if (0 === arguments.length) {\n                return f.__flags;\n              }\n              if (flags < 0) {\n                delete f.__flags.getter;\n                delete f.__flags.setter;\n                delete f.__flags.alloc;\n                delete f.__flags.dealloc;\n              } else {\n                f.__flags.getter = 0 !== (0x01 & flags);\n                f.__flags.setter = 0 !== (0x02 & flags);\n                f.__flags.alloc = 0 !== (0x04 & flags);\n                f.__flags.dealloc = 0 !== (0x08 & flags);\n              }\n              return f._flags;\n            };\n            Object.defineProperty(f, '__flags', {\n              iterable: false,\n              writable: false,\n              value: Object.create(deriveFrom),\n            });\n            if (!deriveFrom) f(0);\n            return f;\n          };\n          SBF.debugFlags = SBF.__makeDebugFlags();\n        }\n\n        const isLittleEndian = (function () {\n          const buffer = new ArrayBuffer(2);\n          new DataView(buffer).setInt16(0, 256, true);\n\n          return new Int16Array(buffer)[0] === 256;\n        })();\n\n        const isFuncSig = (s) => '(' === s[1];\n\n        const isPtrSig = (s) => 'p' === s || 'P' === s;\n        const isAutoPtrSig = (s) => 'P' === s;\n        const sigLetter = (s) => (isFuncSig(s) ? 'p' : s[0]);\n\n        const sigIR = function (s) {\n          switch (sigLetter(s)) {\n            case 'c':\n            case 'C':\n              return 'i8';\n            case 'i':\n              return 'i32';\n            case 'p':\n            case 'P':\n            case 's':\n              return ptrIR;\n            case 'j':\n              return 'i64';\n            case 'f':\n              return 'float';\n            case 'd':\n              return 'double';\n          }\n          toss('Unhandled signature IR:', s);\n        };\n\n        const affirmBigIntArray = BigInt64Array\n          ? () => true\n          : () => toss('BigInt64Array is not available.');\n\n        const sigDVGetter = function (s) {\n          switch (sigLetter(s)) {\n            case 'p':\n            case 'P':\n            case 's': {\n              switch (ptrSizeof) {\n                case 4:\n                  return 'getInt32';\n                case 8:\n                  return affirmBigIntArray() && 'getBigInt64';\n              }\n              break;\n            }\n            case 'i':\n              return 'getInt32';\n            case 'c':\n              return 'getInt8';\n            case 'C':\n              return 'getUint8';\n            case 'j':\n              return affirmBigIntArray() && 'getBigInt64';\n            case 'f':\n              return 'getFloat32';\n            case 'd':\n              return 'getFloat64';\n          }\n          toss('Unhandled DataView getter for signature:', s);\n        };\n\n        const sigDVSetter = function (s) {\n          switch (sigLetter(s)) {\n            case 'p':\n            case 'P':\n            case 's': {\n              switch (ptrSizeof) {\n                case 4:\n                  return 'setInt32';\n                case 8:\n                  return affirmBigIntArray() && 'setBigInt64';\n              }\n              break;\n            }\n            case 'i':\n              return 'setInt32';\n            case 'c':\n              return 'setInt8';\n            case 'C':\n              return 'setUint8';\n            case 'j':\n              return affirmBigIntArray() && 'setBigInt64';\n            case 'f':\n              return 'setFloat32';\n            case 'd':\n              return 'setFloat64';\n          }\n          toss('Unhandled DataView setter for signature:', s);\n        };\n\n        const sigDVSetWrapper = function (s) {\n          switch (sigLetter(s)) {\n            case 'i':\n            case 'f':\n            case 'c':\n            case 'C':\n            case 'd':\n              return Number;\n            case 'j':\n              return affirmBigIntArray() && BigInt;\n            case 'p':\n            case 'P':\n            case 's':\n              switch (ptrSizeof) {\n                case 4:\n                  return Number;\n                case 8:\n                  return affirmBigIntArray() && BigInt;\n              }\n              break;\n          }\n          toss('Unhandled DataView set wrapper for signature:', s);\n        };\n\n        const sPropName = (s, k) => s + '::' + k;\n\n        const __propThrowOnSet = function (structName, propName) {\n          return () => toss(sPropName(structName, propName), 'is read-only.');\n        };\n\n        const __instancePointerMap = new WeakMap();\n\n        const xPtrPropName = '(pointer-is-external)';\n\n        const __freeStruct = function (ctor, obj, m) {\n          if (!m) m = __instancePointerMap.get(obj);\n          if (m) {\n            __instancePointerMap.delete(obj);\n            if (Array.isArray(obj.ondispose)) {\n              let x;\n              while ((x = obj.ondispose.shift())) {\n                try {\n                  if (x instanceof Function) x.call(obj);\n                  else if (x instanceof StructType) x.dispose();\n                  else if ('number' === typeof x) dealloc(x);\n                } catch (e) {\n                  console.warn(\n                    'ondispose() for',\n                    ctor.structName,\n                    '@',\n                    m,\n                    'threw. NOT propagating it.',\n                    e,\n                  );\n                }\n              }\n            } else if (obj.ondispose instanceof Function) {\n              try {\n                obj.ondispose();\n              } catch (e) {\n                console.warn(\n                  'ondispose() for',\n                  ctor.structName,\n                  '@',\n                  m,\n                  'threw. NOT propagating it.',\n                  e,\n                );\n              }\n            }\n            delete obj.ondispose;\n            if (ctor.debugFlags.__flags.dealloc) {\n              log(\n                'debug.dealloc:',\n                obj[xPtrPropName] ? 'EXTERNAL' : '',\n                ctor.structName,\n                'instance:',\n                ctor.structInfo.sizeof,\n                'bytes @' + m,\n              );\n            }\n            if (!obj[xPtrPropName]) dealloc(m);\n          }\n        };\n\n        const rop = (v) => {\n          return {\n            configurable: false,\n            writable: false,\n            iterable: false,\n            value: v,\n          };\n        };\n\n        const __allocStruct = function (ctor, obj, m) {\n          let fill = !m;\n          if (m) Object.defineProperty(obj, xPtrPropName, rop(m));\n          else {\n            m = alloc(ctor.structInfo.sizeof);\n            if (!m) toss('Allocation of', ctor.structName, 'structure failed.');\n          }\n          try {\n            if (ctor.debugFlags.__flags.alloc) {\n              log(\n                'debug.alloc:',\n                fill ? '' : 'EXTERNAL',\n                ctor.structName,\n                'instance:',\n                ctor.structInfo.sizeof,\n                'bytes @' + m,\n              );\n            }\n            if (fill) heap().fill(0, m, m + ctor.structInfo.sizeof);\n            __instancePointerMap.set(obj, m);\n          } catch (e) {\n            __freeStruct(ctor, obj, m);\n            throw e;\n          }\n        };\n\n        const __memoryDump = function () {\n          const p = this.pointer;\n          return p\n            ? new Uint8Array(heap().slice(p, p + this.structInfo.sizeof))\n            : null;\n        };\n\n        const __memberKey = (k) => memberPrefix + k + memberSuffix;\n        const __memberKeyProp = rop(__memberKey);\n\n        const __lookupMember = function (\n          structInfo,\n          memberName,\n          tossIfNotFound = true,\n        ) {\n          let m = structInfo.members[memberName];\n          if (!m && (memberPrefix || memberSuffix)) {\n            for (const v of Object.values(structInfo.members)) {\n              if (v.key === memberName) {\n                m = v;\n                break;\n              }\n            }\n            if (!m && tossIfNotFound) {\n              toss(\n                sPropName(structInfo.name, memberName),\n                'is not a mapped struct member.',\n              );\n            }\n          }\n          return m;\n        };\n\n        const __memberSignature = function f(\n          obj,\n          memberName,\n          emscriptenFormat = false,\n        ) {\n          if (!f._)\n            f._ = (x) =>\n              x.replace(/[^vipPsjrdcC]/g, '').replace(/[pPscC]/g, 'i');\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          return emscriptenFormat ? f._(m.signature) : m.signature;\n        };\n\n        const __ptrPropDescriptor = {\n          configurable: false,\n          enumerable: false,\n          get: function () {\n            return __instancePointerMap.get(this);\n          },\n          set: () => toss(\"Cannot assign the 'pointer' property of a struct.\"),\n        };\n\n        const __structMemberKeys = rop(function () {\n          const a = [];\n          for (const k of Object.keys(this.structInfo.members)) {\n            a.push(this.memberKey(k));\n          }\n          return a;\n        });\n\n        const __utf8Decoder = new TextDecoder('utf-8');\n        const __utf8Encoder = new TextEncoder();\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n        const __utf8Decode = function (arrayBuffer, begin, end) {\n          return __utf8Decoder.decode(\n            arrayBuffer.buffer instanceof __SAB\n              ? arrayBuffer.slice(begin, end)\n              : arrayBuffer.subarray(begin, end),\n          );\n        };\n\n        const __memberIsString = function (\n          obj,\n          memberName,\n          tossIfNotFound = false,\n        ) {\n          const m = __lookupMember(obj.structInfo, memberName, tossIfNotFound);\n          return m && 1 === m.signature.length && 's' === m.signature[0]\n            ? m\n            : false;\n        };\n\n        const __affirmCStringSignature = function (member) {\n          if ('s' === member.signature) return;\n          toss(\n            'Invalid member type signature for C-string value:',\n            JSON.stringify(member),\n          );\n        };\n\n        const __memberToJsString = function f(obj, memberName) {\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          __affirmCStringSignature(m);\n          const addr = obj[m.key];\n\n          if (!addr) return null;\n          let pos = addr;\n          const mem = heap();\n          for (; mem[pos] !== 0; ++pos) {}\n\n          return addr === pos ? '' : __utf8Decode(mem, addr, pos);\n        };\n\n        const __addOnDispose = function (obj, ...v) {\n          if (obj.ondispose) {\n            if (!Array.isArray(obj.ondispose)) {\n              obj.ondispose = [obj.ondispose];\n            }\n          } else {\n            obj.ondispose = [];\n          }\n          obj.ondispose.push(...v);\n        };\n\n        const __allocCString = function (str) {\n          const u = __utf8Encoder.encode(str);\n          const mem = alloc(u.length + 1);\n          if (!mem) toss('Allocation error while duplicating string:', str);\n          const h = heap();\n\n          h.set(u, mem);\n          h[mem + u.length] = 0;\n\n          return mem;\n        };\n\n        const __setMemberCString = function (obj, memberName, str) {\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          __affirmCStringSignature(m);\n\n          const mem = __allocCString(str);\n          obj[m.key] = mem;\n          __addOnDispose(obj, mem);\n          return obj;\n        };\n\n        const StructType = function ctor(structName, structInfo) {\n          if (arguments[2] !== rop) {\n            toss(\n              'Do not call the StructType constructor',\n              'from client-level code.',\n            );\n          }\n          Object.defineProperties(this, {\n            structName: rop(structName),\n            structInfo: rop(structInfo),\n          });\n        };\n\n        StructType.prototype = Object.create(null, {\n          dispose: rop(function () {\n            __freeStruct(this.constructor, this);\n          }),\n          lookupMember: rop(function (memberName, tossIfNotFound = true) {\n            return __lookupMember(this.structInfo, memberName, tossIfNotFound);\n          }),\n          memberToJsString: rop(function (memberName) {\n            return __memberToJsString(this, memberName);\n          }),\n          memberIsString: rop(function (memberName, tossIfNotFound = true) {\n            return __memberIsString(this, memberName, tossIfNotFound);\n          }),\n          memberKey: __memberKeyProp,\n          memberKeys: __structMemberKeys,\n          memberSignature: rop(function (memberName, emscriptenFormat = false) {\n            return __memberSignature(this, memberName, emscriptenFormat);\n          }),\n          memoryDump: rop(__memoryDump),\n          pointer: __ptrPropDescriptor,\n          setMemberCString: rop(function (memberName, str) {\n            return __setMemberCString(this, memberName, str);\n          }),\n        });\n\n        Object.assign(StructType.prototype, {\n          addOnDispose: function (...v) {\n            __addOnDispose(this, ...v);\n            return this;\n          },\n        });\n\n        Object.defineProperties(StructType, {\n          allocCString: rop(__allocCString),\n          isA: rop((v) => v instanceof StructType),\n          hasExternalPointer: rop(\n            (v) => v instanceof StructType && !!v[xPtrPropName],\n          ),\n          memberKey: __memberKeyProp,\n        });\n\n        const isNumericValue = (v) =>\n          Number.isFinite(v) || v instanceof (BigInt || Number);\n\n        const makeMemberWrapper = function f(ctor, name, descr) {\n          if (!f._) {\n            f._ = { getters: {}, setters: {}, sw: {} };\n            const a = ['i', 'c', 'C', 'p', 'P', 's', 'f', 'd', 'v()'];\n            if (bigIntEnabled) a.push('j');\n            a.forEach(function (v) {\n              f._.getters[v] = sigDVGetter(v);\n              f._.setters[v] = sigDVSetter(v);\n              f._.sw[v] = sigDVSetWrapper(v);\n            });\n            const rxSig1 = /^[ipPsjfdcC]$/,\n              rxSig2 = /^[vipPsjfdcC]\\([ipPsjfdcC]*\\)$/;\n            f.sigCheck = function (obj, name, key, sig) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                toss(obj.structName, 'already has a property named', key + '.');\n              }\n              rxSig1.test(sig) ||\n                rxSig2.test(sig) ||\n                toss(\n                  'Malformed signature for',\n                  sPropName(obj.structName, name) + ':',\n                  sig,\n                );\n            };\n          }\n          const key = ctor.memberKey(name);\n          f.sigCheck(ctor.prototype, name, key, descr.signature);\n          descr.key = key;\n          descr.name = name;\n          const sigGlyph = sigLetter(descr.signature);\n          const xPropName = sPropName(ctor.prototype.structName, key);\n          const dbg = ctor.prototype.debugFlags.__flags;\n\n          const prop = Object.create(null);\n          prop.configurable = false;\n          prop.enumerable = false;\n          prop.get = function () {\n            if (dbg.getter) {\n              log(\n                'debug.getter:',\n                f._.getters[sigGlyph],\n                'for',\n                sigIR(sigGlyph),\n                xPropName,\n                '@',\n                this.pointer,\n                '+',\n                descr.offset,\n                'sz',\n                descr.sizeof,\n              );\n            }\n            let rc = new DataView(\n              heap().buffer,\n              this.pointer + descr.offset,\n              descr.sizeof,\n            )[f._.getters[sigGlyph]](0, isLittleEndian);\n            if (dbg.getter) log('debug.getter:', xPropName, 'result =', rc);\n            return rc;\n          };\n          if (descr.readOnly) {\n            prop.set = __propThrowOnSet(ctor.prototype.structName, key);\n          } else {\n            prop.set = function (v) {\n              if (dbg.setter) {\n                log(\n                  'debug.setter:',\n                  f._.setters[sigGlyph],\n                  'for',\n                  sigIR(sigGlyph),\n                  xPropName,\n                  '@',\n                  this.pointer,\n                  '+',\n                  descr.offset,\n                  'sz',\n                  descr.sizeof,\n                  v,\n                );\n              }\n              if (!this.pointer) {\n                toss('Cannot set struct property on disposed instance.');\n              }\n              if (null === v) v = 0;\n              else\n                while (!isNumericValue(v)) {\n                  if (\n                    isAutoPtrSig(descr.signature) &&\n                    v instanceof StructType\n                  ) {\n                    v = v.pointer || 0;\n                    if (dbg.setter)\n                      log('debug.setter:', xPropName, 'resolved to', v);\n                    break;\n                  }\n                  toss('Invalid value for pointer-type', xPropName + '.');\n                }\n              new DataView(\n                heap().buffer,\n                this.pointer + descr.offset,\n                descr.sizeof,\n              )[f._.setters[sigGlyph]](0, f._.sw[sigGlyph](v), isLittleEndian);\n            };\n          }\n          Object.defineProperty(ctor.prototype, key, prop);\n        };\n\n        const StructBinder = function StructBinder(structName, structInfo) {\n          if (1 === arguments.length) {\n            structInfo = structName;\n            structName = structInfo.name;\n          } else if (!structInfo.name) {\n            structInfo.name = structName;\n          }\n          if (!structName) toss('Struct name is required.');\n          let lastMember = false;\n          Object.keys(structInfo.members).forEach((k) => {\n            const m = structInfo.members[k];\n            if (!m.sizeof) toss(structName, 'member', k, 'is missing sizeof.');\n            else if (m.sizeof === 1) {\n              m.signature === 'c' ||\n                m.signature === 'C' ||\n                toss(\n                  'Unexpected sizeof==1 member',\n                  sPropName(structInfo.name, k),\n                  'with signature',\n                  m.signature,\n                );\n            } else {\n              if (0 !== m.sizeof % 4) {\n                console.warn(\n                  'Invalid struct member description =',\n                  m,\n                  'from',\n                  structInfo,\n                );\n                toss(\n                  structName,\n                  'member',\n                  k,\n                  'sizeof is not aligned. sizeof=' + m.sizeof,\n                );\n              }\n              if (0 !== m.offset % 4) {\n                console.warn(\n                  'Invalid struct member description =',\n                  m,\n                  'from',\n                  structInfo,\n                );\n                toss(\n                  structName,\n                  'member',\n                  k,\n                  'offset is not aligned. offset=' + m.offset,\n                );\n              }\n            }\n            if (!lastMember || lastMember.offset < m.offset) lastMember = m;\n          });\n          if (!lastMember) toss('No member property descriptions found.');\n          else if (structInfo.sizeof < lastMember.offset + lastMember.sizeof) {\n            toss(\n              'Invalid struct config:',\n              structName,\n              'max member offset (' + lastMember.offset + ') ',\n              'extends past end of struct (sizeof=' + structInfo.sizeof + ').',\n            );\n          }\n          const debugFlags = rop(SBF.__makeDebugFlags(StructBinder.debugFlags));\n\n          const StructCtor = function StructCtor(externalMemory) {\n            if (!(this instanceof StructCtor)) {\n              toss(\n                'The',\n                structName,\n                \"constructor may only be called via 'new'.\",\n              );\n            } else if (arguments.length) {\n              if (\n                externalMemory !== (externalMemory | 0) ||\n                externalMemory <= 0\n              ) {\n                toss('Invalid pointer value for', structName, 'constructor.');\n              }\n              __allocStruct(StructCtor, this, externalMemory);\n            } else {\n              __allocStruct(StructCtor, this);\n            }\n          };\n          Object.defineProperties(StructCtor, {\n            debugFlags: debugFlags,\n            isA: rop((v) => v instanceof StructCtor),\n            memberKey: __memberKeyProp,\n            memberKeys: __structMemberKeys,\n            methodInfoForKey: rop(function (mKey) {}),\n            structInfo: rop(structInfo),\n            structName: rop(structName),\n          });\n          StructCtor.prototype = new StructType(structName, structInfo, rop);\n          Object.defineProperties(StructCtor.prototype, {\n            debugFlags: debugFlags,\n            constructor: rop(StructCtor),\n          });\n          Object.keys(structInfo.members).forEach((name) =>\n            makeMemberWrapper(StructCtor, name, structInfo.members[name]),\n          );\n          return StructCtor;\n        };\n        StructBinder.StructType = StructType;\n        StructBinder.config = config;\n        StructBinder.allocCString = __allocCString;\n        if (!StructBinder.debugFlags) {\n          StructBinder.debugFlags = SBF.__makeDebugFlags(SBF.debugFlags);\n        }\n        return StructBinder;\n      };\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        'use strict';\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n        const toss3 = sqlite3.SQLite3Error.toss;\n        const capi = sqlite3.capi,\n          wasm = sqlite3.wasm,\n          util = sqlite3.util;\n        globalThis.WhWasmUtilInstaller(wasm);\n        delete globalThis.WhWasmUtilInstaller;\n\n        if (false) {}\n\n        wasm.bindingSignatures = [\n          ['sqlite3_aggregate_context', 'void*', 'sqlite3_context*', 'int'],\n\n          ['sqlite3_bind_double', 'int', 'sqlite3_stmt*', 'int', 'f64'],\n          ['sqlite3_bind_int', 'int', 'sqlite3_stmt*', 'int', 'int'],\n          ['sqlite3_bind_null', undefined, 'sqlite3_stmt*', 'int'],\n          ['sqlite3_bind_parameter_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_bind_parameter_index', 'int', 'sqlite3_stmt*', 'string'],\n          [\n            'sqlite3_bind_pointer',\n            'int',\n            'sqlite3_stmt*',\n            'int',\n            '*',\n            'string:static',\n            '*',\n          ],\n          [\n            'sqlite3_busy_handler',\n            'int',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                signature: 'i(pi)',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_busy_timeout', 'int', 'sqlite3*', 'int'],\n\n          ['sqlite3_changes', 'int', 'sqlite3*'],\n          ['sqlite3_clear_bindings', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_collation_needed', 'int', 'sqlite3*', '*', '*'],\n          ['sqlite3_column_blob', '*', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_bytes', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_column_double', 'f64', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_int', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_name', 'string', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_text', 'string', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_type', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_value', 'sqlite3_value*', 'sqlite3_stmt*', 'int'],\n          [\n            'sqlite3_commit_hook',\n            'void*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_commit_hook',\n                signature: 'i(p)',\n                contextKey: (argv) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_compileoption_get', 'string', 'int'],\n          ['sqlite3_compileoption_used', 'int', 'string'],\n          ['sqlite3_complete', 'int', 'string:flexible'],\n          ['sqlite3_context_db_handle', 'sqlite3*', 'sqlite3_context*'],\n\n          ['sqlite3_data_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_db_filename', 'string', 'sqlite3*', 'string'],\n          ['sqlite3_db_handle', 'sqlite3*', 'sqlite3_stmt*'],\n          ['sqlite3_db_name', 'string', 'sqlite3*', 'int'],\n          ['sqlite3_db_status', 'int', 'sqlite3*', 'int', '*', '*', 'int'],\n          ['sqlite3_errcode', 'int', 'sqlite3*'],\n          ['sqlite3_errmsg', 'string', 'sqlite3*'],\n          ['sqlite3_error_offset', 'int', 'sqlite3*'],\n          ['sqlite3_errstr', 'string', 'int'],\n          [\n            'sqlite3_exec',\n            'int',\n            [\n              'sqlite3*',\n              'string:flexible',\n              new wasm.xWrap.FuncPtrAdapter({\n                signature: 'i(pipp)',\n                bindScope: 'transient',\n                callProxy: (callback) => {\n                  let aNames;\n                  return (pVoid, nCols, pColVals, pColNames) => {\n                    try {\n                      const aVals = wasm.cArgvToJs(nCols, pColVals);\n                      if (!aNames) aNames = wasm.cArgvToJs(nCols, pColNames);\n                      return callback(aVals, aNames) | 0;\n                    } catch (e) {\n                      return e.resultCode || capi.SQLITE_ERROR;\n                    }\n                  };\n                },\n              }),\n              '*',\n              '**',\n            ],\n          ],\n          ['sqlite3_expanded_sql', 'string', 'sqlite3_stmt*'],\n          ['sqlite3_extended_errcode', 'int', 'sqlite3*'],\n          ['sqlite3_extended_result_codes', 'int', 'sqlite3*', 'int'],\n          ['sqlite3_file_control', 'int', 'sqlite3*', 'string', 'int', '*'],\n          ['sqlite3_finalize', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_free', undefined, '*'],\n          ['sqlite3_get_autocommit', 'int', 'sqlite3*'],\n          ['sqlite3_get_auxdata', '*', 'sqlite3_context*', 'int'],\n          ['sqlite3_initialize', undefined],\n\n          ['sqlite3_keyword_count', 'int'],\n          ['sqlite3_keyword_name', 'int', ['int', '**', '*']],\n          ['sqlite3_keyword_check', 'int', ['string', 'int']],\n          ['sqlite3_libversion', 'string'],\n          ['sqlite3_libversion_number', 'int'],\n          ['sqlite3_limit', 'int', ['sqlite3*', 'int', 'int']],\n          ['sqlite3_malloc', '*', 'int'],\n          ['sqlite3_open', 'int', 'string', '*'],\n          ['sqlite3_open_v2', 'int', 'string', '*', 'int', 'string'],\n\n          [\n            'sqlite3_progress_handler',\n            undefined,\n            [\n              'sqlite3*',\n              'int',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xProgressHandler',\n                signature: 'i(p)',\n                bindScope: 'context',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_realloc', '*', '*', 'int'],\n          ['sqlite3_reset', 'int', 'sqlite3_stmt*'],\n\n          [\n            'sqlite3_result_blob',\n            undefined,\n            'sqlite3_context*',\n            '*',\n            'int',\n            '*',\n          ],\n          ['sqlite3_result_double', undefined, 'sqlite3_context*', 'f64'],\n          [\n            'sqlite3_result_error',\n            undefined,\n            'sqlite3_context*',\n            'string',\n            'int',\n          ],\n          ['sqlite3_result_error_code', undefined, 'sqlite3_context*', 'int'],\n          ['sqlite3_result_error_nomem', undefined, 'sqlite3_context*'],\n          ['sqlite3_result_error_toobig', undefined, 'sqlite3_context*'],\n          ['sqlite3_result_int', undefined, 'sqlite3_context*', 'int'],\n          ['sqlite3_result_null', undefined, 'sqlite3_context*'],\n          [\n            'sqlite3_result_pointer',\n            undefined,\n            'sqlite3_context*',\n            '*',\n            'string:static',\n            '*',\n          ],\n          ['sqlite3_result_subtype', undefined, 'sqlite3_value*', 'int'],\n          [\n            'sqlite3_result_text',\n            undefined,\n            'sqlite3_context*',\n            'string',\n            'int',\n            '*',\n          ],\n          ['sqlite3_result_zeroblob', undefined, 'sqlite3_context*', 'int'],\n          [\n            'sqlite3_rollback_hook',\n            'void*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_rollback_hook',\n                signature: 'v(p)',\n                contextKey: (argv) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          [\n            'sqlite3_set_authorizer',\n            'int',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_set_authorizer::xAuth',\n                signature: 'i(pi' + 'ssss)',\n                contextKey: (argv, argIndex) => argv[0],\n                callProxy: (callback) => {\n                  return (pV, iCode, s0, s1, s2, s3) => {\n                    try {\n                      s0 = s0 && wasm.cstrToJs(s0);\n                      s1 = s1 && wasm.cstrToJs(s1);\n                      s2 = s2 && wasm.cstrToJs(s2);\n                      s3 = s3 && wasm.cstrToJs(s3);\n                      return callback(pV, iCode, s0, s1, s2, s3) || 0;\n                    } catch (e) {\n                      return e.resultCode || capi.SQLITE_ERROR;\n                    }\n                  };\n                },\n              }),\n              '*',\n            ],\n          ],\n          [\n            'sqlite3_set_auxdata',\n            undefined,\n            [\n              'sqlite3_context*',\n              'int',\n              '*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xDestroyAuxData',\n                signature: 'v(*)',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n            ],\n          ],\n          ['sqlite3_shutdown', undefined],\n          ['sqlite3_sourceid', 'string'],\n          ['sqlite3_sql', 'string', 'sqlite3_stmt*'],\n          ['sqlite3_status', 'int', 'int', '*', '*', 'int'],\n          ['sqlite3_step', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_stmt_isexplain', 'int', ['sqlite3_stmt*']],\n          ['sqlite3_stmt_readonly', 'int', ['sqlite3_stmt*']],\n          ['sqlite3_stmt_status', 'int', 'sqlite3_stmt*', 'int', 'int'],\n          ['sqlite3_strglob', 'int', 'string', 'string'],\n          ['sqlite3_stricmp', 'int', 'string', 'string'],\n          ['sqlite3_strlike', 'int', 'string', 'string', 'int'],\n          ['sqlite3_strnicmp', 'int', 'string', 'string', 'int'],\n          [\n            'sqlite3_table_column_metadata',\n            'int',\n            'sqlite3*',\n            'string',\n            'string',\n            'string',\n            '**',\n            '**',\n            '*',\n            '*',\n            '*',\n          ],\n          ['sqlite3_total_changes', 'int', 'sqlite3*'],\n          [\n            'sqlite3_trace_v2',\n            'int',\n            [\n              'sqlite3*',\n              'int',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_trace_v2::callback',\n                signature: 'i(ippp)',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_txn_state', 'int', ['sqlite3*', 'string']],\n\n          ['sqlite3_uri_boolean', 'int', 'sqlite3_filename', 'string', 'int'],\n          ['sqlite3_uri_key', 'string', 'sqlite3_filename', 'int'],\n          ['sqlite3_uri_parameter', 'string', 'sqlite3_filename', 'string'],\n          ['sqlite3_user_data', 'void*', 'sqlite3_context*'],\n          ['sqlite3_value_blob', '*', 'sqlite3_value*'],\n          ['sqlite3_value_bytes', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_double', 'f64', 'sqlite3_value*'],\n          ['sqlite3_value_dup', 'sqlite3_value*', 'sqlite3_value*'],\n          ['sqlite3_value_free', undefined, 'sqlite3_value*'],\n          ['sqlite3_value_frombind', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_int', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_nochange', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_numeric_type', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_pointer', '*', 'sqlite3_value*', 'string:static'],\n          ['sqlite3_value_subtype', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_text', 'string', 'sqlite3_value*'],\n          ['sqlite3_value_type', 'int', 'sqlite3_value*'],\n          ['sqlite3_vfs_find', '*', 'string'],\n          ['sqlite3_vfs_register', 'int', 'sqlite3_vfs*', 'int'],\n          ['sqlite3_vfs_unregister', 'int', 'sqlite3_vfs*'],\n        ];\n\n        if (false) {}\n\n        if (wasm.exports.sqlite3_activate_see instanceof Function) {\n          wasm.bindingSignatures.push(\n            ['sqlite3_key', 'int', 'sqlite3*', 'string', 'int'],\n            ['sqlite3_key_v2', 'int', 'sqlite3*', 'string', '*', 'int'],\n            ['sqlite3_rekey', 'int', 'sqlite3*', 'string', 'int'],\n            ['sqlite3_rekey_v2', 'int', 'sqlite3*', 'string', '*', 'int'],\n            ['sqlite3_activate_see', undefined, 'string'],\n          );\n        }\n\n        wasm.bindingSignatures.int64 = [\n          ['sqlite3_bind_int64', 'int', ['sqlite3_stmt*', 'int', 'i64']],\n          ['sqlite3_changes64', 'i64', ['sqlite3*']],\n          ['sqlite3_column_int64', 'i64', ['sqlite3_stmt*', 'int']],\n          [\n            'sqlite3_create_module',\n            'int',\n            ['sqlite3*', 'string', 'sqlite3_module*', '*'],\n          ],\n          [\n            'sqlite3_create_module_v2',\n            'int',\n            ['sqlite3*', 'string', 'sqlite3_module*', '*', '*'],\n          ],\n          ['sqlite3_declare_vtab', 'int', ['sqlite3*', 'string:flexible']],\n          [\n            'sqlite3_deserialize',\n            'int',\n            'sqlite3*',\n            'string',\n            '*',\n            'i64',\n            'i64',\n            'int',\n          ],\n          ['sqlite3_drop_modules', 'int', ['sqlite3*', '**']],\n          ['sqlite3_last_insert_rowid', 'i64', ['sqlite3*']],\n          ['sqlite3_malloc64', '*', 'i64'],\n          ['sqlite3_msize', 'i64', '*'],\n          ['sqlite3_overload_function', 'int', ['sqlite3*', 'string', 'int']],\n          ['sqlite3_preupdate_blobwrite', 'int', 'sqlite3*'],\n          ['sqlite3_preupdate_count', 'int', 'sqlite3*'],\n          ['sqlite3_preupdate_depth', 'int', 'sqlite3*'],\n          [\n            'sqlite3_preupdate_hook',\n            '*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_preupdate_hook',\n                signature: 'v(ppippjj)',\n                contextKey: (argv) => argv[0],\n                callProxy: (callback) => {\n                  return (p, db, op, zDb, zTbl, iKey1, iKey2) => {\n                    callback(\n                      p,\n                      db,\n                      op,\n                      wasm.cstrToJs(zDb),\n                      wasm.cstrToJs(zTbl),\n                      iKey1,\n                      iKey2,\n                    );\n                  };\n                },\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_preupdate_new', 'int', ['sqlite3*', 'int', '**']],\n          ['sqlite3_preupdate_old', 'int', ['sqlite3*', 'int', '**']],\n          ['sqlite3_realloc64', '*', '*', 'i64'],\n          ['sqlite3_result_int64', undefined, '*', 'i64'],\n          ['sqlite3_result_zeroblob64', 'int', '*', 'i64'],\n          ['sqlite3_serialize', '*', 'sqlite3*', 'string', '*', 'int'],\n          ['sqlite3_set_last_insert_rowid', undefined, ['sqlite3*', 'i64']],\n          ['sqlite3_status64', 'int', 'int', '*', '*', 'int'],\n          ['sqlite3_total_changes64', 'i64', ['sqlite3*']],\n          [\n            'sqlite3_update_hook',\n            '*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_update_hook',\n                signature: 'v(iippj)',\n                contextKey: (argv) => argv[0],\n                callProxy: (callback) => {\n                  return (p, op, z0, z1, rowid) => {\n                    callback(\n                      p,\n                      op,\n                      wasm.cstrToJs(z0),\n                      wasm.cstrToJs(z1),\n                      rowid,\n                    );\n                  };\n                },\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_uri_int64', 'i64', ['sqlite3_filename', 'string', 'i64']],\n          ['sqlite3_value_int64', 'i64', 'sqlite3_value*'],\n          ['sqlite3_vtab_collation', 'string', 'sqlite3_index_info*', 'int'],\n          ['sqlite3_vtab_distinct', 'int', 'sqlite3_index_info*'],\n          ['sqlite3_vtab_in', 'int', 'sqlite3_index_info*', 'int', 'int'],\n          ['sqlite3_vtab_in_first', 'int', 'sqlite3_value*', '**'],\n          ['sqlite3_vtab_in_next', 'int', 'sqlite3_value*', '**'],\n\n          ['sqlite3_vtab_nochange', 'int', 'sqlite3_context*'],\n          ['sqlite3_vtab_on_conflict', 'int', 'sqlite3*'],\n          ['sqlite3_vtab_rhs_value', 'int', 'sqlite3_index_info*', 'int', '**'],\n        ];\n\n        if (wasm.bigIntEnabled && !!wasm.exports.sqlite3changegroup_add) {\n          const __ipsProxy = {\n            signature: 'i(ps)',\n            callProxy: (callback) => {\n              return (p, s) => {\n                try {\n                  return callback(p, wasm.cstrToJs(s)) | 0;\n                } catch (e) {\n                  return e.resultCode || capi.SQLITE_ERROR;\n                }\n              };\n            },\n          };\n\n          wasm.bindingSignatures.int64.push(\n            ...[\n              [\n                'sqlite3changegroup_add',\n                'int',\n                ['sqlite3_changegroup*', 'int', 'void*'],\n              ],\n              [\n                'sqlite3changegroup_add_strm',\n                'int',\n                [\n                  'sqlite3_changegroup*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changegroup_delete',\n                undefined,\n                ['sqlite3_changegroup*'],\n              ],\n              ['sqlite3changegroup_new', 'int', ['**']],\n              [\n                'sqlite3changegroup_output',\n                'int',\n                ['sqlite3_changegroup*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changegroup_output_strm',\n                'int',\n                [\n                  'sqlite3_changegroup*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply',\n                'int',\n                [\n                  'sqlite3*',\n                  'int',\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_strm',\n                'int',\n                [\n                  'sqlite3*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_v2',\n                'int',\n                [\n                  'sqlite3*',\n                  'int',\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  '**',\n                  'int*',\n                  'int',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_v2_strm',\n                'int',\n                [\n                  'sqlite3*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  '**',\n                  'int*',\n                  'int',\n                ],\n              ],\n              [\n                'sqlite3changeset_concat',\n                'int',\n                ['int', 'void*', 'int', 'void*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changeset_concat_strm',\n                'int',\n                [\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInputA',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInputB',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_conflict',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              ['sqlite3changeset_finalize', 'int', ['sqlite3_changeset_iter*']],\n              [\n                'sqlite3changeset_fk_conflicts',\n                'int',\n                ['sqlite3_changeset_iter*', 'int*'],\n              ],\n              [\n                'sqlite3changeset_invert',\n                'int',\n                ['int', 'void*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changeset_invert_strm',\n                'int',\n                [\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_new',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              ['sqlite3changeset_next', 'int', ['sqlite3_changeset_iter*']],\n              [\n                'sqlite3changeset_old',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              [\n                'sqlite3changeset_op',\n                'int',\n                ['sqlite3_changeset_iter*', '**', 'int*', 'int*', 'int*'],\n              ],\n              [\n                'sqlite3changeset_pk',\n                'int',\n                ['sqlite3_changeset_iter*', '**', 'int*'],\n              ],\n              ['sqlite3changeset_start', 'int', ['**', 'int', '*']],\n              [\n                'sqlite3changeset_start_strm',\n                'int',\n                [\n                  '**',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              ['sqlite3changeset_start_v2', 'int', ['**', 'int', '*', 'int']],\n              [\n                'sqlite3changeset_start_v2_strm',\n                'int',\n                [\n                  '**',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  'int',\n                ],\n              ],\n              ['sqlite3session_attach', 'int', ['sqlite3_session*', 'string']],\n              [\n                'sqlite3session_changeset',\n                'int',\n                ['sqlite3_session*', 'int*', '**'],\n              ],\n              ['sqlite3session_changeset_size', 'i64', ['sqlite3_session*']],\n              [\n                'sqlite3session_changeset_strm',\n                'int',\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              ['sqlite3session_config', 'int', ['int', 'void*']],\n              ['sqlite3session_create', 'int', ['sqlite3*', 'string', '**']],\n\n              [\n                'sqlite3session_diff',\n                'int',\n                ['sqlite3_session*', 'string', 'string', '**'],\n              ],\n              ['sqlite3session_enable', 'int', ['sqlite3_session*', 'int']],\n              ['sqlite3session_indirect', 'int', ['sqlite3_session*', 'int']],\n              ['sqlite3session_isempty', 'int', ['sqlite3_session*']],\n              ['sqlite3session_memory_used', 'i64', ['sqlite3_session*']],\n              [\n                'sqlite3session_object_config',\n                'int',\n                ['sqlite3_session*', 'int', 'void*'],\n              ],\n              [\n                'sqlite3session_patchset',\n                'int',\n                ['sqlite3_session*', '*', '**'],\n              ],\n              [\n                'sqlite3session_patchset_strm',\n                'int',\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3session_table_filter',\n                undefined,\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    ...__ipsProxy,\n                    contextKey: (argv, argIndex) => argv[0],\n                  }),\n                  '*',\n                ],\n              ],\n            ],\n          );\n        }\n\n        wasm.bindingSignatures.wasm = [\n          ['sqlite3_wasm_db_reset', 'int', 'sqlite3*'],\n          ['sqlite3_wasm_db_vfs', 'sqlite3_vfs*', 'sqlite3*', 'string'],\n          [\n            'sqlite3_wasm_vfs_create_file',\n            'int',\n            'sqlite3_vfs*',\n            'string',\n            '*',\n            'int',\n          ],\n          ['sqlite3_wasm_posix_create_file', 'int', 'string', '*', 'int'],\n          ['sqlite3_wasm_vfs_unlink', 'int', 'sqlite3_vfs*', 'string'],\n        ];\n\n        sqlite3.StructBinder = globalThis.Jaccwabyt({\n          heap:  false ? 0 : wasm.heap8u,\n          alloc: wasm.alloc,\n          dealloc: wasm.dealloc,\n          bigIntEnabled: wasm.bigIntEnabled,\n          memberPrefix: '$',\n        });\n        delete globalThis.Jaccwabyt;\n\n        {\n          const __xString = wasm.xWrap.argAdapter('string');\n          wasm.xWrap.argAdapter('string:flexible', (v) =>\n            __xString(util.flexibleString(v)),\n          );\n\n          wasm.xWrap.argAdapter(\n            'string:static',\n            function (v) {\n              if (wasm.isPtr(v)) return v;\n              v = '' + v;\n              let rc = this[v];\n              return rc || (this[v] = wasm.allocCString(v));\n            }.bind(Object.create(null)),\n          );\n\n          const __xArgPtr = wasm.xWrap.argAdapter('*');\n          const nilType = function () {};\n          wasm.xWrap.argAdapter('sqlite3_filename', __xArgPtr)(\n            'sqlite3_context*',\n            __xArgPtr,\n          )('sqlite3_value*', __xArgPtr)('void*', __xArgPtr)(\n            'sqlite3_changegroup*',\n            __xArgPtr,\n          )('sqlite3_changeset_iter*', __xArgPtr)(\n            'sqlite3_session*',\n            __xArgPtr,\n          )('sqlite3_stmt*', (v) =>\n            __xArgPtr(\n              v instanceof (sqlite3?.oo1?.Stmt || nilType) ? v.pointer : v,\n            ),\n          )('sqlite3*', (v) =>\n            __xArgPtr(\n              v instanceof (sqlite3?.oo1?.DB || nilType) ? v.pointer : v,\n            ),\n          )('sqlite3_index_info*', (v) =>\n            __xArgPtr(\n              v instanceof (capi.sqlite3_index_info || nilType) ? v.pointer : v,\n            ),\n          )('sqlite3_module*', (v) =>\n            __xArgPtr(\n              v instanceof (capi.sqlite3_module || nilType) ? v.pointer : v,\n            ),\n          )('sqlite3_vfs*', (v) => {\n            if ('string' === typeof v) {\n              return (\n                capi.sqlite3_vfs_find(v) ||\n                sqlite3.SQLite3Error.toss(\n                  capi.SQLITE_NOTFOUND,\n                  'Unknown sqlite3_vfs name:',\n                  v,\n                )\n              );\n            }\n            return __xArgPtr(\n              v instanceof (capi.sqlite3_vfs || nilType) ? v.pointer : v,\n            );\n          });\n\n          const __xRcPtr = wasm.xWrap.resultAdapter('*');\n          wasm.xWrap.resultAdapter('sqlite3*', __xRcPtr)(\n            'sqlite3_context*',\n            __xRcPtr,\n          )('sqlite3_stmt*', __xRcPtr)('sqlite3_value*', __xRcPtr)(\n            'sqlite3_vfs*',\n            __xRcPtr,\n          )('void*', __xRcPtr);\n\n          if (0 === wasm.exports.sqlite3_step.length) {\n            wasm.xWrap.doArgcCheck = false;\n            sqlite3.config.warn(\n              'Disabling sqlite3.wasm.xWrap.doArgcCheck due to environmental quirks.',\n            );\n          }\n          for (const e of wasm.bindingSignatures) {\n            capi[e[0]] = wasm.xWrap.apply(null, e);\n          }\n          for (const e of wasm.bindingSignatures.wasm) {\n            wasm[e[0]] = wasm.xWrap.apply(null, e);\n          }\n\n          const fI64Disabled = function (fname) {\n            return () =>\n              toss(\n                fname + '() is unavailable due to lack',\n                'of BigInt support in this build.',\n              );\n          };\n          for (const e of wasm.bindingSignatures.int64) {\n            capi[e[0]] = wasm.bigIntEnabled\n              ? wasm.xWrap.apply(null, e)\n              : fI64Disabled(e[0]);\n          }\n\n          delete wasm.bindingSignatures;\n\n          if (wasm.exports.sqlite3_wasm_db_error) {\n            const __db_err = wasm.xWrap(\n              'sqlite3_wasm_db_error',\n              'int',\n              'sqlite3*',\n              'int',\n              'string',\n            );\n\n            util.sqlite3_wasm_db_error = function (pDb, resultCode, message) {\n              if (resultCode instanceof sqlite3.WasmAllocError) {\n                resultCode = capi.SQLITE_NOMEM;\n                message = 0;\n              } else if (resultCode instanceof Error) {\n                message = message || '' + resultCode;\n                resultCode = resultCode.resultCode || capi.SQLITE_ERROR;\n              }\n              return pDb ? __db_err(pDb, resultCode, message) : resultCode;\n            };\n          } else {\n            util.sqlite3_wasm_db_error = function (pDb, errCode, msg) {\n              console.warn(\n                'sqlite3_wasm_db_error() is not exported.',\n                arguments,\n              );\n              return errCode;\n            };\n          }\n        }\n\n        {\n          const cJson = wasm.xCall('sqlite3_wasm_enum_json');\n          if (!cJson) {\n            toss(\n              \"Maintenance required: increase sqlite3_wasm_enum_json()'s\",\n              'static buffer size!',\n            );\n          }\n\n          wasm.ctype = JSON.parse(wasm.cstrToJs(cJson));\n\n          const defineGroups = [\n            'access',\n            'authorizer',\n            'blobFinalizers',\n            'changeset',\n            'config',\n            'dataTypes',\n            'dbConfig',\n            'dbStatus',\n            'encodings',\n            'fcntl',\n            'flock',\n            'ioCap',\n            'limits',\n            'openFlags',\n            'prepareFlags',\n            'resultCodes',\n            'sqlite3Status',\n            'stmtStatus',\n            'syncFlags',\n            'trace',\n            'txnState',\n            'udfFlags',\n            'version',\n          ];\n          if (wasm.bigIntEnabled) {\n            defineGroups.push('serialize', 'session', 'vtab');\n          }\n          for (const t of defineGroups) {\n            for (const e of Object.entries(wasm.ctype[t])) {\n              capi[e[0]] = e[1];\n            }\n          }\n          if (!wasm.functionEntry(capi.SQLITE_WASM_DEALLOC)) {\n            toss(\n              'Internal error: cannot resolve exported function',\n              'entry SQLITE_WASM_DEALLOC (==' + capi.SQLITE_WASM_DEALLOC + ').',\n            );\n          }\n          const __rcMap = Object.create(null);\n          for (const t of ['resultCodes']) {\n            for (const e of Object.entries(wasm.ctype[t])) {\n              __rcMap[e[1]] = e[0];\n            }\n          }\n\n          capi.sqlite3_js_rc_str = (rc) => __rcMap[rc];\n\n          const notThese = Object.assign(Object.create(null), {\n            WasmTestStruct: true,\n\n            sqlite3_kvvfs_methods: !util.isUIThread(),\n\n            sqlite3_index_info: !wasm.bigIntEnabled,\n            sqlite3_index_constraint: !wasm.bigIntEnabled,\n            sqlite3_index_orderby: !wasm.bigIntEnabled,\n            sqlite3_index_constraint_usage: !wasm.bigIntEnabled,\n          });\n          for (const s of wasm.ctype.structs) {\n            if (!notThese[s.name]) {\n              capi[s.name] = sqlite3.StructBinder(s);\n            }\n          }\n          if (capi.sqlite3_index_info) {\n            for (const k of [\n              'sqlite3_index_constraint',\n              'sqlite3_index_orderby',\n              'sqlite3_index_constraint_usage',\n            ]) {\n              capi.sqlite3_index_info[k] = capi[k];\n              delete capi[k];\n            }\n            capi.sqlite3_vtab_config = wasm.xWrap(\n              'sqlite3_wasm_vtab_config',\n              'int',\n              ['sqlite3*', 'int', 'int'],\n            );\n          }\n        }\n\n        const __dbArgcMismatch = (pDb, f, n) => {\n          return util.sqlite3_wasm_db_error(\n            pDb,\n            capi.SQLITE_MISUSE,\n            f + '() requires ' + n + ' argument' + (1 === n ? '' : 's') + '.',\n          );\n        };\n\n        const __errEncoding = (pDb) => {\n          return util.sqlite3_wasm_db_error(\n            pDb,\n            capi.SQLITE_FORMAT,\n            'SQLITE_UTF8 is the only supported encoding.',\n          );\n        };\n\n        const __argPDb = (pDb) => wasm.xWrap.argAdapter('sqlite3*')(pDb);\n        const __argStr = (str) => (wasm.isPtr(str) ? wasm.cstrToJs(str) : str);\n        const __dbCleanupMap = function (pDb, mode) {\n          pDb = __argPDb(pDb);\n          let m = this.dbMap.get(pDb);\n          if (!mode) {\n            this.dbMap.delete(pDb);\n            return m;\n          } else if (!m && mode > 0) {\n            this.dbMap.set(pDb, (m = Object.create(null)));\n          }\n          return m;\n        }.bind(\n          Object.assign(Object.create(null), {\n            dbMap: new Map(),\n          }),\n        );\n\n        __dbCleanupMap.addCollation = function (pDb, name) {\n          const m = __dbCleanupMap(pDb, 1);\n          if (!m.collation) m.collation = new Set();\n          m.collation.add(__argStr(name).toLowerCase());\n        };\n\n        __dbCleanupMap._addUDF = function (pDb, name, arity, map) {\n          name = __argStr(name).toLowerCase();\n          let u = map.get(name);\n          if (!u) map.set(name, (u = new Set()));\n          u.add(arity < 0 ? -1 : arity);\n        };\n\n        __dbCleanupMap.addFunction = function (pDb, name, arity) {\n          const m = __dbCleanupMap(pDb, 1);\n          if (!m.udf) m.udf = new Map();\n          this._addUDF(pDb, name, arity, m.udf);\n        };\n\n        __dbCleanupMap.addWindowFunc = function (pDb, name, arity) {\n          const m = __dbCleanupMap(pDb, 1);\n          if (!m.wudf) m.wudf = new Map();\n          this._addUDF(pDb, name, arity, m.wudf);\n        };\n\n        __dbCleanupMap.cleanup = function (pDb) {\n          pDb = __argPDb(pDb);\n\n          const closeArgs = [pDb];\n          for (const name of [\n            'sqlite3_busy_handler',\n            'sqlite3_commit_hook',\n            'sqlite3_preupdate_hook',\n            'sqlite3_progress_handler',\n            'sqlite3_rollback_hook',\n            'sqlite3_set_authorizer',\n            'sqlite3_trace_v2',\n            'sqlite3_update_hook',\n          ]) {\n            const x = wasm.exports[name];\n            closeArgs.length = x.length;\n            try {\n              capi[name](...closeArgs);\n            } catch (e) {\n              console.warn(\n                'close-time call of',\n                name + '(',\n                closeArgs,\n                ') threw:',\n                e,\n              );\n            }\n          }\n          const m = __dbCleanupMap(pDb, 0);\n          if (!m) return;\n          if (m.collation) {\n            for (const name of m.collation) {\n              try {\n                capi.sqlite3_create_collation_v2(\n                  pDb,\n                  name,\n                  capi.SQLITE_UTF8,\n                  0,\n                  0,\n                  0,\n                );\n              } catch (e) {}\n            }\n            delete m.collation;\n          }\n          let i;\n          for (i = 0; i < 2; ++i) {\n            const fmap = i ? m.wudf : m.udf;\n            if (!fmap) continue;\n            const func = i\n              ? capi.sqlite3_create_window_function\n              : capi.sqlite3_create_function_v2;\n            for (const e of fmap) {\n              const name = e[0],\n                arities = e[1];\n              const fargs = [pDb, name, 0, capi.SQLITE_UTF8, 0, 0, 0, 0, 0];\n              if (i) fargs.push(0);\n              for (const arity of arities) {\n                try {\n                  fargs[2] = arity;\n                  func.apply(null, fargs);\n                } catch (e) {}\n              }\n              arities.clear();\n            }\n            fmap.clear();\n          }\n          delete m.udf;\n          delete m.wudf;\n        };\n\n        {\n          const __sqlite3CloseV2 = wasm.xWrap(\n            'sqlite3_close_v2',\n            'int',\n            'sqlite3*',\n          );\n          capi.sqlite3_close_v2 = function (pDb) {\n            if (1 !== arguments.length)\n              return __dbArgcMismatch(pDb, 'sqlite3_close_v2', 1);\n            if (pDb) {\n              try {\n                __dbCleanupMap.cleanup(pDb);\n              } catch (e) {}\n            }\n            return __sqlite3CloseV2(pDb);\n          };\n        }\n\n        if (capi.sqlite3session_table_filter) {\n          const __sqlite3SessionDelete = wasm.xWrap(\n            'sqlite3session_delete',\n            undefined,\n            ['sqlite3_session*'],\n          );\n          capi.sqlite3session_delete = function (pSession) {\n            if (1 !== arguments.length) {\n              return __dbArgcMismatch(pDb, 'sqlite3session_delete', 1);\n            } else if (pSession) {\n              capi.sqlite3session_table_filter(pSession, 0, 0);\n            }\n            __sqlite3SessionDelete(pSession);\n          };\n        }\n\n        {\n          const contextKey = (argv, argIndex) => {\n            return (\n              'argv[' +\n              argIndex +\n              ']:' +\n              argv[0] +\n              ':' +\n              wasm.cstrToJs(argv[1]).toLowerCase()\n            );\n          };\n          const __sqlite3CreateCollationV2 = wasm.xWrap(\n            'sqlite3_create_collation_v2',\n            'int',\n            [\n              'sqlite3*',\n              'string',\n              'int',\n              '*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xCompare',\n                signature: 'i(pipip)',\n                contextKey,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xDestroy',\n                signature: 'v(p)',\n                contextKey,\n              }),\n            ],\n          );\n\n          capi.sqlite3_create_collation_v2 = function (\n            pDb,\n            zName,\n            eTextRep,\n            pArg,\n            xCompare,\n            xDestroy,\n          ) {\n            if (6 !== arguments.length)\n              return __dbArgcMismatch(pDb, 'sqlite3_create_collation_v2', 6);\n            else if (0 === (eTextRep & 0xf)) {\n              eTextRep |= capi.SQLITE_UTF8;\n            } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n              return __errEncoding(pDb);\n            }\n            try {\n              const rc = __sqlite3CreateCollationV2(\n                pDb,\n                zName,\n                eTextRep,\n                pArg,\n                xCompare,\n                xDestroy,\n              );\n              if (0 === rc && xCompare instanceof Function) {\n                __dbCleanupMap.addCollation(pDb, zName);\n              }\n              return rc;\n            } catch (e) {\n              return util.sqlite3_wasm_db_error(pDb, e);\n            }\n          };\n\n          capi.sqlite3_create_collation = (\n            pDb,\n            zName,\n            eTextRep,\n            pArg,\n            xCompare,\n          ) => {\n            return 5 === arguments.length\n              ? capi.sqlite3_create_collation_v2(\n                  pDb,\n                  zName,\n                  eTextRep,\n                  pArg,\n                  xCompare,\n                  0,\n                )\n              : __dbArgcMismatch(pDb, 'sqlite3_create_collation', 5);\n          };\n        }\n\n        {\n          const contextKey = function (argv, argIndex) {\n            return (\n              argv[0] +\n              ':' +\n              (argv[2] < 0 ? -1 : argv[2]) +\n              ':' +\n              argIndex +\n              ':' +\n              wasm.cstrToJs(argv[1]).toLowerCase()\n            );\n          };\n\n          const __cfProxy = Object.assign(Object.create(null), {\n            xInverseAndStep: {\n              signature: 'v(pip)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx, argc, pArgv) => {\n                  try {\n                    callback(pCtx, ...capi.sqlite3_values_to_js(argc, pArgv));\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xFinalAndValue: {\n              signature: 'v(p)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx) => {\n                  try {\n                    capi.sqlite3_result_js(pCtx, callback(pCtx));\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xFunc: {\n              signature: 'v(pip)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx, argc, pArgv) => {\n                  try {\n                    capi.sqlite3_result_js(\n                      pCtx,\n                      callback(pCtx, ...capi.sqlite3_values_to_js(argc, pArgv)),\n                    );\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xDestroy: {\n              signature: 'v(p)',\n              contextKey,\n\n              callProxy: (callback) => {\n                return (pVoid) => {\n                  try {\n                    callback(pVoid);\n                  } catch (e) {\n                    console.error('UDF xDestroy method threw:', e);\n                  }\n                };\n              },\n            },\n          });\n\n          const __sqlite3CreateFunction = wasm.xWrap(\n            'sqlite3_create_function_v2',\n            'int',\n            [\n              'sqlite3*',\n              'string',\n              'int',\n              'int',\n              '*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xFunc',\n                ...__cfProxy.xFunc,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xStep',\n                ...__cfProxy.xInverseAndStep,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xFinal',\n                ...__cfProxy.xFinalAndValue,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xDestroy',\n                ...__cfProxy.xDestroy,\n              }),\n            ],\n          );\n\n          const __sqlite3CreateWindowFunction = wasm.xWrap(\n            'sqlite3_create_window_function',\n            'int',\n            [\n              'sqlite3*',\n              'string',\n              'int',\n              'int',\n              '*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xStep',\n                ...__cfProxy.xInverseAndStep,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xFinal',\n                ...__cfProxy.xFinalAndValue,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xValue',\n                ...__cfProxy.xFinalAndValue,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xInverse',\n                ...__cfProxy.xInverseAndStep,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xDestroy',\n                ...__cfProxy.xDestroy,\n              }),\n            ],\n          );\n\n          capi.sqlite3_create_function_v2 = function f(\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                pDb,\n                'sqlite3_create_function_v2',\n                f.length,\n              );\n            } else if (0 === (eTextRep & 0xf)) {\n              eTextRep |= capi.SQLITE_UTF8;\n            } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n              return __errEncoding(pDb);\n            }\n            try {\n              const rc = __sqlite3CreateFunction(\n                pDb,\n                funcName,\n                nArg,\n                eTextRep,\n                pApp,\n                xFunc,\n                xStep,\n                xFinal,\n                xDestroy,\n              );\n              if (\n                0 === rc &&\n                (xFunc instanceof Function ||\n                  xStep instanceof Function ||\n                  xFinal instanceof Function ||\n                  xDestroy instanceof Function)\n              ) {\n                __dbCleanupMap.addFunction(pDb, funcName, nArg);\n              }\n              return rc;\n            } catch (e) {\n              console.error('sqlite3_create_function_v2() setup threw:', e);\n              return util.sqlite3_wasm_db_error(\n                pDb,\n                e,\n                'Creation of UDF threw: ' + e,\n              );\n            }\n          };\n\n          capi.sqlite3_create_function = function f(\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n          ) {\n            return f.length === arguments.length\n              ? capi.sqlite3_create_function_v2(\n                  pDb,\n                  funcName,\n                  nArg,\n                  eTextRep,\n                  pApp,\n                  xFunc,\n                  xStep,\n                  xFinal,\n                  0,\n                )\n              : __dbArgcMismatch(pDb, 'sqlite3_create_function', f.length);\n          };\n\n          capi.sqlite3_create_window_function = function f(\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xStep,\n            xFinal,\n            xValue,\n            xInverse,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                pDb,\n                'sqlite3_create_window_function',\n                f.length,\n              );\n            } else if (0 === (eTextRep & 0xf)) {\n              eTextRep |= capi.SQLITE_UTF8;\n            } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n              return __errEncoding(pDb);\n            }\n            try {\n              const rc = __sqlite3CreateWindowFunction(\n                pDb,\n                funcName,\n                nArg,\n                eTextRep,\n                pApp,\n                xStep,\n                xFinal,\n                xValue,\n                xInverse,\n                xDestroy,\n              );\n              if (\n                0 === rc &&\n                (xStep instanceof Function ||\n                  xFinal instanceof Function ||\n                  xValue instanceof Function ||\n                  xInverse instanceof Function ||\n                  xDestroy instanceof Function)\n              ) {\n                __dbCleanupMap.addWindowFunc(pDb, funcName, nArg);\n              }\n              return rc;\n            } catch (e) {\n              console.error('sqlite3_create_window_function() setup threw:', e);\n              return util.sqlite3_wasm_db_error(\n                pDb,\n                e,\n                'Creation of UDF threw: ' + e,\n              );\n            }\n          };\n\n          capi.sqlite3_create_function_v2.udfSetResult =\n            capi.sqlite3_create_function.udfSetResult =\n            capi.sqlite3_create_window_function.udfSetResult =\n              capi.sqlite3_result_js;\n\n          capi.sqlite3_create_function_v2.udfConvertArgs =\n            capi.sqlite3_create_function.udfConvertArgs =\n            capi.sqlite3_create_window_function.udfConvertArgs =\n              capi.sqlite3_values_to_js;\n\n          capi.sqlite3_create_function_v2.udfSetError =\n            capi.sqlite3_create_function.udfSetError =\n            capi.sqlite3_create_window_function.udfSetError =\n              capi.sqlite3_result_error_js;\n        }\n\n        {\n          const __flexiString = (v, n) => {\n            if ('string' === typeof v) {\n              n = -1;\n            } else if (util.isSQLableTypedArray(v)) {\n              n = v.byteLength;\n              v = util.typedArrayToString(\n                v instanceof ArrayBuffer ? new Uint8Array(v) : v,\n              );\n            } else if (Array.isArray(v)) {\n              v = v.join('');\n              n = -1;\n            }\n            return [v, n];\n          };\n\n          const __prepare = {\n            basic: wasm.xWrap('sqlite3_prepare_v3', 'int', [\n              'sqlite3*',\n              'string',\n              'int',\n              'int',\n              '**',\n              '**',\n            ]),\n\n            full: wasm.xWrap('sqlite3_prepare_v3', 'int', [\n              'sqlite3*',\n              '*',\n              'int',\n              'int',\n              '**',\n              '**',\n            ]),\n          };\n\n          capi.sqlite3_prepare_v3 = function f(\n            pDb,\n            sql,\n            sqlLen,\n            prepFlags,\n            ppStmt,\n            pzTail,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(pDb, 'sqlite3_prepare_v3', f.length);\n            }\n            const [xSql, xSqlLen] = __flexiString(sql, sqlLen);\n            switch (typeof xSql) {\n              case 'string':\n                return __prepare.basic(\n                  pDb,\n                  xSql,\n                  xSqlLen,\n                  prepFlags,\n                  ppStmt,\n                  null,\n                );\n              case 'number':\n                return __prepare.full(\n                  pDb,\n                  xSql,\n                  xSqlLen,\n                  prepFlags,\n                  ppStmt,\n                  pzTail,\n                );\n              default:\n                return util.sqlite3_wasm_db_error(\n                  pDb,\n                  capi.SQLITE_MISUSE,\n                  'Invalid SQL argument type for sqlite3_prepare_v2/v3().',\n                );\n            }\n          };\n\n          capi.sqlite3_prepare_v2 = function f(\n            pDb,\n            sql,\n            sqlLen,\n            ppStmt,\n            pzTail,\n          ) {\n            return f.length === arguments.length\n              ? capi.sqlite3_prepare_v3(pDb, sql, sqlLen, 0, ppStmt, pzTail)\n              : __dbArgcMismatch(pDb, 'sqlite3_prepare_v2', f.length);\n          };\n        }\n\n        {\n          const __bindText = wasm.xWrap('sqlite3_bind_text', 'int', [\n            'sqlite3_stmt*',\n            'int',\n            'string',\n            'int',\n            '*',\n          ]);\n          const __bindBlob = wasm.xWrap('sqlite3_bind_blob', 'int', [\n            'sqlite3_stmt*',\n            'int',\n            '*',\n            'int',\n            '*',\n          ]);\n\n          capi.sqlite3_bind_text = function f(\n            pStmt,\n            iCol,\n            text,\n            nText,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                capi.sqlite3_db_handle(pStmt),\n                'sqlite3_bind_text',\n                f.length,\n              );\n            } else if (wasm.isPtr(text) || null === text) {\n              return __bindText(pStmt, iCol, text, nText, xDestroy);\n            } else if (text instanceof ArrayBuffer) {\n              text = new Uint8Array(text);\n            } else if (Array.isArray(pMem)) {\n              text = pMem.join('');\n            }\n            let p, n;\n            try {\n              if (util.isSQLableTypedArray(text)) {\n                p = wasm.allocFromTypedArray(text);\n                n = text.byteLength;\n              } else if ('string' === typeof text) {\n                [p, n] = wasm.allocCString(text);\n              } else {\n                return util.sqlite3_wasm_db_error(\n                  capi.sqlite3_db_handle(pStmt),\n                  capi.SQLITE_MISUSE,\n                  'Invalid 3rd argument type for sqlite3_bind_text().',\n                );\n              }\n              return __bindText(pStmt, iCol, p, n, capi.SQLITE_WASM_DEALLOC);\n            } catch (e) {\n              wasm.dealloc(p);\n              return util.sqlite3_wasm_db_error(\n                capi.sqlite3_db_handle(pStmt),\n                e,\n              );\n            }\n          };\n\n          capi.sqlite3_bind_blob = function f(\n            pStmt,\n            iCol,\n            pMem,\n            nMem,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                capi.sqlite3_db_handle(pStmt),\n                'sqlite3_bind_blob',\n                f.length,\n              );\n            } else if (wasm.isPtr(pMem) || null === pMem) {\n              return __bindBlob(pStmt, iCol, pMem, nMem, xDestroy);\n            } else if (pMem instanceof ArrayBuffer) {\n              pMem = new Uint8Array(pMem);\n            } else if (Array.isArray(pMem)) {\n              pMem = pMem.join('');\n            }\n            let p, n;\n            try {\n              if (util.isBindableTypedArray(pMem)) {\n                p = wasm.allocFromTypedArray(pMem);\n                n = nMem >= 0 ? nMem : pMem.byteLength;\n              } else if ('string' === typeof pMem) {\n                [p, n] = wasm.allocCString(pMem);\n              } else {\n                return util.sqlite3_wasm_db_error(\n                  capi.sqlite3_db_handle(pStmt),\n                  capi.SQLITE_MISUSE,\n                  'Invalid 3rd argument type for sqlite3_bind_blob().',\n                );\n              }\n              return __bindBlob(pStmt, iCol, p, n, capi.SQLITE_WASM_DEALLOC);\n            } catch (e) {\n              wasm.dealloc(p);\n              return util.sqlite3_wasm_db_error(\n                capi.sqlite3_db_handle(pStmt),\n                e,\n              );\n            }\n          };\n        }\n\n        {\n          capi.sqlite3_config = function (op, ...args) {\n            if (arguments.length < 2) return capi.SQLITE_MISUSE;\n            switch (op) {\n              case capi.SQLITE_CONFIG_COVERING_INDEX_SCAN:\n              case capi.SQLITE_CONFIG_MEMSTATUS:\n              case capi.SQLITE_CONFIG_SMALL_MALLOC:\n              case capi.SQLITE_CONFIG_SORTERREF_SIZE:\n              case capi.SQLITE_CONFIG_STMTJRNL_SPILL:\n              case capi.SQLITE_CONFIG_URI:\n                return wasm.exports.sqlite3_wasm_config_i(op, args[0]);\n              case capi.SQLITE_CONFIG_LOOKASIDE:\n                return wasm.exports.sqlite3_wasm_config_ii(\n                  op,\n                  args[0],\n                  args[1],\n                );\n              case capi.SQLITE_CONFIG_MEMDB_MAXSIZE:\n                return wasm.exports.sqlite3_wasm_config_j(op, args[0]);\n              case capi.SQLITE_CONFIG_GETMALLOC:\n              case capi.SQLITE_CONFIG_GETMUTEX:\n              case capi.SQLITE_CONFIG_GETPCACHE2:\n              case capi.SQLITE_CONFIG_GETPCACHE:\n              case capi.SQLITE_CONFIG_HEAP:\n              case capi.SQLITE_CONFIG_LOG:\n              case capi.SQLITE_CONFIG_MALLOC:\n              case capi.SQLITE_CONFIG_MMAP_SIZE:\n              case capi.SQLITE_CONFIG_MULTITHREAD:\n              case capi.SQLITE_CONFIG_MUTEX:\n              case capi.SQLITE_CONFIG_PAGECACHE:\n              case capi.SQLITE_CONFIG_PCACHE2:\n              case capi.SQLITE_CONFIG_PCACHE:\n              case capi.SQLITE_CONFIG_PCACHE_HDRSZ:\n              case capi.SQLITE_CONFIG_PMASZ:\n              case capi.SQLITE_CONFIG_SERIALIZED:\n              case capi.SQLITE_CONFIG_SINGLETHREAD:\n              case capi.SQLITE_CONFIG_SQLLOG:\n              case capi.SQLITE_CONFIG_WIN32_HEAPSIZE:\n              default:\n                return capi.SQLITE_NOTFOUND;\n            }\n          };\n        }\n\n        {\n          const __autoExtFptr = new Set();\n\n          capi.sqlite3_auto_extension = function (fPtr) {\n            if (fPtr instanceof Function) {\n              fPtr = wasm.installFunction('i(ppp)', fPtr);\n            } else if (1 !== arguments.length || !wasm.isPtr(fPtr)) {\n              return capi.SQLITE_MISUSE;\n            }\n            const rc = wasm.exports.sqlite3_auto_extension(fPtr);\n            if (fPtr !== arguments[0]) {\n              if (0 === rc) __autoExtFptr.add(fPtr);\n              else wasm.uninstallFunction(fPtr);\n            }\n            return rc;\n          };\n\n          capi.sqlite3_cancel_auto_extension = function (fPtr) {\n            if (!fPtr || 1 !== arguments.length || !wasm.isPtr(fPtr)) return 0;\n            return wasm.exports.sqlite3_cancel_auto_extension(fPtr);\n          };\n\n          capi.sqlite3_reset_auto_extension = function () {\n            wasm.exports.sqlite3_reset_auto_extension();\n            for (const fp of __autoExtFptr) wasm.uninstallFunction(fp);\n            __autoExtFptr.clear();\n          };\n        }\n\n        const pKvvfs = capi.sqlite3_vfs_find('kvvfs');\n        if (pKvvfs) {\n          if (util.isUIThread()) {\n            const kvvfsMethods = new capi.sqlite3_kvvfs_methods(\n              wasm.exports.sqlite3_wasm_kvvfs_methods(),\n            );\n            delete capi.sqlite3_kvvfs_methods;\n\n            const kvvfsMakeKey = wasm.exports.sqlite3_wasm_kvvfsMakeKeyOnPstack,\n              pstack = wasm.pstack;\n\n            const kvvfsStorage = (zClass) =>\n              115 === wasm.peek(zClass) ? sessionStorage : localStorage;\n\n            const kvvfsImpls = {\n              xRead: (zClass, zKey, zBuf, nBuf) => {\n                const stack = pstack.pointer,\n                  astack = wasm.scopedAllocPush();\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return -3;\n                  const jKey = wasm.cstrToJs(zXKey);\n                  const jV = kvvfsStorage(zClass).getItem(jKey);\n                  if (!jV) return -1;\n                  const nV = jV.length;\n                  if (nBuf <= 0) return nV;\n                  else if (1 === nBuf) {\n                    wasm.poke(zBuf, 0);\n                    return nV;\n                  }\n                  const zV = wasm.scopedAllocCString(jV);\n                  if (nBuf > nV + 1) nBuf = nV + 1;\n                  wasm.heap8u().copyWithin(zBuf, zV, zV + nBuf - 1);\n                  wasm.poke(zBuf + nBuf - 1, 0);\n                  return nBuf - 1;\n                } catch (e) {\n                  console.error('kvstorageRead()', e);\n                  return -2;\n                } finally {\n                  pstack.restore(stack);\n                  wasm.scopedAllocPop(astack);\n                }\n              },\n              xWrite: (zClass, zKey, zData) => {\n                const stack = pstack.pointer;\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return 1;\n                  const jKey = wasm.cstrToJs(zXKey);\n                  kvvfsStorage(zClass).setItem(jKey, wasm.cstrToJs(zData));\n                  return 0;\n                } catch (e) {\n                  console.error('kvstorageWrite()', e);\n                  return capi.SQLITE_IOERR;\n                } finally {\n                  pstack.restore(stack);\n                }\n              },\n              xDelete: (zClass, zKey) => {\n                const stack = pstack.pointer;\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return 1;\n                  kvvfsStorage(zClass).removeItem(wasm.cstrToJs(zXKey));\n                  return 0;\n                } catch (e) {\n                  console.error('kvstorageDelete()', e);\n                  return capi.SQLITE_IOERR;\n                } finally {\n                  pstack.restore(stack);\n                }\n              },\n            };\n            for (const k of Object.keys(kvvfsImpls)) {\n              kvvfsMethods[kvvfsMethods.memberKey(k)] = wasm.installFunction(\n                kvvfsMethods.memberSignature(k),\n                kvvfsImpls[k],\n              );\n            }\n          } else {\n            capi.sqlite3_vfs_unregister(pKvvfs);\n          }\n        }\n\n        wasm.xWrap.FuncPtrAdapter.warnOnUse = true;\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        sqlite3.version = {\n          libVersion: '3.45.2',\n          libVersionNumber: 3045002,\n          sourceId:\n            '2024-03-12 11:06:23 d8cd6d49b46a395b13955387d05e9e1a2a47e54fb99f3c9b59835bbefad6af77',\n          downloadVersion: 3450200,\n        };\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n        const toss3 = (...args) => {\n          throw new sqlite3.SQLite3Error(...args);\n        };\n\n        const capi = sqlite3.capi,\n          wasm = sqlite3.wasm,\n          util = sqlite3.util;\n\n        const __ptrMap = new WeakMap();\n\n        const __stmtMap = new WeakMap();\n\n        const getOwnOption = (opts, p, dflt) => {\n          const d = Object.getOwnPropertyDescriptor(opts, p);\n          return d ? d.value : dflt;\n        };\n\n        const checkSqlite3Rc = function (dbPtr, sqliteResultCode) {\n          if (sqliteResultCode) {\n            if (dbPtr instanceof DB) dbPtr = dbPtr.pointer;\n            toss3(\n              sqliteResultCode,\n              'sqlite3 result code',\n              sqliteResultCode + ':',\n              dbPtr\n                ? capi.sqlite3_errmsg(dbPtr)\n                : capi.sqlite3_errstr(sqliteResultCode),\n            );\n          }\n          return arguments[0];\n        };\n\n        const __dbTraceToConsole = wasm.installFunction(\n          'i(ippp)',\n          function (t, c, p, x) {\n            if (capi.SQLITE_TRACE_STMT === t) {\n              console.log(\n                'SQL TRACE #' + ++this.counter + ' via sqlite3@' + c + ':',\n                wasm.cstrToJs(x),\n              );\n            }\n          }.bind({ counter: 0 }),\n        );\n\n        const __vfsPostOpenSql = Object.create(null);\n\n        const dbCtorHelper = function ctor(...args) {\n          if (!ctor._name2vfs) {\n            ctor._name2vfs = Object.create(null);\n            const isWorkerThread =\n              'function' === typeof importScripts\n                ? (n) =>\n                    toss3(\n                      'The VFS for',\n                      n,\n                      'is only available in the main window thread.',\n                    )\n                : false;\n            ctor._name2vfs[':localStorage:'] = {\n              vfs: 'kvvfs',\n              filename: isWorkerThread || (() => 'local'),\n            };\n            ctor._name2vfs[':sessionStorage:'] = {\n              vfs: 'kvvfs',\n              filename: isWorkerThread || (() => 'session'),\n            };\n          }\n          const opt = ctor.normalizeArgs(...args);\n          let fn = opt.filename,\n            vfsName = opt.vfs,\n            flagsStr = opt.flags;\n          if (\n            ('string' !== typeof fn && 'number' !== typeof fn) ||\n            'string' !== typeof flagsStr ||\n            (vfsName &&\n              'string' !== typeof vfsName &&\n              'number' !== typeof vfsName)\n          ) {\n            sqlite3.config.error('Invalid DB ctor args', opt, arguments);\n            toss3('Invalid arguments for DB constructor.');\n          }\n          let fnJs = 'number' === typeof fn ? wasm.cstrToJs(fn) : fn;\n          const vfsCheck = ctor._name2vfs[fnJs];\n          if (vfsCheck) {\n            vfsName = vfsCheck.vfs;\n            fn = fnJs = vfsCheck.filename(fnJs);\n          }\n          let pDb,\n            oflags = 0;\n          if (flagsStr.indexOf('c') >= 0) {\n            oflags |= capi.SQLITE_OPEN_CREATE | capi.SQLITE_OPEN_READWRITE;\n          }\n          if (flagsStr.indexOf('w') >= 0) oflags |= capi.SQLITE_OPEN_READWRITE;\n          if (0 === oflags) oflags |= capi.SQLITE_OPEN_READONLY;\n          oflags |= capi.SQLITE_OPEN_EXRESCODE;\n          const stack = wasm.pstack.pointer;\n          try {\n            const pPtr = wasm.pstack.allocPtr();\n            let rc = capi.sqlite3_open_v2(fn, pPtr, oflags, vfsName || 0);\n            pDb = wasm.peekPtr(pPtr);\n            checkSqlite3Rc(pDb, rc);\n            capi.sqlite3_extended_result_codes(pDb, 1);\n            if (flagsStr.indexOf('t') >= 0) {\n              capi.sqlite3_trace_v2(\n                pDb,\n                capi.SQLITE_TRACE_STMT,\n                __dbTraceToConsole,\n                pDb,\n              );\n            }\n          } catch (e) {\n            if (pDb) capi.sqlite3_close_v2(pDb);\n            throw e;\n          } finally {\n            wasm.pstack.restore(stack);\n          }\n          this.filename = fnJs;\n          __ptrMap.set(this, pDb);\n          __stmtMap.set(this, Object.create(null));\n          try {\n            const pVfs = capi.sqlite3_js_db_vfs(pDb);\n            if (!pVfs)\n              toss3('Internal error: cannot get VFS for new db handle.');\n            const postInitSql = __vfsPostOpenSql[pVfs];\n            if (postInitSql instanceof Function) {\n              postInitSql(this, sqlite3);\n            } else if (postInitSql) {\n              checkSqlite3Rc(pDb, capi.sqlite3_exec(pDb, postInitSql, 0, 0, 0));\n            }\n          } catch (e) {\n            this.close();\n            throw e;\n          }\n        };\n\n        dbCtorHelper.setVfsPostOpenSql = function (pVfs, sql) {\n          __vfsPostOpenSql[pVfs] = sql;\n        };\n\n        dbCtorHelper.normalizeArgs = function (\n          filename = ':memory:',\n          flags = 'c',\n          vfs = null,\n        ) {\n          const arg = {};\n          if (\n            1 === arguments.length &&\n            arguments[0] &&\n            'object' === typeof arguments[0]\n          ) {\n            Object.assign(arg, arguments[0]);\n            if (undefined === arg.flags) arg.flags = 'c';\n            if (undefined === arg.vfs) arg.vfs = null;\n            if (undefined === arg.filename) arg.filename = ':memory:';\n          } else {\n            arg.filename = filename;\n            arg.flags = flags;\n            arg.vfs = vfs;\n          }\n          return arg;\n        };\n\n        const DB = function (...args) {\n          dbCtorHelper.apply(this, args);\n        };\n        DB.dbCtorHelper = dbCtorHelper;\n\n        const BindTypes = {\n          null: 1,\n          number: 2,\n          string: 3,\n          boolean: 4,\n          blob: 5,\n        };\n        BindTypes['undefined'] == BindTypes.null;\n        if (wasm.bigIntEnabled) {\n          BindTypes.bigint = BindTypes.number;\n        }\n\n        const Stmt = function () {\n          if (BindTypes !== arguments[2]) {\n            toss3(\n              capi.SQLITE_MISUSE,\n              'Do not call the Stmt constructor directly. Use DB.prepare().',\n            );\n          }\n          this.db = arguments[0];\n          __ptrMap.set(this, arguments[1]);\n          this.parameterCount = capi.sqlite3_bind_parameter_count(this.pointer);\n        };\n\n        const affirmDbOpen = function (db) {\n          if (!db.pointer) toss3('DB has been closed.');\n          return db;\n        };\n\n        const affirmColIndex = function (stmt, ndx) {\n          if (ndx !== (ndx | 0) || ndx < 0 || ndx >= stmt.columnCount) {\n            toss3('Column index', ndx, 'is out of range.');\n          }\n          return stmt;\n        };\n\n        const parseExecArgs = function (db, args) {\n          const out = Object.create(null);\n          out.opt = Object.create(null);\n          switch (args.length) {\n            case 1:\n              if (\n                'string' === typeof args[0] ||\n                util.isSQLableTypedArray(args[0])\n              ) {\n                out.sql = args[0];\n              } else if (Array.isArray(args[0])) {\n                out.sql = args[0];\n              } else if (args[0] && 'object' === typeof args[0]) {\n                out.opt = args[0];\n                out.sql = out.opt.sql;\n              }\n              break;\n            case 2:\n              out.sql = args[0];\n              out.opt = args[1];\n              break;\n            default:\n              toss3('Invalid argument count for exec().');\n          }\n          out.sql = util.flexibleString(out.sql);\n          if ('string' !== typeof out.sql) {\n            toss3('Missing SQL argument or unsupported SQL value type.');\n          }\n          const opt = out.opt;\n          switch (opt.returnValue) {\n            case 'resultRows':\n              if (!opt.resultRows) opt.resultRows = [];\n              out.returnVal = () => opt.resultRows;\n              break;\n            case 'saveSql':\n              if (!opt.saveSql) opt.saveSql = [];\n              out.returnVal = () => opt.saveSql;\n              break;\n            case undefined:\n            case 'this':\n              out.returnVal = () => db;\n              break;\n            default:\n              toss3('Invalid returnValue value:', opt.returnValue);\n          }\n          if (!opt.callback && !opt.returnValue && undefined !== opt.rowMode) {\n            if (!opt.resultRows) opt.resultRows = [];\n            out.returnVal = () => opt.resultRows;\n          }\n          if (opt.callback || opt.resultRows) {\n            switch (undefined === opt.rowMode ? 'array' : opt.rowMode) {\n              case 'object':\n                out.cbArg = (stmt) => stmt.get(Object.create(null));\n                break;\n              case 'array':\n                out.cbArg = (stmt) => stmt.get([]);\n                break;\n              case 'stmt':\n                if (Array.isArray(opt.resultRows)) {\n                  toss3(\n                    'exec(): invalid rowMode for a resultRows array: must',\n                    \"be one of 'array', 'object',\",\n                    'a result column number, or column name reference.',\n                  );\n                }\n                out.cbArg = (stmt) => stmt;\n                break;\n              default:\n                if (util.isInt32(opt.rowMode)) {\n                  out.cbArg = (stmt) => stmt.get(opt.rowMode);\n                  break;\n                } else if (\n                  'string' === typeof opt.rowMode &&\n                  opt.rowMode.length > 1 &&\n                  '$' === opt.rowMode[0]\n                ) {\n                  const $colName = opt.rowMode.substr(1);\n                  out.cbArg = (stmt) => {\n                    const rc = stmt.get(Object.create(null))[$colName];\n                    return undefined === rc\n                      ? toss3(\n                          capi.SQLITE_NOTFOUND,\n                          'exec(): unknown result column:',\n                          $colName,\n                        )\n                      : rc;\n                  };\n                  break;\n                }\n                toss3('Invalid rowMode:', opt.rowMode);\n            }\n          }\n          return out;\n        };\n\n        const __selectFirstRow = (db, sql, bind, ...getArgs) => {\n          const stmt = db.prepare(sql);\n          try {\n            const rc = stmt.bind(bind).step()\n              ? stmt.get(...getArgs)\n              : undefined;\n            stmt.reset();\n            return rc;\n          } finally {\n            stmt.finalize();\n          }\n        };\n\n        const __selectAll = (db, sql, bind, rowMode) =>\n          db.exec({\n            sql,\n            bind,\n            rowMode,\n            returnValue: 'resultRows',\n          });\n\n        DB.checkRc = (db, resultCode) => checkSqlite3Rc(db, resultCode);\n\n        DB.prototype = {\n          isOpen: function () {\n            return !!this.pointer;\n          },\n\n          affirmOpen: function () {\n            return affirmDbOpen(this);\n          },\n\n          close: function () {\n            if (this.pointer) {\n              if (this.onclose && this.onclose.before instanceof Function) {\n                try {\n                  this.onclose.before(this);\n                } catch (e) {}\n              }\n              const pDb = this.pointer;\n              Object.keys(__stmtMap.get(this)).forEach((k, s) => {\n                if (s && s.pointer) {\n                  try {\n                    s.finalize();\n                  } catch (e) {}\n                }\n              });\n              __ptrMap.delete(this);\n              __stmtMap.delete(this);\n              capi.sqlite3_close_v2(pDb);\n              if (this.onclose && this.onclose.after instanceof Function) {\n                try {\n                  this.onclose.after(this);\n                } catch (e) {}\n              }\n              delete this.filename;\n            }\n          },\n\n          changes: function (total = false, sixtyFour = false) {\n            const p = affirmDbOpen(this).pointer;\n            if (total) {\n              return sixtyFour\n                ? capi.sqlite3_total_changes64(p)\n                : capi.sqlite3_total_changes(p);\n            } else {\n              return sixtyFour\n                ? capi.sqlite3_changes64(p)\n                : capi.sqlite3_changes(p);\n            }\n          },\n\n          dbFilename: function (dbName = 'main') {\n            return capi.sqlite3_db_filename(affirmDbOpen(this).pointer, dbName);\n          },\n\n          dbName: function (dbNumber = 0) {\n            return capi.sqlite3_db_name(affirmDbOpen(this).pointer, dbNumber);\n          },\n\n          dbVfsName: function (dbName = 0) {\n            let rc;\n            const pVfs = capi.sqlite3_js_db_vfs(\n              affirmDbOpen(this).pointer,\n              dbName,\n            );\n            if (pVfs) {\n              const v = new capi.sqlite3_vfs(pVfs);\n              try {\n                rc = wasm.cstrToJs(v.$zName);\n              } finally {\n                v.dispose();\n              }\n            }\n            return rc;\n          },\n\n          prepare: function (sql) {\n            affirmDbOpen(this);\n            const stack = wasm.pstack.pointer;\n            let ppStmt, pStmt;\n            try {\n              ppStmt = wasm.pstack.alloc(8);\n              DB.checkRc(\n                this,\n                capi.sqlite3_prepare_v2(this.pointer, sql, -1, ppStmt, null),\n              );\n              pStmt = wasm.peekPtr(ppStmt);\n            } finally {\n              wasm.pstack.restore(stack);\n            }\n            if (!pStmt) toss3('Cannot prepare empty SQL.');\n            const stmt = new Stmt(this, pStmt, BindTypes);\n            __stmtMap.get(this)[pStmt] = stmt;\n            return stmt;\n          },\n\n          exec: function () {\n            affirmDbOpen(this);\n            const arg = parseExecArgs(this, arguments);\n            if (!arg.sql) {\n              return toss3('exec() requires an SQL string.');\n            }\n            const opt = arg.opt;\n            const callback = opt.callback;\n            const resultRows = Array.isArray(opt.resultRows)\n              ? opt.resultRows\n              : undefined;\n            let stmt;\n            let bind = opt.bind;\n            let evalFirstResult = !!(\n              arg.cbArg ||\n              opt.columnNames ||\n              resultRows\n            );\n            const stack = wasm.scopedAllocPush();\n            const saveSql = Array.isArray(opt.saveSql)\n              ? opt.saveSql\n              : undefined;\n            try {\n              const isTA = util.isSQLableTypedArray(arg.sql);\n              let sqlByteLen = isTA\n                ? arg.sql.byteLength\n                : wasm.jstrlen(arg.sql);\n              const ppStmt = wasm.scopedAlloc(\n                2 * wasm.ptrSizeof + (sqlByteLen + 1),\n              );\n              const pzTail = ppStmt + wasm.ptrSizeof;\n              let pSql = pzTail + wasm.ptrSizeof;\n              const pSqlEnd = pSql + sqlByteLen;\n              if (isTA) wasm.heap8().set(arg.sql, pSql);\n              else wasm.jstrcpy(arg.sql, wasm.heap8(), pSql, sqlByteLen, false);\n              wasm.poke(pSql + sqlByteLen, 0);\n              while (pSql && wasm.peek(pSql, 'i8')) {\n                wasm.pokePtr([ppStmt, pzTail], 0);\n                DB.checkRc(\n                  this,\n                  capi.sqlite3_prepare_v3(\n                    this.pointer,\n                    pSql,\n                    sqlByteLen,\n                    0,\n                    ppStmt,\n                    pzTail,\n                  ),\n                );\n                const pStmt = wasm.peekPtr(ppStmt);\n                pSql = wasm.peekPtr(pzTail);\n                sqlByteLen = pSqlEnd - pSql;\n                if (!pStmt) continue;\n                if (saveSql) saveSql.push(capi.sqlite3_sql(pStmt).trim());\n                stmt = new Stmt(this, pStmt, BindTypes);\n                if (bind && stmt.parameterCount) {\n                  stmt.bind(bind);\n                  bind = null;\n                }\n                if (evalFirstResult && stmt.columnCount) {\n                  let gotColNames = Array.isArray(opt.columnNames) ? 0 : 1;\n                  evalFirstResult = false;\n                  if (arg.cbArg || resultRows) {\n                    for (; stmt.step(); stmt._lockedByExec = false) {\n                      if (0 === gotColNames++)\n                        stmt.getColumnNames(opt.columnNames);\n                      stmt._lockedByExec = true;\n                      const row = arg.cbArg(stmt);\n                      if (resultRows) resultRows.push(row);\n                      if (callback && false === callback.call(opt, row, stmt)) {\n                        break;\n                      }\n                    }\n                    stmt._lockedByExec = false;\n                  }\n                  if (0 === gotColNames) {\n                    stmt.getColumnNames(opt.columnNames);\n                  }\n                } else {\n                  stmt.step();\n                }\n                stmt.reset().finalize();\n                stmt = null;\n              }\n            } finally {\n              wasm.scopedAllocPop(stack);\n              if (stmt) {\n                delete stmt._lockedByExec;\n                stmt.finalize();\n              }\n            }\n            return arg.returnVal();\n          },\n\n          createFunction: function f(name, xFunc, opt) {\n            const isFunc = (f) => f instanceof Function;\n            switch (arguments.length) {\n              case 1:\n                opt = name;\n                name = opt.name;\n                xFunc = opt.xFunc || 0;\n                break;\n              case 2:\n                if (!isFunc(xFunc)) {\n                  opt = xFunc;\n                  xFunc = opt.xFunc || 0;\n                }\n                break;\n              case 3:\n                break;\n              default:\n                break;\n            }\n            if (!opt) opt = {};\n            if ('string' !== typeof name) {\n              toss3('Invalid arguments: missing function name.');\n            }\n            let xStep = opt.xStep || 0;\n            let xFinal = opt.xFinal || 0;\n            const xValue = opt.xValue || 0;\n            const xInverse = opt.xInverse || 0;\n            let isWindow = undefined;\n            if (isFunc(xFunc)) {\n              isWindow = false;\n              if (isFunc(xStep) || isFunc(xFinal)) {\n                toss3('Ambiguous arguments: scalar or aggregate?');\n              }\n              xStep = xFinal = null;\n            } else if (isFunc(xStep)) {\n              if (!isFunc(xFinal)) {\n                toss3('Missing xFinal() callback for aggregate or window UDF.');\n              }\n              xFunc = null;\n            } else if (isFunc(xFinal)) {\n              toss3('Missing xStep() callback for aggregate or window UDF.');\n            } else {\n              toss3('Missing function-type properties.');\n            }\n            if (false === isWindow) {\n              if (isFunc(xValue) || isFunc(xInverse)) {\n                toss3(\n                  'xValue and xInverse are not permitted for non-window UDFs.',\n                );\n              }\n            } else if (isFunc(xValue)) {\n              if (!isFunc(xInverse)) {\n                toss3('xInverse must be provided if xValue is.');\n              }\n              isWindow = true;\n            } else if (isFunc(xInverse)) {\n              toss3('xValue must be provided if xInverse is.');\n            }\n            const pApp = opt.pApp;\n            if (\n              undefined !== pApp &&\n              null !== pApp &&\n              ('number' !== typeof pApp || !util.isInt32(pApp))\n            ) {\n              toss3(\n                'Invalid value for pApp property. Must be a legal WASM pointer value.',\n              );\n            }\n            const xDestroy = opt.xDestroy || 0;\n            if (xDestroy && !isFunc(xDestroy)) {\n              toss3('xDestroy property must be a function.');\n            }\n            let fFlags = 0;\n            if (getOwnOption(opt, 'deterministic'))\n              fFlags |= capi.SQLITE_DETERMINISTIC;\n            if (getOwnOption(opt, 'directOnly'))\n              fFlags |= capi.SQLITE_DIRECTONLY;\n            if (getOwnOption(opt, 'innocuous')) fFlags |= capi.SQLITE_INNOCUOUS;\n            name = name.toLowerCase();\n            const xArity = xFunc || xStep;\n            const arity = getOwnOption(opt, 'arity');\n            const arityArg =\n              'number' === typeof arity\n                ? arity\n                : xArity.length\n                  ? xArity.length - 1\n                  : 0;\n            let rc;\n            if (isWindow) {\n              rc = capi.sqlite3_create_window_function(\n                this.pointer,\n                name,\n                arityArg,\n                capi.SQLITE_UTF8 | fFlags,\n                pApp || 0,\n                xStep,\n                xFinal,\n                xValue,\n                xInverse,\n                xDestroy,\n              );\n            } else {\n              rc = capi.sqlite3_create_function_v2(\n                this.pointer,\n                name,\n                arityArg,\n                capi.SQLITE_UTF8 | fFlags,\n                pApp || 0,\n                xFunc,\n                xStep,\n                xFinal,\n                xDestroy,\n              );\n            }\n            DB.checkRc(this, rc);\n            return this;\n          },\n\n          selectValue: function (sql, bind, asType) {\n            return __selectFirstRow(this, sql, bind, 0, asType);\n          },\n\n          selectValues: function (sql, bind, asType) {\n            const stmt = this.prepare(sql),\n              rc = [];\n            try {\n              stmt.bind(bind);\n              while (stmt.step()) rc.push(stmt.get(0, asType));\n              stmt.reset();\n            } finally {\n              stmt.finalize();\n            }\n            return rc;\n          },\n\n          selectArray: function (sql, bind) {\n            return __selectFirstRow(this, sql, bind, []);\n          },\n\n          selectObject: function (sql, bind) {\n            return __selectFirstRow(this, sql, bind, {});\n          },\n\n          selectArrays: function (sql, bind) {\n            return __selectAll(this, sql, bind, 'array');\n          },\n\n          selectObjects: function (sql, bind) {\n            return __selectAll(this, sql, bind, 'object');\n          },\n\n          openStatementCount: function () {\n            return this.pointer ? Object.keys(__stmtMap.get(this)).length : 0;\n          },\n\n          transaction: function (callback) {\n            let opener = 'BEGIN';\n            if (arguments.length > 1) {\n              if (/[^a-zA-Z]/.test(arguments[0])) {\n                toss3(\n                  capi.SQLITE_MISUSE,\n                  'Invalid argument for BEGIN qualifier.',\n                );\n              }\n              opener += ' ' + arguments[0];\n              callback = arguments[1];\n            }\n            affirmDbOpen(this).exec(opener);\n            try {\n              const rc = callback(this);\n              this.exec('COMMIT');\n              return rc;\n            } catch (e) {\n              this.exec('ROLLBACK');\n              throw e;\n            }\n          },\n\n          savepoint: function (callback) {\n            affirmDbOpen(this).exec('SAVEPOINT oo1');\n            try {\n              const rc = callback(this);\n              this.exec('RELEASE oo1');\n              return rc;\n            } catch (e) {\n              this.exec('ROLLBACK to SAVEPOINT oo1; RELEASE SAVEPOINT oo1');\n              throw e;\n            }\n          },\n\n          checkRc: function (resultCode) {\n            return checkSqlite3Rc(this, resultCode);\n          },\n        };\n\n        const affirmStmtOpen = function (stmt) {\n          if (!stmt.pointer) toss3('Stmt has been closed.');\n          return stmt;\n        };\n\n        const isSupportedBindType = function (v) {\n          let t = BindTypes[null === v || undefined === v ? 'null' : typeof v];\n          switch (t) {\n            case BindTypes.boolean:\n            case BindTypes.null:\n            case BindTypes.number:\n            case BindTypes.string:\n              return t;\n            case BindTypes.bigint:\n              if (wasm.bigIntEnabled) return t;\n\n            default:\n              return util.isBindableTypedArray(v) ? BindTypes.blob : undefined;\n          }\n        };\n\n        const affirmSupportedBindType = function (v) {\n          return (\n            isSupportedBindType(v) ||\n            toss3('Unsupported bind() argument type:', typeof v)\n          );\n        };\n\n        const affirmParamIndex = function (stmt, key) {\n          const n =\n            'number' === typeof key\n              ? key\n              : capi.sqlite3_bind_parameter_index(stmt.pointer, key);\n          if (0 === n || !util.isInt32(n)) {\n            toss3('Invalid bind() parameter name: ' + key);\n          } else if (n < 1 || n > stmt.parameterCount)\n            toss3('Bind index', key, 'is out of range.');\n          return n;\n        };\n\n        const affirmNotLockedByExec = function (stmt, currentOpName) {\n          if (stmt._lockedByExec) {\n            toss3(\n              'Operation is illegal when statement is locked:',\n              currentOpName,\n            );\n          }\n          return stmt;\n        };\n\n        const bindOne = function f(stmt, ndx, bindType, val) {\n          affirmNotLockedByExec(affirmStmtOpen(stmt), 'bind()');\n          if (!f._) {\n            f._tooBigInt = (v) =>\n              toss3(\n                'BigInt value is too big to store without precision loss:',\n                v,\n              );\n            f._ = {\n              string: function (stmt, ndx, val, asBlob) {\n                const [pStr, n] = wasm.allocCString(val, true);\n                const f = asBlob\n                  ? capi.sqlite3_bind_blob\n                  : capi.sqlite3_bind_text;\n                return f(stmt.pointer, ndx, pStr, n, capi.SQLITE_WASM_DEALLOC);\n              },\n            };\n          }\n          affirmSupportedBindType(val);\n          ndx = affirmParamIndex(stmt, ndx);\n          let rc = 0;\n          switch (\n            null === val || undefined === val ? BindTypes.null : bindType\n          ) {\n            case BindTypes.null:\n              rc = capi.sqlite3_bind_null(stmt.pointer, ndx);\n              break;\n            case BindTypes.string:\n              rc = f._.string(stmt, ndx, val, false);\n              break;\n            case BindTypes.number: {\n              let m;\n              if (util.isInt32(val)) m = capi.sqlite3_bind_int;\n              else if ('bigint' === typeof val) {\n                if (!util.bigIntFits64(val)) {\n                  f._tooBigInt(val);\n                } else if (wasm.bigIntEnabled) {\n                  m = capi.sqlite3_bind_int64;\n                } else if (util.bigIntFitsDouble(val)) {\n                  val = Number(val);\n                  m = capi.sqlite3_bind_double;\n                } else {\n                  f._tooBigInt(val);\n                }\n              } else {\n                val = Number(val);\n                if (wasm.bigIntEnabled && Number.isInteger(val)) {\n                  m = capi.sqlite3_bind_int64;\n                } else {\n                  m = capi.sqlite3_bind_double;\n                }\n              }\n              rc = m(stmt.pointer, ndx, val);\n              break;\n            }\n            case BindTypes.boolean:\n              rc = capi.sqlite3_bind_int(stmt.pointer, ndx, val ? 1 : 0);\n              break;\n            case BindTypes.blob: {\n              if ('string' === typeof val) {\n                rc = f._.string(stmt, ndx, val, true);\n                break;\n              } else if (val instanceof ArrayBuffer) {\n                val = new Uint8Array(val);\n              } else if (!util.isBindableTypedArray(val)) {\n                toss3(\n                  'Binding a value as a blob requires',\n                  'that it be a string, Uint8Array, Int8Array, or ArrayBuffer.',\n                );\n              }\n              const pBlob = wasm.alloc(val.byteLength || 1);\n              wasm.heap8().set(val.byteLength ? val : [0], pBlob);\n              rc = capi.sqlite3_bind_blob(\n                stmt.pointer,\n                ndx,\n                pBlob,\n                val.byteLength,\n                capi.SQLITE_WASM_DEALLOC,\n              );\n              break;\n            }\n            default:\n              sqlite3.config.warn('Unsupported bind() argument type:', val);\n              toss3('Unsupported bind() argument type: ' + typeof val);\n          }\n          if (rc) DB.checkRc(stmt.db.pointer, rc);\n          stmt._mayGet = false;\n          return stmt;\n        };\n\n        Stmt.prototype = {\n          finalize: function () {\n            if (this.pointer) {\n              affirmNotLockedByExec(this, 'finalize()');\n              const rc = capi.sqlite3_finalize(this.pointer);\n              delete __stmtMap.get(this.db)[this.pointer];\n              __ptrMap.delete(this);\n              delete this._mayGet;\n              delete this.parameterCount;\n              delete this._lockedByExec;\n              delete this.db;\n              return rc;\n            }\n          },\n\n          clearBindings: function () {\n            affirmNotLockedByExec(affirmStmtOpen(this), 'clearBindings()');\n            capi.sqlite3_clear_bindings(this.pointer);\n            this._mayGet = false;\n            return this;\n          },\n\n          reset: function (alsoClearBinds) {\n            affirmNotLockedByExec(this, 'reset()');\n            if (alsoClearBinds) this.clearBindings();\n            const rc = capi.sqlite3_reset(affirmStmtOpen(this).pointer);\n            this._mayGet = false;\n            checkSqlite3Rc(this.db, rc);\n            return this;\n          },\n\n          bind: function () {\n            affirmStmtOpen(this);\n            let ndx, arg;\n            switch (arguments.length) {\n              case 1:\n                ndx = 1;\n                arg = arguments[0];\n                break;\n              case 2:\n                ndx = arguments[0];\n                arg = arguments[1];\n                break;\n              default:\n                toss3('Invalid bind() arguments.');\n            }\n            if (undefined === arg) {\n              return this;\n            } else if (!this.parameterCount) {\n              toss3('This statement has no bindable parameters.');\n            }\n            this._mayGet = false;\n            if (null === arg) {\n              return bindOne(this, ndx, BindTypes.null, arg);\n            } else if (Array.isArray(arg)) {\n              if (1 !== arguments.length) {\n                toss3(\n                  'When binding an array, an index argument is not permitted.',\n                );\n              }\n              arg.forEach((v, i) =>\n                bindOne(this, i + 1, affirmSupportedBindType(v), v),\n              );\n              return this;\n            } else if (arg instanceof ArrayBuffer) {\n              arg = new Uint8Array(arg);\n            }\n            if ('object' === typeof arg && !util.isBindableTypedArray(arg)) {\n              if (1 !== arguments.length) {\n                toss3(\n                  'When binding an object, an index argument is not permitted.',\n                );\n              }\n              Object.keys(arg).forEach((k) =>\n                bindOne(this, k, affirmSupportedBindType(arg[k]), arg[k]),\n              );\n              return this;\n            } else {\n              return bindOne(this, ndx, affirmSupportedBindType(arg), arg);\n            }\n            toss3('Should not reach this point.');\n          },\n\n          bindAsBlob: function (ndx, arg) {\n            affirmStmtOpen(this);\n            if (1 === arguments.length) {\n              arg = ndx;\n              ndx = 1;\n            }\n            const t = affirmSupportedBindType(arg);\n            if (\n              BindTypes.string !== t &&\n              BindTypes.blob !== t &&\n              BindTypes.null !== t\n            ) {\n              toss3('Invalid value type for bindAsBlob()');\n            }\n            return bindOne(this, ndx, BindTypes.blob, arg);\n          },\n\n          step: function () {\n            affirmNotLockedByExec(this, 'step()');\n            const rc = capi.sqlite3_step(affirmStmtOpen(this).pointer);\n            switch (rc) {\n              case capi.SQLITE_DONE:\n                return (this._mayGet = false);\n              case capi.SQLITE_ROW:\n                return (this._mayGet = true);\n              default:\n                this._mayGet = false;\n                sqlite3.config.warn(\n                  'sqlite3_step() rc=',\n                  rc,\n                  capi.sqlite3_js_rc_str(rc),\n                  'SQL =',\n                  capi.sqlite3_sql(this.pointer),\n                );\n                DB.checkRc(this.db.pointer, rc);\n            }\n          },\n\n          stepReset: function () {\n            this.step();\n            return this.reset();\n          },\n\n          stepFinalize: function () {\n            try {\n              const rc = this.step();\n              this.reset();\n              return rc;\n            } finally {\n              try {\n                this.finalize();\n              } catch (e) {}\n            }\n          },\n\n          get: function (ndx, asType) {\n            if (!affirmStmtOpen(this)._mayGet) {\n              toss3('Stmt.step() has not (recently) returned true.');\n            }\n            if (Array.isArray(ndx)) {\n              let i = 0;\n              const n = this.columnCount;\n              while (i < n) {\n                ndx[i] = this.get(i++);\n              }\n              return ndx;\n            } else if (ndx && 'object' === typeof ndx) {\n              let i = 0;\n              const n = this.columnCount;\n              while (i < n) {\n                ndx[capi.sqlite3_column_name(this.pointer, i)] = this.get(i++);\n              }\n              return ndx;\n            }\n            affirmColIndex(this, ndx);\n            switch (\n              undefined === asType\n                ? capi.sqlite3_column_type(this.pointer, ndx)\n                : asType\n            ) {\n              case capi.SQLITE_NULL:\n                return null;\n              case capi.SQLITE_INTEGER: {\n                if (wasm.bigIntEnabled) {\n                  const rc = capi.sqlite3_column_int64(this.pointer, ndx);\n                  if (\n                    rc >= Number.MIN_SAFE_INTEGER &&\n                    rc <= Number.MAX_SAFE_INTEGER\n                  ) {\n                    return Number(rc).valueOf();\n                  }\n                  return rc;\n                } else {\n                  const rc = capi.sqlite3_column_double(this.pointer, ndx);\n                  if (\n                    rc > Number.MAX_SAFE_INTEGER ||\n                    rc < Number.MIN_SAFE_INTEGER\n                  ) {\n                    toss3(\n                      'Integer is out of range for JS integer range: ' + rc,\n                    );\n                  }\n\n                  return util.isInt32(rc) ? rc | 0 : rc;\n                }\n              }\n              case capi.SQLITE_FLOAT:\n                return capi.sqlite3_column_double(this.pointer, ndx);\n              case capi.SQLITE_TEXT:\n                return capi.sqlite3_column_text(this.pointer, ndx);\n              case capi.SQLITE_BLOB: {\n                const n = capi.sqlite3_column_bytes(this.pointer, ndx),\n                  ptr = capi.sqlite3_column_blob(this.pointer, ndx),\n                  rc = new Uint8Array(n);\n\n                if (n) rc.set(wasm.heap8u().slice(ptr, ptr + n), 0);\n\n                if (n && this.db._blobXfer instanceof Array) {\n                  this.db._blobXfer.push(rc.buffer);\n                }\n                return rc;\n              }\n              default:\n                toss3(\n                  \"Don't know how to translate\",\n                  'type of result column #' + ndx + '.',\n                );\n            }\n            toss3('Not reached.');\n          },\n\n          getInt: function (ndx) {\n            return this.get(ndx, capi.SQLITE_INTEGER);\n          },\n\n          getFloat: function (ndx) {\n            return this.get(ndx, capi.SQLITE_FLOAT);\n          },\n\n          getString: function (ndx) {\n            return this.get(ndx, capi.SQLITE_TEXT);\n          },\n\n          getBlob: function (ndx) {\n            return this.get(ndx, capi.SQLITE_BLOB);\n          },\n\n          getJSON: function (ndx) {\n            const s = this.get(ndx, capi.SQLITE_STRING);\n            return null === s ? s : JSON.parse(s);\n          },\n\n          getColumnName: function (ndx) {\n            return capi.sqlite3_column_name(\n              affirmColIndex(affirmStmtOpen(this), ndx).pointer,\n              ndx,\n            );\n          },\n\n          getColumnNames: function (tgt = []) {\n            affirmColIndex(affirmStmtOpen(this), 0);\n            const n = this.columnCount;\n            for (let i = 0; i < n; ++i) {\n              tgt.push(capi.sqlite3_column_name(this.pointer, i));\n            }\n            return tgt;\n          },\n\n          getParamIndex: function (name) {\n            return affirmStmtOpen(this).parameterCount\n              ? capi.sqlite3_bind_parameter_index(this.pointer, name)\n              : undefined;\n          },\n        };\n\n        {\n          const prop = {\n            enumerable: true,\n            get: function () {\n              return __ptrMap.get(this);\n            },\n            set: () => toss3('The pointer property is read-only.'),\n          };\n          Object.defineProperty(Stmt.prototype, 'pointer', prop);\n          Object.defineProperty(DB.prototype, 'pointer', prop);\n        }\n\n        Object.defineProperty(Stmt.prototype, 'columnCount', {\n          enumerable: false,\n          get: function () {\n            return capi.sqlite3_column_count(this.pointer);\n          },\n          set: () => toss3('The columnCount property is read-only.'),\n        });\n\n        sqlite3.oo1 = {\n          DB,\n          Stmt,\n        };\n\n        if (util.isUIThread()) {\n          sqlite3.oo1.JsStorageDb = function (storageName = 'session') {\n            if ('session' !== storageName && 'local' !== storageName) {\n              toss3(\"JsStorageDb db name must be one of 'session' or 'local'.\");\n            }\n            dbCtorHelper.call(this, {\n              filename: storageName,\n              flags: 'c',\n              vfs: 'kvvfs',\n            });\n          };\n          const jdb = sqlite3.oo1.JsStorageDb;\n          jdb.prototype = Object.create(DB.prototype);\n\n          jdb.clearStorage = capi.sqlite3_js_kvvfs_clear;\n\n          jdb.prototype.clearStorage = function () {\n            return jdb.clearStorage(affirmDbOpen(this).filename);\n          };\n\n          jdb.storageSize = capi.sqlite3_js_kvvfs_size;\n\n          jdb.prototype.storageSize = function () {\n            return jdb.storageSize(affirmDbOpen(this).filename);\n          };\n        }\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        sqlite3.initWorker1API = function () {\n          'use strict';\n          const toss = (...args) => {\n            throw new Error(args.join(' '));\n          };\n          if (!(globalThis.WorkerGlobalScope instanceof Function)) {\n            toss('initWorker1API() must be run from a Worker thread.');\n          }\n          const sqlite3 = this.sqlite3 || toss('Missing this.sqlite3 object.');\n          const DB = sqlite3.oo1.DB;\n\n          const getDbId = function (db) {\n            let id = wState.idMap.get(db);\n            if (id) return id;\n            id = 'db#' + ++wState.idSeq + '@' + db.pointer;\n\n            wState.idMap.set(db, id);\n            return id;\n          };\n\n          const wState = {\n            dbList: [],\n\n            idSeq: 0,\n\n            idMap: new WeakMap(),\n\n            xfer: [],\n            open: function (opt) {\n              const db = new DB(opt);\n              this.dbs[getDbId(db)] = db;\n              if (this.dbList.indexOf(db) < 0) this.dbList.push(db);\n              return db;\n            },\n            close: function (db, alsoUnlink) {\n              if (db) {\n                delete this.dbs[getDbId(db)];\n                const filename = db.filename;\n                const pVfs = sqlite3.wasm.sqlite3_wasm_db_vfs(db.pointer, 0);\n                db.close();\n                const ddNdx = this.dbList.indexOf(db);\n                if (ddNdx >= 0) this.dbList.splice(ddNdx, 1);\n                if (alsoUnlink && filename && pVfs) {\n                  sqlite3.wasm.sqlite3_wasm_vfs_unlink(pVfs, filename);\n                }\n              }\n            },\n\n            post: function (msg, xferList) {\n              if (xferList && xferList.length) {\n                globalThis.postMessage(msg, Array.from(xferList));\n                xferList.length = 0;\n              } else {\n                globalThis.postMessage(msg);\n              }\n            },\n\n            dbs: Object.create(null),\n\n            getDb: function (id, require = true) {\n              return (\n                this.dbs[id] ||\n                (require ? toss('Unknown (or closed) DB ID:', id) : undefined)\n              );\n            },\n          };\n\n          const affirmDbOpen = function (db = wState.dbList[0]) {\n            return db && db.pointer ? db : toss('DB is not opened.');\n          };\n\n          const getMsgDb = function (msgData, affirmExists = true) {\n            const db = wState.getDb(msgData.dbId, false) || wState.dbList[0];\n            return affirmExists ? affirmDbOpen(db) : db;\n          };\n\n          const getDefaultDbId = function () {\n            return wState.dbList[0] && getDbId(wState.dbList[0]);\n          };\n\n          const guessVfs = function (filename) {\n            const m = /^file:.+(vfs=(\\w+))/.exec(filename);\n            return sqlite3.capi.sqlite3_vfs_find(m ? m[2] : 0);\n          };\n\n          const isSpecialDbFilename = (n) => {\n            return '' === n || ':' === n[0];\n          };\n\n          const wMsgHandler = {\n            open: function (ev) {\n              const oargs = Object.create(null),\n                args = ev.args || Object.create(null);\n              if (args.simulateError) {\n                toss('Throwing because of simulateError flag.');\n              }\n              const rc = Object.create(null);\n              let byteArray, pVfs;\n              oargs.vfs = args.vfs;\n              if (isSpecialDbFilename(args.filename)) {\n                oargs.filename = args.filename || '';\n              } else {\n                oargs.filename = args.filename;\n                byteArray = args.byteArray;\n                if (byteArray) pVfs = guessVfs(args.filename);\n              }\n              if (pVfs) {\n                let pMem;\n                try {\n                  pMem = sqlite3.wasm.allocFromTypedArray(byteArray);\n                  const rc = sqlite3.wasm.sqlite3_wasm_vfs_create_file(\n                    pVfs,\n                    oargs.filename,\n                    pMem,\n                    byteArray.byteLength,\n                  );\n                  if (rc) sqlite3.SQLite3Error.toss(rc);\n                } catch (e) {\n                  throw new sqlite3.SQLite3Error(\n                    e.name + ' creating ' + args.filename + ': ' + e.message,\n                    {\n                      cause: e,\n                    },\n                  );\n                } finally {\n                  if (pMem) sqlite3.wasm.dealloc(pMem);\n                }\n              }\n              const db = wState.open(oargs);\n              rc.filename = db.filename;\n              rc.persistent = !!sqlite3.capi.sqlite3_js_db_uses_vfs(\n                db.pointer,\n                'opfs',\n              );\n              rc.dbId = getDbId(db);\n              rc.vfs = db.dbVfsName();\n              return rc;\n            },\n\n            close: function (ev) {\n              const db = getMsgDb(ev, false);\n              const response = {\n                filename: db && db.filename,\n              };\n              if (db) {\n                const doUnlink =\n                  ev.args && 'object' === typeof ev.args\n                    ? !!ev.args.unlink\n                    : false;\n                wState.close(db, doUnlink);\n              }\n              return response;\n            },\n\n            exec: function (ev) {\n              const rc =\n                'string' === typeof ev.args\n                  ? { sql: ev.args }\n                  : ev.args || Object.create(null);\n              if ('stmt' === rc.rowMode) {\n                toss(\n                  \"Invalid rowMode for 'exec': stmt mode\",\n                  'does not work in the Worker API.',\n                );\n              } else if (!rc.sql) {\n                toss(\"'exec' requires input SQL.\");\n              }\n              const db = getMsgDb(ev);\n              if (rc.callback || Array.isArray(rc.resultRows)) {\n                db._blobXfer = wState.xfer;\n              }\n              const theCallback = rc.callback;\n              let rowNumber = 0;\n              const hadColNames = !!rc.columnNames;\n              if ('string' === typeof theCallback) {\n                if (!hadColNames) rc.columnNames = [];\n\n                rc.callback = function (row, stmt) {\n                  wState.post(\n                    {\n                      type: theCallback,\n                      columnNames: rc.columnNames,\n                      rowNumber: ++rowNumber,\n                      row: row,\n                    },\n                    wState.xfer,\n                  );\n                };\n              }\n              try {\n                const changeCount = !!rc.countChanges\n                  ? db.changes(true, 64 === rc.countChanges)\n                  : undefined;\n                db.exec(rc);\n                if (undefined !== changeCount) {\n                  rc.changeCount =\n                    db.changes(true, 64 === rc.countChanges) - changeCount;\n                }\n                if (rc.callback instanceof Function) {\n                  rc.callback = theCallback;\n\n                  wState.post({\n                    type: theCallback,\n                    columnNames: rc.columnNames,\n                    rowNumber: null,\n                    row: undefined,\n                  });\n                }\n              } finally {\n                delete db._blobXfer;\n                if (rc.callback) rc.callback = theCallback;\n              }\n              return rc;\n            },\n\n            'config-get': function () {\n              const rc = Object.create(null),\n                src = sqlite3.config;\n              ['bigIntEnabled'].forEach(function (k) {\n                if (Object.getOwnPropertyDescriptor(src, k)) rc[k] = src[k];\n              });\n              rc.version = sqlite3.version;\n              rc.vfsList = sqlite3.capi.sqlite3_js_vfs_list();\n              rc.opfsEnabled = !!sqlite3.opfs;\n              return rc;\n            },\n\n            export: function (ev) {\n              const db = getMsgDb(ev);\n              const response = {\n                byteArray: sqlite3.capi.sqlite3_js_db_export(db.pointer),\n                filename: db.filename,\n                mimetype: 'application/x-sqlite3',\n              };\n              wState.xfer.push(response.byteArray.buffer);\n              return response;\n            },\n\n            toss: function (ev) {\n              toss('Testing worker exception');\n            },\n\n            'opfs-tree': async function (ev) {\n              if (!sqlite3.opfs) toss('OPFS support is unavailable.');\n              const response = await sqlite3.opfs.treeList();\n              return response;\n            },\n          };\n\n          globalThis.onmessage = async function (ev) {\n            ev = ev.data;\n            let result,\n              dbId = ev.dbId,\n              evType = ev.type;\n            const arrivalTime = performance.now();\n            try {\n              if (\n                wMsgHandler.hasOwnProperty(evType) &&\n                wMsgHandler[evType] instanceof Function\n              ) {\n                result = await wMsgHandler[evType](ev);\n              } else {\n                toss('Unknown db worker message type:', ev.type);\n              }\n            } catch (err) {\n              evType = 'error';\n              result = {\n                operation: ev.type,\n                message: err.message,\n                errorClass: err.name,\n                input: ev,\n              };\n              if (err.stack) {\n                result.stack =\n                  'string' === typeof err.stack\n                    ? err.stack.split(/\\n\\s*/)\n                    : err.stack;\n              }\n              if (false)\n                {}\n            }\n            if (!dbId) {\n              dbId = result.dbId || getDefaultDbId();\n            }\n\n            wState.post(\n              {\n                type: evType,\n                dbId: dbId,\n                messageId: ev.messageId,\n                workerReceivedTime: arrivalTime,\n                workerRespondTime: performance.now(),\n                departureTime: ev.departureTime,\n\n                result: result,\n              },\n              wState.xfer,\n            );\n          };\n          globalThis.postMessage({\n            type: 'sqlite3-api',\n            result: 'worker1-ready',\n          });\n        }.bind({ sqlite3 });\n      });\n\n      ('use strict');\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const wasm = sqlite3.wasm,\n          capi = sqlite3.capi,\n          toss = sqlite3.util.toss3;\n        const vfs = Object.create(null),\n          vtab = Object.create(null);\n\n        const StructBinder = sqlite3.StructBinder;\n        sqlite3.vfs = vfs;\n        sqlite3.vtab = vtab;\n\n        const sii = capi.sqlite3_index_info;\n\n        sii.prototype.nthConstraint = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nConstraint) return false;\n          const ptr =\n            this.$aConstraint +\n            sii.sqlite3_index_constraint.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_constraint(ptr);\n        };\n\n        sii.prototype.nthConstraintUsage = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nConstraint) return false;\n          const ptr =\n            this.$aConstraintUsage +\n            sii.sqlite3_index_constraint_usage.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_constraint_usage(ptr);\n        };\n\n        sii.prototype.nthOrderBy = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nOrderBy) return false;\n          const ptr =\n            this.$aOrderBy + sii.sqlite3_index_orderby.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_orderby(ptr);\n        };\n\n        const installMethod = function callee(\n          tgt,\n          name,\n          func,\n          applyArgcCheck = callee.installMethodArgcCheck,\n        ) {\n          if (!(tgt instanceof StructBinder.StructType)) {\n            toss('Usage error: target object is-not-a StructType.');\n          } else if (!(func instanceof Function) && !wasm.isPtr(func)) {\n            toss('Usage errror: expecting a Function or WASM pointer to one.');\n          }\n          if (1 === arguments.length) {\n            return (n, f) => callee(tgt, n, f, applyArgcCheck);\n          }\n          if (!callee.argcProxy) {\n            callee.argcProxy = function (tgt, funcName, func, sig) {\n              return function (...args) {\n                if (func.length !== arguments.length) {\n                  toss(\n                    'Argument mismatch for',\n                    tgt.structInfo.name +\n                      '::' +\n                      funcName +\n                      ': Native signature is:',\n                    sig,\n                  );\n                }\n                return func.apply(this, args);\n              };\n            };\n\n            callee.removeFuncList = function () {\n              if (this.ondispose.__removeFuncList) {\n                this.ondispose.__removeFuncList.forEach((v, ndx) => {\n                  if ('number' === typeof v) {\n                    try {\n                      wasm.uninstallFunction(v);\n                    } catch (e) {}\n                  }\n                });\n                delete this.ondispose.__removeFuncList;\n              }\n            };\n          }\n          const sigN = tgt.memberSignature(name);\n          if (sigN.length < 2) {\n            toss(\n              'Member',\n              name,\n              'does not have a function pointer signature:',\n              sigN,\n            );\n          }\n          const memKey = tgt.memberKey(name);\n          const fProxy =\n            applyArgcCheck && !wasm.isPtr(func)\n              ? callee.argcProxy(tgt, memKey, func, sigN)\n              : func;\n          if (wasm.isPtr(fProxy)) {\n            if (fProxy && !wasm.functionEntry(fProxy)) {\n              toss('Pointer', fProxy, 'is not a WASM function table entry.');\n            }\n            tgt[memKey] = fProxy;\n          } else {\n            const pFunc = wasm.installFunction(\n              fProxy,\n              tgt.memberSignature(name, true),\n            );\n            tgt[memKey] = pFunc;\n            if (!tgt.ondispose || !tgt.ondispose.__removeFuncList) {\n              tgt.addOnDispose(\n                'ondispose.__removeFuncList handler',\n                callee.removeFuncList,\n              );\n              tgt.ondispose.__removeFuncList = [];\n            }\n            tgt.ondispose.__removeFuncList.push(memKey, pFunc);\n          }\n          return (n, f) => callee(tgt, n, f, applyArgcCheck);\n        };\n        installMethod.installMethodArgcCheck = false;\n\n        const installMethods = function (\n          structInstance,\n          methods,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          const seen = new Map();\n          for (const k of Object.keys(methods)) {\n            const m = methods[k];\n            const prior = seen.get(m);\n            if (prior) {\n              const mkey = structInstance.memberKey(k);\n              structInstance[mkey] =\n                structInstance[structInstance.memberKey(prior)];\n            } else {\n              installMethod(structInstance, k, m, applyArgcCheck);\n              seen.set(m, k);\n            }\n          }\n          return structInstance;\n        };\n\n        StructBinder.StructType.prototype.installMethod = function callee(\n          name,\n          func,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          return arguments.length < 3 && name && 'object' === typeof name\n            ? installMethods(this, ...arguments)\n            : installMethod(this, ...arguments);\n        };\n\n        StructBinder.StructType.prototype.installMethods = function (\n          methods,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          return installMethods(this, methods, applyArgcCheck);\n        };\n\n        capi.sqlite3_vfs.prototype.registerVfs = function (asDefault = false) {\n          if (!(this instanceof sqlite3.capi.sqlite3_vfs)) {\n            toss('Expecting a sqlite3_vfs-type argument.');\n          }\n          const rc = capi.sqlite3_vfs_register(this, asDefault ? 1 : 0);\n          if (rc) {\n            toss('sqlite3_vfs_register(', this, ') failed with rc', rc);\n          }\n          if (this.pointer !== capi.sqlite3_vfs_find(this.$zName)) {\n            toss(\n              'BUG: sqlite3_vfs_find(vfs.$zName) failed for just-installed VFS',\n              this,\n            );\n          }\n          return this;\n        };\n\n        vfs.installVfs = function (opt) {\n          let count = 0;\n          const propList = ['io', 'vfs'];\n          for (const key of propList) {\n            const o = opt[key];\n            if (o) {\n              ++count;\n              installMethods(o.struct, o.methods, !!o.applyArgcCheck);\n              if ('vfs' === key) {\n                if (!o.struct.$zName && 'string' === typeof o.name) {\n                  o.struct.addOnDispose(\n                    (o.struct.$zName = wasm.allocCString(o.name)),\n                  );\n                }\n                o.struct.registerVfs(!!o.asDefault);\n              }\n            }\n          }\n          if (!count)\n            toss(\n              'Misuse: installVfs() options object requires at least',\n              'one of:',\n              propList,\n            );\n          return this;\n        };\n\n        const __xWrapFactory = function (methodName, StructType) {\n          return function (ptr, removeMapping = false) {\n            if (0 === arguments.length) ptr = new StructType();\n            if (ptr instanceof StructType) {\n              this.set(ptr.pointer, ptr);\n              return ptr;\n            } else if (!wasm.isPtr(ptr)) {\n              sqlite3.SQLite3Error.toss(\n                'Invalid argument to',\n                methodName + '()',\n              );\n            }\n            let rc = this.get(ptr);\n            if (removeMapping) this.delete(ptr);\n            return rc;\n          }.bind(new Map());\n        };\n\n        const StructPtrMapper = function (name, StructType) {\n          const __xWrap = __xWrapFactory(name, StructType);\n\n          return Object.assign(Object.create(null), {\n            StructType,\n\n            create: (ppOut) => {\n              const rc = __xWrap();\n              wasm.pokePtr(ppOut, rc.pointer);\n              return rc;\n            },\n\n            get: (pCObj) => __xWrap(pCObj),\n\n            unget: (pCObj) => __xWrap(pCObj, true),\n\n            dispose: (pCObj) => {\n              const o = __xWrap(pCObj, true);\n              if (o) o.dispose();\n            },\n          });\n        };\n\n        vtab.xVtab = StructPtrMapper('xVtab', capi.sqlite3_vtab);\n\n        vtab.xCursor = StructPtrMapper('xCursor', capi.sqlite3_vtab_cursor);\n\n        vtab.xIndexInfo = (pIdxInfo) => new capi.sqlite3_index_info(pIdxInfo);\n\n        vtab.xError = function f(methodName, err, defaultRc) {\n          if (f.errorReporter instanceof Function) {\n            try {\n              f.errorReporter(\n                'sqlite3_module::' + methodName + '(): ' + err.message,\n              );\n            } catch (e) {}\n          }\n          let rc;\n          if (err instanceof sqlite3.WasmAllocError) rc = capi.SQLITE_NOMEM;\n          else if (arguments.length > 2) rc = defaultRc;\n          else if (err instanceof sqlite3.SQLite3Error) rc = err.resultCode;\n          return rc || capi.SQLITE_ERROR;\n        };\n        vtab.xError.errorReporter =  true ? console.error.bind(console) : 0;\n\n        vtab.xRowid = (ppRowid64, value) => wasm.poke(ppRowid64, value, 'i64');\n\n        vtab.setupModule = function (opt) {\n          let createdMod = false;\n          const mod =\n            this instanceof capi.sqlite3_module\n              ? this\n              : opt.struct || (createdMod = new capi.sqlite3_module());\n          try {\n            const methods = opt.methods || toss(\"Missing 'methods' object.\");\n            for (const e of Object.entries({\n              xConnect: 'xCreate',\n              xDisconnect: 'xDestroy',\n            })) {\n              const k = e[0],\n                v = e[1];\n              if (true === methods[k]) methods[k] = methods[v];\n              else if (true === methods[v]) methods[v] = methods[k];\n            }\n            if (opt.catchExceptions) {\n              const fwrap = function (methodName, func) {\n                if (['xConnect', 'xCreate'].indexOf(methodName) >= 0) {\n                  return function (pDb, pAux, argc, argv, ppVtab, pzErr) {\n                    try {\n                      return func(...arguments) || 0;\n                    } catch (e) {\n                      if (!(e instanceof sqlite3.WasmAllocError)) {\n                        wasm.dealloc(wasm.peekPtr(pzErr));\n                        wasm.pokePtr(pzErr, wasm.allocCString(e.message));\n                      }\n                      return vtab.xError(methodName, e);\n                    }\n                  };\n                } else {\n                  return function (...args) {\n                    try {\n                      return func(...args) || 0;\n                    } catch (e) {\n                      return vtab.xError(methodName, e);\n                    }\n                  };\n                }\n              };\n              const mnames = [\n                'xCreate',\n                'xConnect',\n                'xBestIndex',\n                'xDisconnect',\n                'xDestroy',\n                'xOpen',\n                'xClose',\n                'xFilter',\n                'xNext',\n                'xEof',\n                'xColumn',\n                'xRowid',\n                'xUpdate',\n                'xBegin',\n                'xSync',\n                'xCommit',\n                'xRollback',\n                'xFindFunction',\n                'xRename',\n                'xSavepoint',\n                'xRelease',\n                'xRollbackTo',\n                'xShadowName',\n              ];\n              const remethods = Object.create(null);\n              for (const k of mnames) {\n                const m = methods[k];\n                if (!(m instanceof Function)) continue;\n                else if ('xConnect' === k && methods.xCreate === m) {\n                  remethods[k] = methods.xCreate;\n                } else if ('xCreate' === k && methods.xConnect === m) {\n                  remethods[k] = methods.xConnect;\n                } else {\n                  remethods[k] = fwrap(k, m);\n                }\n              }\n              installMethods(mod, remethods, false);\n            } else {\n              installMethods(mod, methods, !!opt.applyArgcCheck);\n            }\n            if (0 === mod.$iVersion) {\n              let v;\n              if ('number' === typeof opt.iVersion) v = opt.iVersion;\n              else if (mod.$xShadowName) v = 3;\n              else if (mod.$xSavePoint || mod.$xRelease || mod.$xRollbackTo)\n                v = 2;\n              else v = 1;\n              mod.$iVersion = v;\n            }\n          } catch (e) {\n            if (createdMod) createdMod.dispose();\n            throw e;\n          }\n          return mod;\n        };\n\n        capi.sqlite3_module.prototype.setupModule = function (opt) {\n          return vtab.setupModule.call(this, opt);\n        };\n      });\n\n      ('use strict');\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const installOpfsVfs = function callee(options) {\n          if (!globalThis.SharedArrayBuffer || !globalThis.Atomics) {\n            return Promise.reject(\n              new Error(\n                'Cannot install OPFS: Missing SharedArrayBuffer and/or Atomics. ' +\n                  'The server must emit the COOP/COEP response headers to enable those. ' +\n                  'See https://sqlite.org/wasm/doc/trunk/persistence.md#coop-coep',\n              ),\n            );\n          } else if ('undefined' === typeof WorkerGlobalScope) {\n            return Promise.reject(\n              new Error(\n                'The OPFS sqlite3_vfs cannot run in the main thread ' +\n                  'because it requires Atomics.wait().',\n              ),\n            );\n          } else if (\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle ||\n            !globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle ||\n            !navigator?.storage?.getDirectory\n          ) {\n            return Promise.reject(new Error('Missing required OPFS APIs.'));\n          }\n          if (!options || 'object' !== typeof options) {\n            options = Object.create(null);\n          }\n          const urlParams = new URL(globalThis.location.href).searchParams;\n          if (urlParams.has('opfs-disable')) {\n            return Promise.resolve(sqlite3);\n          }\n          if (undefined === options.verbose) {\n            options.verbose = urlParams.has('opfs-verbose')\n              ? +urlParams.get('opfs-verbose') || 2\n              : 1;\n          }\n          if (undefined === options.sanityChecks) {\n            options.sanityChecks = urlParams.has('opfs-sanity-check');\n          }\n          if (undefined === options.proxyUri) {\n            options.proxyUri = callee.defaultProxyUri;\n          }\n\n          if ('function' === typeof options.proxyUri) {\n            options.proxyUri = options.proxyUri();\n          }\n          const thePromise = new Promise(function (\n            promiseResolve_,\n            promiseReject_,\n          ) {\n            const loggers = [\n              sqlite3.config.error,\n              sqlite3.config.warn,\n              sqlite3.config.log,\n            ];\n            const logImpl = (level, ...args) => {\n              if (options.verbose > level)\n                loggers[level]('OPFS syncer:', ...args);\n            };\n            const log = (...args) => logImpl(2, ...args);\n            const warn = (...args) => logImpl(1, ...args);\n            const error = (...args) => logImpl(0, ...args);\n            const toss = sqlite3.util.toss;\n            const capi = sqlite3.capi;\n            const util = sqlite3.util;\n            const wasm = sqlite3.wasm;\n            const sqlite3_vfs = capi.sqlite3_vfs;\n            const sqlite3_file = capi.sqlite3_file;\n            const sqlite3_io_methods = capi.sqlite3_io_methods;\n\n            const opfsUtil = Object.create(null);\n\n            const thisThreadHasOPFS = () => {\n              return (\n                globalThis.FileSystemHandle &&\n                globalThis.FileSystemDirectoryHandle &&\n                globalThis.FileSystemFileHandle &&\n                globalThis.FileSystemFileHandle.prototype\n                  .createSyncAccessHandle &&\n                navigator?.storage?.getDirectory\n              );\n            };\n\n            opfsUtil.metrics = {\n              dump: function () {\n                let k,\n                  n = 0,\n                  t = 0,\n                  w = 0;\n                for (k in state.opIds) {\n                  const m = metrics[k];\n                  n += m.count;\n                  t += m.time;\n                  w += m.wait;\n                  m.avgTime = m.count && m.time ? m.time / m.count : 0;\n                  m.avgWait = m.count && m.wait ? m.wait / m.count : 0;\n                }\n                sqlite3.config.log(\n                  globalThis.location.href,\n                  'metrics for',\n                  globalThis.location.href,\n                  ':',\n                  metrics,\n                  '\\nTotal of',\n                  n,\n                  'op(s) for',\n                  t,\n                  'ms (incl. ' + w + ' ms of waiting on the async side)',\n                );\n                sqlite3.config.log('Serialization metrics:', metrics.s11n);\n                W.postMessage({ type: 'opfs-async-metrics' });\n              },\n              reset: function () {\n                let k;\n                const r = (m) => (m.count = m.time = m.wait = 0);\n                for (k in state.opIds) {\n                  r((metrics[k] = Object.create(null)));\n                }\n                let s = (metrics.s11n = Object.create(null));\n                s = s.serialize = Object.create(null);\n                s.count = s.time = 0;\n                s = metrics.s11n.deserialize = Object.create(null);\n                s.count = s.time = 0;\n              },\n            };\n            const opfsIoMethods = new sqlite3_io_methods();\n            const opfsVfs = new sqlite3_vfs().addOnDispose(() =>\n              opfsIoMethods.dispose(),\n            );\n            let promiseWasRejected = undefined;\n            const promiseReject = (err) => {\n              promiseWasRejected = true;\n              opfsVfs.dispose();\n              return promiseReject_(err);\n            };\n            const promiseResolve = () => {\n              promiseWasRejected = false;\n              return promiseResolve_(sqlite3);\n            };\n            const W = new Worker(\n              new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(389), __webpack_require__.b),\n            );\n            setTimeout(() => {\n              if (undefined === promiseWasRejected) {\n                promiseReject(\n                  new Error(\n                    'Timeout while waiting for OPFS async proxy worker.',\n                  ),\n                );\n              }\n            }, 4000);\n            W._originalOnError = W.onerror;\n            W.onerror = function (err) {\n              error('Error initializing OPFS asyncer:', err);\n              promiseReject(\n                new Error(\n                  'Loading OPFS async Worker failed for unknown reasons.',\n                ),\n              );\n            };\n            const pDVfs = capi.sqlite3_vfs_find(null);\n            const dVfs = pDVfs ? new sqlite3_vfs(pDVfs) : null;\n            opfsIoMethods.$iVersion = 1;\n            opfsVfs.$iVersion = 2;\n            opfsVfs.$szOsFile = capi.sqlite3_file.structInfo.sizeof;\n            opfsVfs.$mxPathname = 1024;\n            opfsVfs.$zName = wasm.allocCString('opfs');\n\n            opfsVfs.$xDlOpen =\n              opfsVfs.$xDlError =\n              opfsVfs.$xDlSym =\n              opfsVfs.$xDlClose =\n                null;\n            opfsVfs.addOnDispose(\n              '$zName',\n              opfsVfs.$zName,\n              'cleanup default VFS wrapper',\n              () => (dVfs ? dVfs.dispose() : null),\n            );\n\n            const state = Object.create(null);\n            state.verbose = options.verbose;\n            state.littleEndian = (() => {\n              const buffer = new ArrayBuffer(2);\n              new DataView(buffer).setInt16(0, 256, true);\n\n              return new Int16Array(buffer)[0] === 256;\n            })();\n\n            state.asyncIdleWaitTime = 150;\n\n            state.asyncS11nExceptions = 1;\n\n            state.fileBufferSize = 1024 * 64;\n            state.sabS11nOffset = state.fileBufferSize;\n\n            state.sabS11nSize = opfsVfs.$mxPathname * 2;\n\n            state.sabIO = new SharedArrayBuffer(\n              state.fileBufferSize + state.sabS11nSize,\n            );\n            state.opIds = Object.create(null);\n            const metrics = Object.create(null);\n            {\n              let i = 0;\n\n              state.opIds.whichOp = i++;\n\n              state.opIds.rc = i++;\n\n              state.opIds.xAccess = i++;\n              state.opIds.xClose = i++;\n              state.opIds.xDelete = i++;\n              state.opIds.xDeleteNoWait = i++;\n              state.opIds.xFileSize = i++;\n              state.opIds.xLock = i++;\n              state.opIds.xOpen = i++;\n              state.opIds.xRead = i++;\n              state.opIds.xSleep = i++;\n              state.opIds.xSync = i++;\n              state.opIds.xTruncate = i++;\n              state.opIds.xUnlock = i++;\n              state.opIds.xWrite = i++;\n              state.opIds.mkdir = i++;\n              state.opIds['opfs-async-metrics'] = i++;\n              state.opIds['opfs-async-shutdown'] = i++;\n\n              state.opIds.retry = i++;\n              state.sabOP = new SharedArrayBuffer(i * 4);\n              opfsUtil.metrics.reset();\n            }\n\n            state.sq3Codes = Object.create(null);\n            [\n              'SQLITE_ACCESS_EXISTS',\n              'SQLITE_ACCESS_READWRITE',\n              'SQLITE_BUSY',\n              'SQLITE_ERROR',\n              'SQLITE_IOERR',\n              'SQLITE_IOERR_ACCESS',\n              'SQLITE_IOERR_CLOSE',\n              'SQLITE_IOERR_DELETE',\n              'SQLITE_IOERR_FSYNC',\n              'SQLITE_IOERR_LOCK',\n              'SQLITE_IOERR_READ',\n              'SQLITE_IOERR_SHORT_READ',\n              'SQLITE_IOERR_TRUNCATE',\n              'SQLITE_IOERR_UNLOCK',\n              'SQLITE_IOERR_WRITE',\n              'SQLITE_LOCK_EXCLUSIVE',\n              'SQLITE_LOCK_NONE',\n              'SQLITE_LOCK_PENDING',\n              'SQLITE_LOCK_RESERVED',\n              'SQLITE_LOCK_SHARED',\n              'SQLITE_LOCKED',\n              'SQLITE_MISUSE',\n              'SQLITE_NOTFOUND',\n              'SQLITE_OPEN_CREATE',\n              'SQLITE_OPEN_DELETEONCLOSE',\n              'SQLITE_OPEN_MAIN_DB',\n              'SQLITE_OPEN_READONLY',\n            ].forEach((k) => {\n              if (undefined === (state.sq3Codes[k] = capi[k])) {\n                toss('Maintenance required: not found:', k);\n              }\n            });\n            state.opfsFlags = Object.assign(Object.create(null), {\n              OPFS_UNLOCK_ASAP: 0x01,\n\n              defaultUnlockAsap: false,\n            });\n\n            const opRun = (op, ...args) => {\n              const opNdx = state.opIds[op] || toss('Invalid op ID:', op);\n              state.s11n.serialize(...args);\n              Atomics.store(state.sabOPView, state.opIds.rc, -1);\n              Atomics.store(state.sabOPView, state.opIds.whichOp, opNdx);\n              Atomics.notify(state.sabOPView, state.opIds.whichOp);\n              const t = performance.now();\n              Atomics.wait(state.sabOPView, state.opIds.rc, -1);\n              const rc = Atomics.load(state.sabOPView, state.opIds.rc);\n              metrics[op].wait += performance.now() - t;\n              if (rc && state.asyncS11nExceptions) {\n                const err = state.s11n.deserialize();\n                if (err) error(op + '() async error:', ...err);\n              }\n              return rc;\n            };\n\n            opfsUtil.debug = {\n              asyncShutdown: () => {\n                warn(\n                  'Shutting down OPFS async listener. The OPFS VFS will no longer work.',\n                );\n                opRun('opfs-async-shutdown');\n              },\n              asyncRestart: () => {\n                warn(\n                  'Attempting to restart OPFS VFS async listener. Might work, might not.',\n                );\n                W.postMessage({ type: 'opfs-async-restart' });\n              },\n            };\n\n            const initS11n = () => {\n              if (state.s11n) return state.s11n;\n              const textDecoder = new TextDecoder(),\n                textEncoder = new TextEncoder('utf-8'),\n                viewU8 = new Uint8Array(\n                  state.sabIO,\n                  state.sabS11nOffset,\n                  state.sabS11nSize,\n                ),\n                viewDV = new DataView(\n                  state.sabIO,\n                  state.sabS11nOffset,\n                  state.sabS11nSize,\n                );\n              state.s11n = Object.create(null);\n\n              const TypeIds = Object.create(null);\n              TypeIds.number = {\n                id: 1,\n                size: 8,\n                getter: 'getFloat64',\n                setter: 'setFloat64',\n              };\n              TypeIds.bigint = {\n                id: 2,\n                size: 8,\n                getter: 'getBigInt64',\n                setter: 'setBigInt64',\n              };\n              TypeIds.boolean = {\n                id: 3,\n                size: 4,\n                getter: 'getInt32',\n                setter: 'setInt32',\n              };\n              TypeIds.string = { id: 4 };\n\n              const getTypeId = (v) =>\n                TypeIds[typeof v] ||\n                toss(\n                  'Maintenance required: this value type cannot be serialized.',\n                  v,\n                );\n              const getTypeIdById = (tid) => {\n                switch (tid) {\n                  case TypeIds.number.id:\n                    return TypeIds.number;\n                  case TypeIds.bigint.id:\n                    return TypeIds.bigint;\n                  case TypeIds.boolean.id:\n                    return TypeIds.boolean;\n                  case TypeIds.string.id:\n                    return TypeIds.string;\n                  default:\n                    toss('Invalid type ID:', tid);\n                }\n              };\n\n              state.s11n.deserialize = function (clear = false) {\n                ++metrics.s11n.deserialize.count;\n                const t = performance.now();\n                const argc = viewU8[0];\n                const rc = argc ? [] : null;\n                if (argc) {\n                  const typeIds = [];\n                  let offset = 1,\n                    i,\n                    n,\n                    v;\n                  for (i = 0; i < argc; ++i, ++offset) {\n                    typeIds.push(getTypeIdById(viewU8[offset]));\n                  }\n                  for (i = 0; i < argc; ++i) {\n                    const t = typeIds[i];\n                    if (t.getter) {\n                      v = viewDV[t.getter](offset, state.littleEndian);\n                      offset += t.size;\n                    } else {\n                      n = viewDV.getInt32(offset, state.littleEndian);\n                      offset += 4;\n                      v = textDecoder.decode(viewU8.slice(offset, offset + n));\n                      offset += n;\n                    }\n                    rc.push(v);\n                  }\n                }\n                if (clear) viewU8[0] = 0;\n\n                metrics.s11n.deserialize.time += performance.now() - t;\n                return rc;\n              };\n\n              state.s11n.serialize = function (...args) {\n                const t = performance.now();\n                ++metrics.s11n.serialize.count;\n                if (args.length) {\n                  const typeIds = [];\n                  let i = 0,\n                    offset = 1;\n                  viewU8[0] = args.length & 0xff;\n                  for (; i < args.length; ++i, ++offset) {\n                    typeIds.push(getTypeId(args[i]));\n                    viewU8[offset] = typeIds[i].id;\n                  }\n                  for (i = 0; i < args.length; ++i) {\n                    const t = typeIds[i];\n                    if (t.setter) {\n                      viewDV[t.setter](offset, args[i], state.littleEndian);\n                      offset += t.size;\n                    } else {\n                      const s = textEncoder.encode(args[i]);\n                      viewDV.setInt32(offset, s.byteLength, state.littleEndian);\n                      offset += 4;\n                      viewU8.set(s, offset);\n                      offset += s.byteLength;\n                    }\n                  }\n                } else {\n                  viewU8[0] = 0;\n                }\n                metrics.s11n.serialize.time += performance.now() - t;\n              };\n              return state.s11n;\n            };\n\n            const randomFilename = function f(len = 16) {\n              if (!f._chars) {\n                f._chars =\n                  'abcdefghijklmnopqrstuvwxyz' +\n                  'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n                  '012346789';\n                f._n = f._chars.length;\n              }\n              const a = [];\n              let i = 0;\n              for (; i < len; ++i) {\n                const ndx = (Math.random() * (f._n * 64)) % f._n | 0;\n                a[i] = f._chars[ndx];\n              }\n              return a.join('');\n            };\n\n            const __openFiles = Object.create(null);\n\n            const opTimer = Object.create(null);\n            opTimer.op = undefined;\n            opTimer.start = undefined;\n            const mTimeStart = (op) => {\n              opTimer.start = performance.now();\n              opTimer.op = op;\n              ++metrics[op].count;\n            };\n            const mTimeEnd = () =>\n              (metrics[opTimer.op].time += performance.now() - opTimer.start);\n\n            const ioSyncWrappers = {\n              xCheckReservedLock: function (pFile, pOut) {\n                const f = __openFiles[pFile];\n                wasm.poke(pOut, f.lockType ? 1 : 0, 'i32');\n                return 0;\n              },\n              xClose: function (pFile) {\n                mTimeStart('xClose');\n                let rc = 0;\n                const f = __openFiles[pFile];\n                if (f) {\n                  delete __openFiles[pFile];\n                  rc = opRun('xClose', pFile);\n                  if (f.sq3File) f.sq3File.dispose();\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xDeviceCharacteristics: function (pFile) {\n                return capi.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;\n              },\n              xFileControl: function (pFile, opId, pArg) {\n                return capi.SQLITE_NOTFOUND;\n              },\n              xFileSize: function (pFile, pSz64) {\n                mTimeStart('xFileSize');\n                let rc = opRun('xFileSize', pFile);\n                if (0 == rc) {\n                  try {\n                    const sz = state.s11n.deserialize()[0];\n                    wasm.poke(pSz64, sz, 'i64');\n                  } catch (e) {\n                    error('Unexpected error reading xFileSize() result:', e);\n                    rc = state.sq3Codes.SQLITE_IOERR;\n                  }\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xLock: function (pFile, lockType) {\n                mTimeStart('xLock');\n                const f = __openFiles[pFile];\n                let rc = 0;\n\n                if (!f.lockType) {\n                  rc = opRun('xLock', pFile, lockType);\n                  if (0 === rc) f.lockType = lockType;\n                } else {\n                  f.lockType = lockType;\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xRead: function (pFile, pDest, n, offset64) {\n                mTimeStart('xRead');\n                const f = __openFiles[pFile];\n                let rc;\n                try {\n                  rc = opRun('xRead', pFile, n, Number(offset64));\n                  if (0 === rc || capi.SQLITE_IOERR_SHORT_READ === rc) {\n                    wasm.heap8u().set(f.sabView.subarray(0, n), pDest);\n                  }\n                } catch (e) {\n                  error('xRead(', arguments, ') failed:', e, f);\n                  rc = capi.SQLITE_IOERR_READ;\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xSync: function (pFile, flags) {\n                mTimeStart('xSync');\n                ++metrics.xSync.count;\n                const rc = opRun('xSync', pFile, flags);\n                mTimeEnd();\n                return rc;\n              },\n              xTruncate: function (pFile, sz64) {\n                mTimeStart('xTruncate');\n                const rc = opRun('xTruncate', pFile, Number(sz64));\n                mTimeEnd();\n                return rc;\n              },\n              xUnlock: function (pFile, lockType) {\n                mTimeStart('xUnlock');\n                const f = __openFiles[pFile];\n                let rc = 0;\n                if (capi.SQLITE_LOCK_NONE === lockType && f.lockType) {\n                  rc = opRun('xUnlock', pFile, lockType);\n                }\n                if (0 === rc) f.lockType = lockType;\n                mTimeEnd();\n                return rc;\n              },\n              xWrite: function (pFile, pSrc, n, offset64) {\n                mTimeStart('xWrite');\n                const f = __openFiles[pFile];\n                let rc;\n                try {\n                  f.sabView.set(wasm.heap8u().subarray(pSrc, pSrc + n));\n                  rc = opRun('xWrite', pFile, n, Number(offset64));\n                } catch (e) {\n                  error('xWrite(', arguments, ') failed:', e, f);\n                  rc = capi.SQLITE_IOERR_WRITE;\n                }\n                mTimeEnd();\n                return rc;\n              },\n            };\n\n            const vfsSyncWrappers = {\n              xAccess: function (pVfs, zName, flags, pOut) {\n                mTimeStart('xAccess');\n                const rc = opRun('xAccess', wasm.cstrToJs(zName));\n                wasm.poke(pOut, rc ? 0 : 1, 'i32');\n                mTimeEnd();\n                return 0;\n              },\n              xCurrentTime: function (pVfs, pOut) {\n                wasm.poke(\n                  pOut,\n                  2440587.5 + new Date().getTime() / 86400000,\n                  'double',\n                );\n                return 0;\n              },\n              xCurrentTimeInt64: function (pVfs, pOut) {\n                wasm.poke(\n                  pOut,\n                  2440587.5 * 86400000 + new Date().getTime(),\n                  'i64',\n                );\n                return 0;\n              },\n              xDelete: function (pVfs, zName, doSyncDir) {\n                mTimeStart('xDelete');\n                const rc = opRun(\n                  'xDelete',\n                  wasm.cstrToJs(zName),\n                  doSyncDir,\n                  false,\n                );\n                mTimeEnd();\n                return rc;\n              },\n              xFullPathname: function (pVfs, zName, nOut, pOut) {\n                const i = wasm.cstrncpy(pOut, zName, nOut);\n                return i < nOut ? 0 : capi.SQLITE_CANTOPEN;\n              },\n              xGetLastError: function (pVfs, nOut, pOut) {\n                warn('OPFS xGetLastError() has nothing sensible to return.');\n                return 0;\n              },\n\n              xOpen: function f(pVfs, zName, pFile, flags, pOutFlags) {\n                mTimeStart('xOpen');\n                let opfsFlags = 0;\n                if (0 === zName) {\n                  zName = randomFilename();\n                } else if ('number' === typeof zName) {\n                  if (capi.sqlite3_uri_boolean(zName, 'opfs-unlock-asap', 0)) {\n                    opfsFlags |= state.opfsFlags.OPFS_UNLOCK_ASAP;\n                  }\n                  zName = wasm.cstrToJs(zName);\n                }\n                const fh = Object.create(null);\n                fh.fid = pFile;\n                fh.filename = zName;\n                fh.sab = new SharedArrayBuffer(state.fileBufferSize);\n                fh.flags = flags;\n                const rc = opRun('xOpen', pFile, zName, flags, opfsFlags);\n                if (!rc) {\n                  if (fh.readOnly) {\n                    wasm.poke(pOutFlags, capi.SQLITE_OPEN_READONLY, 'i32');\n                  }\n                  __openFiles[pFile] = fh;\n                  fh.sabView = state.sabFileBufView;\n                  fh.sq3File = new sqlite3_file(pFile);\n                  fh.sq3File.$pMethods = opfsIoMethods.pointer;\n                  fh.lockType = capi.SQLITE_LOCK_NONE;\n                }\n                mTimeEnd();\n                return rc;\n              },\n            };\n\n            if (dVfs) {\n              opfsVfs.$xRandomness = dVfs.$xRandomness;\n              opfsVfs.$xSleep = dVfs.$xSleep;\n            }\n            if (!opfsVfs.$xRandomness) {\n              vfsSyncWrappers.xRandomness = function (pVfs, nOut, pOut) {\n                const heap = wasm.heap8u();\n                let i = 0;\n                for (; i < nOut; ++i)\n                  heap[pOut + i] = (Math.random() * 255000) & 0xff;\n                return i;\n              };\n            }\n            if (!opfsVfs.$xSleep) {\n              vfsSyncWrappers.xSleep = function (pVfs, ms) {\n                Atomics.wait(state.sabOPView, state.opIds.xSleep, 0, ms);\n                return 0;\n              };\n            }\n\n            opfsUtil.getResolvedPath = function (filename, splitIt) {\n              const p = new URL(filename, 'file://irrelevant').pathname;\n              return splitIt ? p.split('/').filter((v) => !!v) : p;\n            };\n\n            opfsUtil.getDirForFilename = async function f(\n              absFilename,\n              createDirs = false,\n            ) {\n              const path = opfsUtil.getResolvedPath(absFilename, true);\n              const filename = path.pop();\n              let dh = opfsUtil.rootDirectory;\n              for (const dirName of path) {\n                if (dirName) {\n                  dh = await dh.getDirectoryHandle(dirName, {\n                    create: !!createDirs,\n                  });\n                }\n              }\n              return [dh, filename];\n            };\n\n            opfsUtil.mkdir = async function (absDirName) {\n              try {\n                await opfsUtil.getDirForFilename(\n                  absDirName + '/filepart',\n                  true,\n                );\n                return true;\n              } catch (e) {\n                return false;\n              }\n            };\n\n            opfsUtil.entryExists = async function (fsEntryName) {\n              try {\n                const [dh, fn] = await opfsUtil.getDirForFilename(fsEntryName);\n                await dh.getFileHandle(fn);\n                return true;\n              } catch (e) {\n                return false;\n              }\n            };\n\n            opfsUtil.randomFilename = randomFilename;\n\n            opfsUtil.registerVfs = (asDefault = false) => {\n              return wasm.exports.sqlite3_vfs_register(\n                opfsVfs.pointer,\n                asDefault ? 1 : 0,\n              );\n            };\n\n            opfsUtil.treeList = async function () {\n              const doDir = async function callee(dirHandle, tgt) {\n                tgt.name = dirHandle.name;\n                tgt.dirs = [];\n                tgt.files = [];\n                for await (const handle of dirHandle.values()) {\n                  if ('directory' === handle.kind) {\n                    const subDir = Object.create(null);\n                    tgt.dirs.push(subDir);\n                    await callee(handle, subDir);\n                  } else {\n                    tgt.files.push(handle.name);\n                  }\n                }\n              };\n              const root = Object.create(null);\n              await doDir(opfsUtil.rootDirectory, root);\n              return root;\n            };\n\n            opfsUtil.rmfr = async function () {\n              const dir = opfsUtil.rootDirectory,\n                opt = { recurse: true };\n              for await (const handle of dir.values()) {\n                dir.removeEntry(handle.name, opt);\n              }\n            };\n\n            opfsUtil.unlink = async function (\n              fsEntryName,\n              recursive = false,\n              throwOnError = false,\n            ) {\n              try {\n                const [hDir, filenamePart] = await opfsUtil.getDirForFilename(\n                  fsEntryName,\n                  false,\n                );\n                await hDir.removeEntry(filenamePart, { recursive });\n                return true;\n              } catch (e) {\n                if (throwOnError) {\n                  throw new Error(\n                    'unlink(',\n                    arguments[0],\n                    ') failed: ' + e.message,\n                    {\n                      cause: e,\n                    },\n                  );\n                }\n                return false;\n              }\n            };\n\n            opfsUtil.traverse = async function (opt) {\n              const defaultOpt = {\n                recursive: true,\n                directory: opfsUtil.rootDirectory,\n              };\n              if ('function' === typeof opt) {\n                opt = { callback: opt };\n              }\n              opt = Object.assign(defaultOpt, opt || {});\n              const doDir = async function callee(dirHandle, depth) {\n                for await (const handle of dirHandle.values()) {\n                  if (false === opt.callback(handle, dirHandle, depth))\n                    return false;\n                  else if (opt.recursive && 'directory' === handle.kind) {\n                    if (false === (await callee(handle, depth + 1))) break;\n                  }\n                }\n              };\n              doDir(opt.directory, 0);\n            };\n\n            const importDbChunked = async function (filename, callback) {\n              const [hDir, fnamePart] = await opfsUtil.getDirForFilename(\n                filename,\n                true,\n              );\n              const hFile = await hDir.getFileHandle(fnamePart, {\n                create: true,\n              });\n              let sah = await hFile.createSyncAccessHandle();\n              let nWrote = 0,\n                chunk,\n                checkedHeader = false,\n                err = false;\n              try {\n                sah.truncate(0);\n                while (undefined !== (chunk = await callback())) {\n                  if (chunk instanceof ArrayBuffer)\n                    chunk = new Uint8Array(chunk);\n                  if (0 === nWrote && chunk.byteLength >= 15) {\n                    util.affirmDbHeader(chunk);\n                    checkedHeader = true;\n                  }\n                  sah.write(chunk, { at: nWrote });\n                  nWrote += chunk.byteLength;\n                }\n                if (nWrote < 512 || 0 !== nWrote % 512) {\n                  toss(\n                    'Input size',\n                    nWrote,\n                    'is not correct for an SQLite database.',\n                  );\n                }\n                if (!checkedHeader) {\n                  const header = new Uint8Array(20);\n                  sah.read(header, { at: 0 });\n                  util.affirmDbHeader(header);\n                }\n                sah.write(new Uint8Array([1, 1]), { at: 18 });\n                return nWrote;\n              } catch (e) {\n                await sah.close();\n                sah = undefined;\n                await hDir.removeEntry(fnamePart).catch(() => {});\n                throw e;\n              } finally {\n                if (sah) await sah.close();\n              }\n            };\n\n            opfsUtil.importDb = async function (filename, bytes) {\n              if (bytes instanceof Function) {\n                return importDbChunked(filename, bytes);\n              }\n              if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n              util.affirmIsDb(bytes);\n              const n = bytes.byteLength;\n              const [hDir, fnamePart] = await opfsUtil.getDirForFilename(\n                filename,\n                true,\n              );\n              let sah,\n                err,\n                nWrote = 0;\n              try {\n                const hFile = await hDir.getFileHandle(fnamePart, {\n                  create: true,\n                });\n                sah = await hFile.createSyncAccessHandle();\n                sah.truncate(0);\n                nWrote = sah.write(bytes, { at: 0 });\n                if (nWrote != n) {\n                  toss(\n                    'Expected to write ' +\n                      n +\n                      ' bytes but wrote ' +\n                      nWrote +\n                      '.',\n                  );\n                }\n                sah.write(new Uint8Array([1, 1]), { at: 18 });\n                return nWrote;\n              } catch (e) {\n                if (sah) {\n                  await sah.close();\n                  sah = undefined;\n                }\n                await hDir.removeEntry(fnamePart).catch(() => {});\n                throw e;\n              } finally {\n                if (sah) await sah.close();\n              }\n            };\n\n            if (sqlite3.oo1) {\n              const OpfsDb = function (...args) {\n                const opt = sqlite3.oo1.DB.dbCtorHelper.normalizeArgs(...args);\n                opt.vfs = opfsVfs.$zName;\n                sqlite3.oo1.DB.dbCtorHelper.call(this, opt);\n              };\n              OpfsDb.prototype = Object.create(sqlite3.oo1.DB.prototype);\n              sqlite3.oo1.OpfsDb = OpfsDb;\n              OpfsDb.importDb = opfsUtil.importDb;\n              sqlite3.oo1.DB.dbCtorHelper.setVfsPostOpenSql(\n                opfsVfs.pointer,\n                function (oo1Db, sqlite3) {\n                  sqlite3.capi.sqlite3_busy_timeout(oo1Db, 10000);\n                  sqlite3.capi.sqlite3_exec(\n                    oo1Db,\n                    [\n                      'pragma journal_mode=DELETE;',\n\n                      'pragma cache_size=-16384;',\n                    ],\n                    0,\n                    0,\n                    0,\n                  );\n                },\n              );\n            }\n\n            const sanityCheck = function () {\n              const scope = wasm.scopedAllocPush();\n              const sq3File = new sqlite3_file();\n              try {\n                const fid = sq3File.pointer;\n                const openFlags =\n                  capi.SQLITE_OPEN_CREATE |\n                  capi.SQLITE_OPEN_READWRITE |\n                  capi.SQLITE_OPEN_MAIN_DB;\n                const pOut = wasm.scopedAlloc(8);\n                const dbFile = '/sanity/check/file' + randomFilename(8);\n                const zDbFile = wasm.scopedAllocCString(dbFile);\n                let rc;\n                state.s11n.serialize('This is ä string.');\n                rc = state.s11n.deserialize();\n                log('deserialize() says:', rc);\n                if ('This is ä string.' !== rc[0]) toss('String d13n error.');\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                log('xAccess(', dbFile, ') exists ?=', rc);\n                rc = vfsSyncWrappers.xOpen(\n                  opfsVfs.pointer,\n                  zDbFile,\n                  fid,\n                  openFlags,\n                  pOut,\n                );\n                log(\n                  'open rc =',\n                  rc,\n                  'state.sabOPView[xOpen] =',\n                  state.sabOPView[state.opIds.xOpen],\n                );\n                if (0 !== rc) {\n                  error('open failed with code', rc);\n                  return;\n                }\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                if (!rc) toss('xAccess() failed to detect file.');\n                rc = ioSyncWrappers.xSync(sq3File.pointer, 0);\n                if (rc) toss('sync failed w/ rc', rc);\n                rc = ioSyncWrappers.xTruncate(sq3File.pointer, 1024);\n                if (rc) toss('truncate failed w/ rc', rc);\n                wasm.poke(pOut, 0, 'i64');\n                rc = ioSyncWrappers.xFileSize(sq3File.pointer, pOut);\n                if (rc) toss('xFileSize failed w/ rc', rc);\n                log('xFileSize says:', wasm.peek(pOut, 'i64'));\n                rc = ioSyncWrappers.xWrite(sq3File.pointer, zDbFile, 10, 1);\n                if (rc) toss('xWrite() failed!');\n                const readBuf = wasm.scopedAlloc(16);\n                rc = ioSyncWrappers.xRead(sq3File.pointer, readBuf, 6, 2);\n                wasm.poke(readBuf + 6, 0);\n                let jRead = wasm.cstrToJs(readBuf);\n                log('xRead() got:', jRead);\n                if ('sanity' !== jRead) toss('Unexpected xRead() value.');\n                if (vfsSyncWrappers.xSleep) {\n                  log('xSleep()ing before close()ing...');\n                  vfsSyncWrappers.xSleep(opfsVfs.pointer, 2000);\n                  log('waking up from xSleep()');\n                }\n                rc = ioSyncWrappers.xClose(fid);\n                log('xClose rc =', rc, 'sabOPView =', state.sabOPView);\n                log('Deleting file:', dbFile);\n                vfsSyncWrappers.xDelete(opfsVfs.pointer, zDbFile, 0x1234);\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                if (rc)\n                  toss(\n                    'Expecting 0 from xAccess(',\n                    dbFile,\n                    ') after xDelete().',\n                  );\n                warn('End of OPFS sanity checks.');\n              } finally {\n                sq3File.dispose();\n                wasm.scopedAllocPop(scope);\n              }\n            };\n\n            W.onmessage = function ({ data }) {\n              switch (data.type) {\n                case 'opfs-unavailable':\n                  promiseReject(new Error(data.payload.join(' ')));\n                  break;\n                case 'opfs-async-loaded':\n                  W.postMessage({ type: 'opfs-async-init', args: state });\n                  break;\n                case 'opfs-async-inited': {\n                  if (true === promiseWasRejected) {\n                    break;\n                  }\n                  try {\n                    sqlite3.vfs.installVfs({\n                      io: { struct: opfsIoMethods, methods: ioSyncWrappers },\n                      vfs: { struct: opfsVfs, methods: vfsSyncWrappers },\n                    });\n                    state.sabOPView = new Int32Array(state.sabOP);\n                    state.sabFileBufView = new Uint8Array(\n                      state.sabIO,\n                      0,\n                      state.fileBufferSize,\n                    );\n                    state.sabS11nView = new Uint8Array(\n                      state.sabIO,\n                      state.sabS11nOffset,\n                      state.sabS11nSize,\n                    );\n                    initS11n();\n                    if (options.sanityChecks) {\n                      warn(\n                        'Running sanity checks because of opfs-sanity-check URL arg...',\n                      );\n                      sanityCheck();\n                    }\n                    if (thisThreadHasOPFS()) {\n                      navigator.storage\n                        .getDirectory()\n                        .then((d) => {\n                          W.onerror = W._originalOnError;\n                          delete W._originalOnError;\n                          sqlite3.opfs = opfsUtil;\n                          opfsUtil.rootDirectory = d;\n                          log('End of OPFS sqlite3_vfs setup.', opfsVfs);\n                          promiseResolve();\n                        })\n                        .catch(promiseReject);\n                    } else {\n                      promiseResolve();\n                    }\n                  } catch (e) {\n                    error(e);\n                    promiseReject(e);\n                  }\n                  break;\n                }\n                default: {\n                  const errMsg =\n                    'Unexpected message from the OPFS async worker: ' +\n                    JSON.stringify(data);\n                  error(errMsg);\n                  promiseReject(new Error(errMsg));\n                  break;\n                }\n              }\n            };\n          });\n          return thePromise;\n        };\n        installOpfsVfs.defaultProxyUri = 'sqlite3-opfs-async-proxy.js';\n        globalThis.sqlite3ApiBootstrap.initializersAsync.push(\n          async (sqlite3) => {\n            try {\n              let proxyJs = installOpfsVfs.defaultProxyUri;\n              if (sqlite3.scriptInfo.sqlite3Dir) {\n                installOpfsVfs.defaultProxyUri =\n                  sqlite3.scriptInfo.sqlite3Dir + proxyJs;\n              }\n              return installOpfsVfs().catch((e) => {\n                sqlite3.config.warn(\n                  'Ignoring inability to install OPFS sqlite3_vfs:',\n                  e.message,\n                );\n              });\n            } catch (e) {\n              sqlite3.config.error('installOpfsVfs() exception:', e);\n              return Promise.reject(e);\n            }\n          },\n        );\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        'use strict';\n        const toss = sqlite3.util.toss;\n        const toss3 = sqlite3.util.toss3;\n        const initPromises = Object.create(null);\n        const capi = sqlite3.capi;\n        const util = sqlite3.util;\n        const wasm = sqlite3.wasm;\n\n        const SECTOR_SIZE = 4096;\n        const HEADER_MAX_PATH_SIZE = 512;\n        const HEADER_FLAGS_SIZE = 4;\n        const HEADER_DIGEST_SIZE = 8;\n        const HEADER_CORPUS_SIZE = HEADER_MAX_PATH_SIZE + HEADER_FLAGS_SIZE;\n        const HEADER_OFFSET_FLAGS = HEADER_MAX_PATH_SIZE;\n        const HEADER_OFFSET_DIGEST = HEADER_CORPUS_SIZE;\n        const HEADER_OFFSET_DATA = SECTOR_SIZE;\n\n        const PERSISTENT_FILE_TYPES =\n          capi.SQLITE_OPEN_MAIN_DB |\n          capi.SQLITE_OPEN_MAIN_JOURNAL |\n          capi.SQLITE_OPEN_SUPER_JOURNAL |\n          capi.SQLITE_OPEN_WAL;\n\n        const OPAQUE_DIR_NAME = '.opaque';\n\n        const getRandomName = () => Math.random().toString(36).slice(2);\n\n        const textDecoder = new TextDecoder();\n        const textEncoder = new TextEncoder();\n\n        const optionDefaults = Object.assign(Object.create(null), {\n          name: 'opfs-sahpool',\n          directory: undefined,\n          initialCapacity: 6,\n          clearOnInit: false,\n\n          verbosity: 2,\n        });\n\n        const loggers = [\n          sqlite3.config.error,\n          sqlite3.config.warn,\n          sqlite3.config.log,\n        ];\n        const log = sqlite3.config.log;\n        const warn = sqlite3.config.warn;\n        const error = sqlite3.config.error;\n\n        const __mapVfsToPool = new Map();\n        const getPoolForVfs = (pVfs) => __mapVfsToPool.get(pVfs);\n        const setPoolForVfs = (pVfs, pool) => {\n          if (pool) __mapVfsToPool.set(pVfs, pool);\n          else __mapVfsToPool.delete(pVfs);\n        };\n\n        const __mapSqlite3File = new Map();\n        const getPoolForPFile = (pFile) => __mapSqlite3File.get(pFile);\n        const setPoolForPFile = (pFile, pool) => {\n          if (pool) __mapSqlite3File.set(pFile, pool);\n          else __mapSqlite3File.delete(pFile);\n        };\n\n        const ioMethods = {\n          xCheckReservedLock: function (pFile, pOut) {\n            const pool = getPoolForPFile(pFile);\n            pool.log('xCheckReservedLock');\n            pool.storeErr();\n            wasm.poke32(pOut, 1);\n            return 0;\n          },\n          xClose: function (pFile) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            if (file) {\n              try {\n                pool.log(`xClose ${file.path}`);\n                pool.mapS3FileToOFile(pFile, false);\n                file.sah.flush();\n                if (file.flags & capi.SQLITE_OPEN_DELETEONCLOSE) {\n                  pool.deletePath(file.path);\n                }\n              } catch (e) {\n                return pool.storeErr(e, capi.SQLITE_IOERR);\n              }\n            }\n            return 0;\n          },\n          xDeviceCharacteristics: function (pFile) {\n            return capi.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;\n          },\n          xFileControl: function (pFile, opId, pArg) {\n            return capi.SQLITE_NOTFOUND;\n          },\n          xFileSize: function (pFile, pSz64) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xFileSize`);\n            const file = pool.getOFileForS3File(pFile);\n            const size = file.sah.getSize() - HEADER_OFFSET_DATA;\n\n            wasm.poke64(pSz64, BigInt(size));\n            return 0;\n          },\n          xLock: function (pFile, lockType) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xLock ${lockType}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            file.lockType = lockType;\n            return 0;\n          },\n          xRead: function (pFile, pDest, n, offset64) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            pool.log(`xRead ${file.path} ${n} @ ${offset64}`);\n            try {\n              const nRead = file.sah.read(\n                wasm.heap8u().subarray(pDest, pDest + n),\n                { at: HEADER_OFFSET_DATA + Number(offset64) },\n              );\n              if (nRead < n) {\n                wasm.heap8u().fill(0, pDest + nRead, pDest + n);\n                return capi.SQLITE_IOERR_SHORT_READ;\n              }\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xSectorSize: function (pFile) {\n            return SECTOR_SIZE;\n          },\n          xSync: function (pFile, flags) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xSync ${flags}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n\n            try {\n              file.sah.flush();\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xTruncate: function (pFile, sz64) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xTruncate ${sz64}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n\n            try {\n              file.sah.truncate(HEADER_OFFSET_DATA + Number(sz64));\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xUnlock: function (pFile, lockType) {\n            const pool = getPoolForPFile(pFile);\n            pool.log('xUnlock');\n            const file = pool.getOFileForS3File(pFile);\n            file.lockType = lockType;\n            return 0;\n          },\n          xWrite: function (pFile, pSrc, n, offset64) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            pool.log(`xWrite ${file.path} ${n} ${offset64}`);\n            try {\n              const nBytes = file.sah.write(\n                wasm.heap8u().subarray(pSrc, pSrc + n),\n                { at: HEADER_OFFSET_DATA + Number(offset64) },\n              );\n              return n === nBytes ? 0 : toss('Unknown write() failure.');\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n        };\n\n        const opfsIoMethods = new capi.sqlite3_io_methods();\n        opfsIoMethods.$iVersion = 1;\n        sqlite3.vfs.installVfs({\n          io: { struct: opfsIoMethods, methods: ioMethods },\n        });\n\n        const vfsMethods = {\n          xAccess: function (pVfs, zName, flags, pOut) {\n            const pool = getPoolForVfs(pVfs);\n            pool.storeErr();\n            try {\n              const name = pool.getPath(zName);\n              wasm.poke32(pOut, pool.hasFilename(name) ? 1 : 0);\n            } catch (e) {\n              wasm.poke32(pOut, 0);\n            }\n            return 0;\n          },\n          xCurrentTime: function (pVfs, pOut) {\n            wasm.poke(\n              pOut,\n              2440587.5 + new Date().getTime() / 86400000,\n              'double',\n            );\n            return 0;\n          },\n          xCurrentTimeInt64: function (pVfs, pOut) {\n            wasm.poke(pOut, 2440587.5 * 86400000 + new Date().getTime(), 'i64');\n            return 0;\n          },\n          xDelete: function (pVfs, zName, doSyncDir) {\n            const pool = getPoolForVfs(pVfs);\n            pool.log(`xDelete ${wasm.cstrToJs(zName)}`);\n            pool.storeErr();\n            try {\n              pool.deletePath(pool.getPath(zName));\n              return 0;\n            } catch (e) {\n              pool.storeErr(e);\n              return capi.SQLITE_IOERR_DELETE;\n            }\n          },\n          xFullPathname: function (pVfs, zName, nOut, pOut) {\n            const i = wasm.cstrncpy(pOut, zName, nOut);\n            return i < nOut ? 0 : capi.SQLITE_CANTOPEN;\n          },\n          xGetLastError: function (pVfs, nOut, pOut) {\n            const pool = getPoolForVfs(pVfs);\n            const e = pool.popErr();\n            pool.log(`xGetLastError ${nOut} e =`, e);\n            if (e) {\n              const scope = wasm.scopedAllocPush();\n              try {\n                const [cMsg, n] = wasm.scopedAllocCString(e.message, true);\n                wasm.cstrncpy(pOut, cMsg, nOut);\n                if (n > nOut) wasm.poke8(pOut + nOut - 1, 0);\n              } catch (e) {\n                return capi.SQLITE_NOMEM;\n              } finally {\n                wasm.scopedAllocPop(scope);\n              }\n            }\n            return e ? e.sqlite3Rc || capi.SQLITE_IOERR : 0;\n          },\n\n          xOpen: function f(pVfs, zName, pFile, flags, pOutFlags) {\n            const pool = getPoolForVfs(pVfs);\n            try {\n              pool.log(`xOpen ${wasm.cstrToJs(zName)} ${flags}`);\n\n              const path =\n                zName && wasm.peek8(zName)\n                  ? pool.getPath(zName)\n                  : getRandomName();\n              let sah = pool.getSAHForPath(path);\n              if (!sah && flags & capi.SQLITE_OPEN_CREATE) {\n                if (pool.getFileCount() < pool.getCapacity()) {\n                  sah = pool.nextAvailableSAH();\n                  pool.setAssociatedPath(sah, path, flags);\n                } else {\n                  toss('SAH pool is full. Cannot create file', path);\n                }\n              }\n              if (!sah) {\n                toss('file not found:', path);\n              }\n\n              const file = { path, flags, sah };\n              pool.mapS3FileToOFile(pFile, file);\n              file.lockType = capi.SQLITE_LOCK_NONE;\n              const sq3File = new capi.sqlite3_file(pFile);\n              sq3File.$pMethods = opfsIoMethods.pointer;\n              sq3File.dispose();\n              wasm.poke32(pOutFlags, flags);\n              return 0;\n            } catch (e) {\n              pool.storeErr(e);\n              return capi.SQLITE_CANTOPEN;\n            }\n          },\n        };\n\n        const createOpfsVfs = function (vfsName) {\n          if (sqlite3.capi.sqlite3_vfs_find(vfsName)) {\n            toss3('VFS name is already registered:', vfsName);\n          }\n          const opfsVfs = new capi.sqlite3_vfs();\n\n          const pDVfs = capi.sqlite3_vfs_find(null);\n          const dVfs = pDVfs ? new capi.sqlite3_vfs(pDVfs) : null;\n          opfsVfs.$iVersion = 2;\n          opfsVfs.$szOsFile = capi.sqlite3_file.structInfo.sizeof;\n          opfsVfs.$mxPathname = HEADER_MAX_PATH_SIZE;\n          opfsVfs.addOnDispose(\n            (opfsVfs.$zName = wasm.allocCString(vfsName)),\n            () => setPoolForVfs(opfsVfs.pointer, 0),\n          );\n\n          if (dVfs) {\n            opfsVfs.$xRandomness = dVfs.$xRandomness;\n            opfsVfs.$xSleep = dVfs.$xSleep;\n            dVfs.dispose();\n          }\n          if (!opfsVfs.$xRandomness && !vfsMethods.xRandomness) {\n            vfsMethods.xRandomness = function (pVfs, nOut, pOut) {\n              const heap = wasm.heap8u();\n              let i = 0;\n              for (; i < nOut; ++i)\n                heap[pOut + i] = (Math.random() * 255000) & 0xff;\n              return i;\n            };\n          }\n          if (!opfsVfs.$xSleep && !vfsMethods.xSleep) {\n            vfsMethods.xSleep = (pVfs, ms) => 0;\n          }\n          sqlite3.vfs.installVfs({\n            vfs: { struct: opfsVfs, methods: vfsMethods },\n          });\n          return opfsVfs;\n        };\n\n        class OpfsSAHPool {\n          vfsDir;\n\n          #dhVfsRoot;\n\n          #dhOpaque;\n\n          #dhVfsParent;\n\n          #mapSAHToName = new Map();\n\n          #mapFilenameToSAH = new Map();\n\n          #availableSAH = new Set();\n\n          #mapS3FileToOFile_ = new Map();\n\n          #apBody = new Uint8Array(HEADER_CORPUS_SIZE);\n\n          #dvBody;\n\n          #cVfs;\n\n          #verbosity;\n\n          constructor(options = Object.create(null)) {\n            this.#verbosity = options.verbosity ?? optionDefaults.verbosity;\n            this.vfsName = options.name || optionDefaults.name;\n            this.#cVfs = createOpfsVfs(this.vfsName);\n            setPoolForVfs(this.#cVfs.pointer, this);\n            this.vfsDir = options.directory || '.' + this.vfsName;\n            this.#dvBody = new DataView(\n              this.#apBody.buffer,\n              this.#apBody.byteOffset,\n            );\n            this.isReady = this.reset(\n              !!(options.clearOnInit ?? optionDefaults.clearOnInit),\n            ).then(() => {\n              if (this.$error) throw this.$error;\n              return this.getCapacity()\n                ? Promise.resolve(undefined)\n                : this.addCapacity(\n                    options.initialCapacity || optionDefaults.initialCapacity,\n                  );\n            });\n          }\n\n          #logImpl(level, ...args) {\n            if (this.#verbosity > level)\n              loggers[level](this.vfsName + ':', ...args);\n          }\n          log(...args) {\n            this.#logImpl(2, ...args);\n          }\n          warn(...args) {\n            this.#logImpl(1, ...args);\n          }\n          error(...args) {\n            this.#logImpl(0, ...args);\n          }\n\n          getVfs() {\n            return this.#cVfs;\n          }\n\n          getCapacity() {\n            return this.#mapSAHToName.size;\n          }\n\n          getFileCount() {\n            return this.#mapFilenameToSAH.size;\n          }\n\n          getFileNames() {\n            const rc = [];\n            const iter = this.#mapFilenameToSAH.keys();\n            for (const n of iter) rc.push(n);\n            return rc;\n          }\n\n          async addCapacity(n) {\n            for (let i = 0; i < n; ++i) {\n              const name = getRandomName();\n              const h = await this.#dhOpaque.getFileHandle(name, {\n                create: true,\n              });\n              const ah = await h.createSyncAccessHandle();\n              this.#mapSAHToName.set(ah, name);\n              this.setAssociatedPath(ah, '', 0);\n            }\n            return this.getCapacity();\n          }\n\n          async reduceCapacity(n) {\n            let nRm = 0;\n            for (const ah of Array.from(this.#availableSAH)) {\n              if (nRm === n || this.getFileCount() === this.getCapacity()) {\n                break;\n              }\n              const name = this.#mapSAHToName.get(ah);\n\n              ah.close();\n              await this.#dhOpaque.removeEntry(name);\n              this.#mapSAHToName.delete(ah);\n              this.#availableSAH.delete(ah);\n              ++nRm;\n            }\n            return nRm;\n          }\n\n          releaseAccessHandles() {\n            for (const ah of this.#mapSAHToName.keys()) ah.close();\n            this.#mapSAHToName.clear();\n            this.#mapFilenameToSAH.clear();\n            this.#availableSAH.clear();\n          }\n\n          async acquireAccessHandles(clearFiles) {\n            const files = [];\n            for await (const [name, h] of this.#dhOpaque) {\n              if ('file' === h.kind) {\n                files.push([name, h]);\n              }\n            }\n            return Promise.all(\n              files.map(async ([name, h]) => {\n                try {\n                  const ah = await h.createSyncAccessHandle();\n                  this.#mapSAHToName.set(ah, name);\n                  if (clearFiles) {\n                    ah.truncate(HEADER_OFFSET_DATA);\n                    this.setAssociatedPath(ah, '', 0);\n                  } else {\n                    const path = this.getAssociatedPath(ah);\n                    if (path) {\n                      this.#mapFilenameToSAH.set(path, ah);\n                    } else {\n                      this.#availableSAH.add(ah);\n                    }\n                  }\n                } catch (e) {\n                  this.storeErr(e);\n                  this.releaseAccessHandles();\n                  throw e;\n                }\n              }),\n            );\n          }\n\n          getAssociatedPath(sah) {\n            sah.read(this.#apBody, { at: 0 });\n\n            const flags = this.#dvBody.getUint32(HEADER_OFFSET_FLAGS);\n            if (\n              this.#apBody[0] &&\n              (flags & capi.SQLITE_OPEN_DELETEONCLOSE ||\n                (flags & PERSISTENT_FILE_TYPES) === 0)\n            ) {\n              warn(\n                `Removing file with unexpected flags ${flags.toString(16)}`,\n                this.#apBody,\n              );\n              this.setAssociatedPath(sah, '', 0);\n              return '';\n            }\n\n            const fileDigest = new Uint32Array(HEADER_DIGEST_SIZE / 4);\n            sah.read(fileDigest, { at: HEADER_OFFSET_DIGEST });\n            const compDigest = this.computeDigest(this.#apBody);\n            if (fileDigest.every((v, i) => v === compDigest[i])) {\n              const pathBytes = this.#apBody.findIndex((v) => 0 === v);\n              if (0 === pathBytes) {\n                sah.truncate(HEADER_OFFSET_DATA);\n              }\n              return pathBytes\n                ? textDecoder.decode(this.#apBody.subarray(0, pathBytes))\n                : '';\n            } else {\n              warn('Disassociating file with bad digest.');\n              this.setAssociatedPath(sah, '', 0);\n              return '';\n            }\n          }\n\n          setAssociatedPath(sah, path, flags) {\n            const enc = textEncoder.encodeInto(path, this.#apBody);\n            if (HEADER_MAX_PATH_SIZE <= enc.written + 1) {\n              toss('Path too long:', path);\n            }\n            this.#apBody.fill(0, enc.written, HEADER_MAX_PATH_SIZE);\n            this.#dvBody.setUint32(HEADER_OFFSET_FLAGS, flags);\n\n            const digest = this.computeDigest(this.#apBody);\n            sah.write(this.#apBody, { at: 0 });\n            sah.write(digest, { at: HEADER_OFFSET_DIGEST });\n            sah.flush();\n\n            if (path) {\n              this.#mapFilenameToSAH.set(path, sah);\n              this.#availableSAH.delete(sah);\n            } else {\n              sah.truncate(HEADER_OFFSET_DATA);\n              this.#availableSAH.add(sah);\n            }\n          }\n\n          computeDigest(byteArray) {\n            let h1 = 0xdeadbeef;\n            let h2 = 0x41c6ce57;\n            for (const v of byteArray) {\n              h1 = 31 * h1 + v * 307;\n              h2 = 31 * h2 + v * 307;\n            }\n            return new Uint32Array([h1 >>> 0, h2 >>> 0]);\n          }\n\n          async reset(clearFiles) {\n            await this.isReady;\n            let h = await navigator.storage.getDirectory();\n            let prev, prevName;\n            for (const d of this.vfsDir.split('/')) {\n              if (d) {\n                prev = h;\n                h = await h.getDirectoryHandle(d, { create: true });\n              }\n            }\n            this.#dhVfsRoot = h;\n            this.#dhVfsParent = prev;\n            this.#dhOpaque = await this.#dhVfsRoot.getDirectoryHandle(\n              OPAQUE_DIR_NAME,\n              { create: true },\n            );\n            this.releaseAccessHandles();\n            return this.acquireAccessHandles(clearFiles);\n          }\n\n          getPath(arg) {\n            if (wasm.isPtr(arg)) arg = wasm.cstrToJs(arg);\n            return (\n              arg instanceof URL ? arg : new URL(arg, 'file://localhost/')\n            ).pathname;\n          }\n\n          deletePath(path) {\n            const sah = this.#mapFilenameToSAH.get(path);\n            if (sah) {\n              this.#mapFilenameToSAH.delete(path);\n              this.setAssociatedPath(sah, '', 0);\n            }\n            return !!sah;\n          }\n\n          storeErr(e, code) {\n            if (e) {\n              e.sqlite3Rc = code || capi.SQLITE_IOERR;\n              this.error(e);\n            }\n            this.$error = e;\n            return code;\n          }\n\n          popErr() {\n            const rc = this.$error;\n            this.$error = undefined;\n            return rc;\n          }\n\n          nextAvailableSAH() {\n            const [rc] = this.#availableSAH.keys();\n            return rc;\n          }\n\n          getOFileForS3File(pFile) {\n            return this.#mapS3FileToOFile_.get(pFile);\n          }\n\n          mapS3FileToOFile(pFile, file) {\n            if (file) {\n              this.#mapS3FileToOFile_.set(pFile, file);\n              setPoolForPFile(pFile, this);\n            } else {\n              this.#mapS3FileToOFile_.delete(pFile);\n              setPoolForPFile(pFile, false);\n            }\n          }\n\n          hasFilename(name) {\n            return this.#mapFilenameToSAH.has(name);\n          }\n\n          getSAHForPath(path) {\n            return this.#mapFilenameToSAH.get(path);\n          }\n\n          async removeVfs() {\n            if (!this.#cVfs.pointer || !this.#dhOpaque) return false;\n            capi.sqlite3_vfs_unregister(this.#cVfs.pointer);\n            this.#cVfs.dispose();\n            try {\n              this.releaseAccessHandles();\n              await this.#dhVfsRoot.removeEntry(OPAQUE_DIR_NAME, {\n                recursive: true,\n              });\n              this.#dhOpaque = undefined;\n              await this.#dhVfsParent.removeEntry(this.#dhVfsRoot.name, {\n                recursive: true,\n              });\n              this.#dhVfsRoot = this.#dhVfsParent = undefined;\n            } catch (e) {\n              sqlite3.config.error(this.vfsName, 'removeVfs() failed:', e);\n            }\n            return true;\n          }\n\n          exportFile(name) {\n            const sah =\n              this.#mapFilenameToSAH.get(name) || toss('File not found:', name);\n            const n = sah.getSize() - HEADER_OFFSET_DATA;\n            const b = new Uint8Array(n > 0 ? n : 0);\n            if (n > 0) {\n              const nRead = sah.read(b, { at: HEADER_OFFSET_DATA });\n              if (nRead != n) {\n                toss(\n                  'Expected to read ' + n + ' bytes but read ' + nRead + '.',\n                );\n              }\n            }\n            return b;\n          }\n\n          async importDbChunked(name, callback) {\n            const sah =\n              this.#mapFilenameToSAH.get(name) ||\n              this.nextAvailableSAH() ||\n              toss('No available handles to import to.');\n            sah.truncate(0);\n            let nWrote = 0,\n              chunk,\n              checkedHeader = false,\n              err = false;\n            try {\n              while (undefined !== (chunk = await callback())) {\n                if (chunk instanceof ArrayBuffer) chunk = new Uint8Array(chunk);\n                if (0 === nWrote && chunk.byteLength >= 15) {\n                  util.affirmDbHeader(chunk);\n                  checkedHeader = true;\n                }\n                sah.write(chunk, { at: HEADER_OFFSET_DATA + nWrote });\n                nWrote += chunk.byteLength;\n              }\n              if (nWrote < 512 || 0 !== nWrote % 512) {\n                toss(\n                  'Input size',\n                  nWrote,\n                  'is not correct for an SQLite database.',\n                );\n              }\n              if (!checkedHeader) {\n                const header = new Uint8Array(20);\n                sah.read(header, { at: 0 });\n                util.affirmDbHeader(header);\n              }\n              sah.write(new Uint8Array([1, 1]), {\n                at: HEADER_OFFSET_DATA + 18,\n              });\n            } catch (e) {\n              this.setAssociatedPath(sah, '', 0);\n              throw e;\n            }\n            this.setAssociatedPath(sah, name, capi.SQLITE_OPEN_MAIN_DB);\n            return nWrote;\n          }\n\n          importDb(name, bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            else if (bytes instanceof Function)\n              return this.importDbChunked(name, bytes);\n            const sah =\n              this.#mapFilenameToSAH.get(name) ||\n              this.nextAvailableSAH() ||\n              toss('No available handles to import to.');\n            const n = bytes.byteLength;\n            if (n < 512 || n % 512 != 0) {\n              toss('Byte array size is invalid for an SQLite db.');\n            }\n            const header = 'SQLite format 3';\n            for (let i = 0; i < header.length; ++i) {\n              if (header.charCodeAt(i) !== bytes[i]) {\n                toss('Input does not contain an SQLite database header.');\n              }\n            }\n            const nWrote = sah.write(bytes, { at: HEADER_OFFSET_DATA });\n            if (nWrote != n) {\n              this.setAssociatedPath(sah, '', 0);\n              toss(\n                'Expected to write ' + n + ' bytes but wrote ' + nWrote + '.',\n              );\n            } else {\n              sah.write(new Uint8Array([1, 1]), {\n                at: HEADER_OFFSET_DATA + 18,\n              });\n              this.setAssociatedPath(sah, name, capi.SQLITE_OPEN_MAIN_DB);\n            }\n            return nWrote;\n          }\n        }\n\n        class OpfsSAHPoolUtil {\n          #p;\n\n          constructor(sahPool) {\n            this.#p = sahPool;\n            this.vfsName = sahPool.vfsName;\n          }\n\n          async addCapacity(n) {\n            return this.#p.addCapacity(n);\n          }\n\n          async reduceCapacity(n) {\n            return this.#p.reduceCapacity(n);\n          }\n\n          getCapacity() {\n            return this.#p.getCapacity(this.#p);\n          }\n\n          getFileCount() {\n            return this.#p.getFileCount();\n          }\n          getFileNames() {\n            return this.#p.getFileNames();\n          }\n\n          async reserveMinimumCapacity(min) {\n            const c = this.#p.getCapacity();\n            return c < min ? this.#p.addCapacity(min - c) : c;\n          }\n\n          exportFile(name) {\n            return this.#p.exportFile(name);\n          }\n\n          importDb(name, bytes) {\n            return this.#p.importDb(name, bytes);\n          }\n\n          async wipeFiles() {\n            return this.#p.reset(true);\n          }\n\n          unlink(filename) {\n            return this.#p.deletePath(filename);\n          }\n\n          async removeVfs() {\n            return this.#p.removeVfs();\n          }\n        }\n\n        const apiVersionCheck = async () => {\n          const dh = await navigator.storage.getDirectory();\n          const fn = '.opfs-sahpool-sync-check-' + getRandomName();\n          const fh = await dh.getFileHandle(fn, { create: true });\n          const ah = await fh.createSyncAccessHandle();\n          const close = ah.close();\n          await close;\n          await dh.removeEntry(fn);\n          if (close?.then) {\n            toss(\n              'The local OPFS API is too old for opfs-sahpool:',\n              'it has an async FileSystemSyncAccessHandle.close() method.',\n            );\n          }\n          return true;\n        };\n\n        let instanceCounter = 0;\n\n        sqlite3.installOpfsSAHPoolVfs = async function (\n          options = Object.create(null),\n        ) {\n          const vfsName = options.name || optionDefaults.name;\n          if (false) {}\n          if (initPromises[vfsName]) {\n            return initPromises[vfsName];\n          }\n          if (\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle ||\n            !globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle ||\n            !navigator?.storage?.getDirectory\n          ) {\n            return (initPromises[vfsName] = Promise.reject(\n              new Error('Missing required OPFS APIs.'),\n            ));\n          }\n\n          return (initPromises[vfsName] = apiVersionCheck()\n            .then(async function () {\n              if (options.$testThrowInInit) {\n                throw options.$testThrowInInit;\n              }\n              const thePool = new OpfsSAHPool(options);\n              return thePool.isReady\n                .then(async () => {\n                  const poolUtil = new OpfsSAHPoolUtil(thePool);\n                  if (sqlite3.oo1) {\n                    const oo1 = sqlite3.oo1;\n                    const theVfs = thePool.getVfs();\n                    const OpfsSAHPoolDb = function (...args) {\n                      const opt = oo1.DB.dbCtorHelper.normalizeArgs(...args);\n                      opt.vfs = theVfs.$zName;\n                      oo1.DB.dbCtorHelper.call(this, opt);\n                    };\n                    OpfsSAHPoolDb.prototype = Object.create(oo1.DB.prototype);\n\n                    poolUtil.OpfsSAHPoolDb = OpfsSAHPoolDb;\n                    oo1.DB.dbCtorHelper.setVfsPostOpenSql(\n                      theVfs.pointer,\n                      function (oo1Db, sqlite3) {\n                        sqlite3.capi.sqlite3_exec(\n                          oo1Db,\n                          [\n                            'pragma journal_mode=DELETE;',\n                            'pragma cache_size=-16384;',\n                          ],\n                          0,\n                          0,\n                          0,\n                        );\n                      },\n                    );\n                  }\n                  thePool.log('VFS initialized.');\n                  return poolUtil;\n                })\n                .catch(async (e) => {\n                  await thePool.removeVfs().catch(() => {});\n                  return e;\n                });\n            })\n            .catch((err) => {\n              return (initPromises[vfsName] = Promise.reject(err));\n            }));\n        };\n      });\n\n      ('use strict');\n      if ('undefined' !== typeof Module) {\n        const SABC = Object.assign(\n          Object.create(null),\n          {\n            exports:\n              'undefined' === typeof wasmExports ? Module['asm'] : wasmExports,\n            memory: Module.wasmMemory,\n          },\n          globalThis.sqlite3ApiConfig || {},\n        );\n\n        globalThis.sqlite3ApiConfig = SABC;\n        let sqlite3;\n        try {\n          sqlite3 = globalThis.sqlite3ApiBootstrap();\n        } catch (e) {\n          console.error('sqlite3ApiBootstrap() error:', e);\n          throw e;\n        } finally {\n          delete globalThis.sqlite3ApiBootstrap;\n          delete globalThis.sqlite3ApiConfig;\n        }\n\n        Module.sqlite3 = sqlite3;\n      } else {\n        console.warn(\n          'This is not running in an Emscripten module context, so',\n          'globalThis.sqlite3ApiBootstrap() is _not_ being called due to lack',\n          'of config info for the WASM environment.',\n          'It must be called manually.',\n        );\n      }\n    });\n\n    return sqlite3InitModule.ready;\n  };\n})();\n\nconst toExportForESM = (function () {\n  const originalInit = sqlite3InitModule;\n  if (!originalInit) {\n    throw new Error(\n      'Expecting globalThis.sqlite3InitModule to be defined by the Emscripten build.',\n    );\n  }\n\n  const initModuleState = (globalThis.sqlite3InitModuleState = Object.assign(\n    Object.create(null),\n    {\n      moduleScript: globalThis?.document?.currentScript,\n      isWorker: 'undefined' !== typeof WorkerGlobalScope,\n      location: globalThis.location,\n      urlParams: globalThis?.location?.href\n        ? new URL(globalThis.location.href).searchParams\n        : new URLSearchParams(),\n    },\n  ));\n  initModuleState.debugModule = initModuleState.urlParams.has(\n    'sqlite3.debugModule',\n  )\n    ? (...args) => console.warn('sqlite3.debugModule:', ...args)\n    : () => {};\n\n  if (initModuleState.urlParams.has('sqlite3.dir')) {\n    initModuleState.sqlite3Dir =\n      initModuleState.urlParams.get('sqlite3.dir') + '/';\n  } else if (initModuleState.moduleScript) {\n    const li = initModuleState.moduleScript.src.split('/');\n    li.pop();\n    initModuleState.sqlite3Dir = li.join('/') + '/';\n  }\n\n  globalThis.sqlite3InitModule = function ff(...args) {\n    return originalInit(...args)\n      .then((EmscriptenModule) => {\n        const s = EmscriptenModule.sqlite3;\n        s.scriptInfo = initModuleState;\n\n        if (ff.__isUnderTest) s.__isUnderTest = true;\n        const f = s.asyncPostInit;\n        delete s.asyncPostInit;\n        return f();\n      })\n      .catch((e) => {\n        console.error('Exception loading sqlite3 module:', e);\n        throw e;\n      });\n  };\n  globalThis.sqlite3InitModule.ready = originalInit.ready;\n\n  if (globalThis.sqlite3InitModuleState.moduleScript) {\n    const sim = globalThis.sqlite3InitModuleState;\n    let src = sim.moduleScript.src.split('/');\n    src.pop();\n    sim.scriptDir = src.join('/') + '/';\n  }\n  initModuleState.debugModule('sqlite3InitModuleState =', initModuleState);\n  if (false) {}\n  return globalThis.sqlite3InitModule;\n})();\nsqlite3InitModule = toExportForESM;\n/* harmony default export */ const sqlite3_bundler_friendly = (sqlite3InitModule);\n\n;// CONCATENATED MODULE: ./node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-worker1-bundler-friendly.mjs\n/*\n  2022-05-23\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This is a JS Worker file for the main sqlite3 api. It loads\n  sqlite3.js, initializes the module, and postMessage()'s a message\n  after the module is initialized:\n\n  {type: 'sqlite3-api', result: 'worker1-ready'}\n\n  This seemingly superfluous level of indirection is necessary when\n  loading sqlite3.js via a Worker. Instantiating a worker with new\n  Worker(\"sqlite.js\") will not (cannot) call sqlite3InitModule() to\n  initialize the module due to a timing/order-of-operations conflict\n  (and that symbol is not exported in a way that a Worker loading it\n  that way can see it).  Thus JS code wanting to load the sqlite3\n  Worker-specific API needs to pass _this_ file (or equivalent) to the\n  Worker constructor and then listen for an event in the form shown\n  above in order to know when the module has completed initialization.\n\n  This file accepts a URL arguments to adjust how it loads sqlite3.js:\n\n  - `sqlite3.dir`, if set, treats the given directory name as the\n    directory from which `sqlite3.js` will be loaded.\n*/\n\nsqlite3_bundler_friendly().then((sqlite3) => sqlite3.initWorker1API());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///787\n")}},__webpack_module_cache__={};function __webpack_require__(A){var I=__webpack_module_cache__[A];if(void 0!==I)return I.exports;var g=__webpack_module_cache__[A]={exports:{}};return __webpack_modules__[A](g,g.exports,__webpack_require__),g.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.u=A=>"websql-revival."+A+".js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(A){if("object"==typeof window)return window}}(),__webpack_require__.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I),(()=>{var A;__webpack_require__.g.importScripts&&(A=__webpack_require__.g.location+"");var I=__webpack_require__.g.document;if(!A&&I&&(I.currentScript&&(A=I.currentScript.src),!A)){var g=I.getElementsByTagName("script");g.length&&(A=g[g.length-1].src)}if(!A)throw new Error("Automatic publicPath is not supported in this browser");A=A.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=A})(),__webpack_require__.b=self.location+"";var __webpack_exports__=__webpack_require__(787)})();